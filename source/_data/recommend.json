{
  "home":[
    {
      "id": 2865291,
      "space": "res",
      "slug": "index",
      "url": "/res/index",
      "title": "Res - Node React Web Framework",
      "summary": "res -- Node React Application Web Framework. 支持 React Server Side Render 和 Client Side Render; 基于 Egg 开发，遵循 Egg 开发规范和 Egg 生态，支持 Egg 所有特性，比如插件机制，多进程机制...",
      "coverImage": null,
      "createTime": "2019-10-15T12:42:44.000Z",
      "updateTime": "2019-10-15T12:42:44.000Z",
      "wordCount": 198
    },
    {
      "id": 922183,
      "space": "ves",
      "slug": "introduction",
      "url": "/ves/introduction",
      "title": "Ves - Node Vue Web Framework",
      "summary": "ves 基于 Egg + Vue 的Node 应用基础框架; 支持 Vue Server Side Render 和 Client Side Render; 基于 Egg 开发，遵循 Egg 开发规范和 Egg 生态，支持 Egg 所有特性，比如插件机制，多进程机制使用 TypeScr...",
      "coverImage": null,
      "createTime": "2019-03-13T02:38:02.000Z",
      "updateTime": "2019-05-30T01:24:25.000Z",
      "wordCount": 165
    }
  ],
  "res":[
    {
      "id": 2865291,
      "space": "res",
      "slug": "introduction",
      "url": "/res/introduction",
      "title": "框架介绍",
      "summary": "res -- Node React Application  Web FrameworkGitHub:https://github.com/easy-team/res框架特性Node 端基于 Egg 开发，遵循 Egg 开发规范和 Egg 生态，支持 Egg 所有特性，比如插件机制，多进程机制...",
      "coverImage": null,
      "createTime": "2019-10-15T12:42:44.000Z",
      "updateTime": "2019-10-15T12:42:44.000Z",
      "wordCount": 198
    },
    {
      "id": 2865289,
      "space": "res",
      "slug": "quickstart",
      "url": "/res/quickstart",
      "title": "快速开始",
      "summary": "项目初始化安装 res-cli 命令行工具$ npm instal @easy-team/res-cli -g  $ res --help  Commands:   init [options]         init boilerplate   dev                   ...",
      "coverImage": null,
      "createTime": "2019-10-15T12:40:54.000Z",
      "updateTime": "2019-10-15T12:40:54.000Z",
      "wordCount": 421
    }
  ],
  "ves":[
    {
      "id": 922183,
      "space": "ves",
      "slug": "introduction",
      "url": "/ves/introduction",
      "title": "框架介绍",
      "summary": "ves 基于 Egg + Vue 的 TypeScript Node 应用基础框架GitHub:https://github.com/ves-team特性Node 端基于 Egg 开发，遵循 Egg 开发规范和 Egg 生态，支持 Egg 所有特性，比如插件机制，多进程机制使用 TypeScr...",
      "coverImage": null,
      "createTime": "2019-03-13T02:38:02.000Z",
      "updateTime": "2019-05-30T01:24:25.000Z",
      "wordCount": 165
    },
    {
      "id": 922184,
      "space": "ves",
      "slug": "quickstart",
      "url": "/ves/quickstart",
      "title": "快速开始",
      "summary": "项目初始化安装 ves-cli 命令行工具$ npm instal ves-cli -g  $ ves --help  Commands:   init [options]         init boilerplate   dev                    start ves ...",
      "coverImage": null,
      "createTime": "2019-03-13T02:39:07.000Z",
      "updateTime": "2019-10-09T03:42:38.000Z",
      "wordCount": 456
    }
  ],
  "egg-react":[
    {
      "id": 685689,
      "space": "egg-react",
      "slug": "init",
      "url": "/egg-react/init",
      "title": "快速开始",
      "summary": "基于 Egg + React + Webpack 服务端渲染开发指南1. 项目初始化1.1 通过 easywebpack-cli 脚手架初始化安装脚手架 npm install easywebpack-cli -g 命令行，然后就可以使用  easy 命令命令行运行 easy init选择 e...",
      "coverImage": null,
      "createTime": "2019-10-03T14:25:46.000Z",
      "updateTime": "2019-10-09T04:44:10.000Z",
      "wordCount": 1977
    }
  ],
  "egg-vue":[
    {
      "id": 685667,
      "space": "egg-vue",
      "slug": "init",
      "url": "/egg-vue/init",
      "title": "快速开始",
      "summary": "基于 Egg + Vue + Webpack 服务端渲染开发指南1. 项目初始化1.1 easywebpack-cli 脚手架初始化项目安装脚手架 npm install easywebpack-cli -g 命令行，然后就可以使用 easywebpack 或 easy 命令命令行运行 eas...",
      "coverImage": null,
      "createTime": "2019-03-01T08:48:05.000Z",
      "updateTime": "2019-10-18T02:12:11.000Z",
      "wordCount": 2712
    },
    {
      "id": 685668,
      "space": "egg-vue",
      "slug": "start",
      "url": "/egg-vue/start",
      "title": "从零开始",
      "summary": "从零开始搭建 Egg + Vue + Webpack 服务端渲染项目1. 初始化环境安装 Node LST (8.x.x) 环境： https://nodejs.org/zh-cn2. 初始化 egg 项目https://github.com/eggjs/egg-init/blob/maste...",
      "coverImage": null,
      "createTime": "2019-07-12T15:44:47.000Z",
      "updateTime": "2019-08-06T07:56:28.000Z",
      "wordCount": 1752
    },
    {
      "id": 685669,
      "space": "egg-vue",
      "slug": "render",
      "url": "/egg-vue/render",
      "title": "渲染模式",
      "summary": "Egg + Vue 渲染模式目前 egg-view-vue-ssr 支持 服务端渲染模式 和 前端渲染模式 两种渲染模式Egg + Vue 服务端 Node 渲染模式这里服务端渲染指的是编写的 Vue 组件在 Node 服务端直接编译成完整的HTML, 然后直接输出给浏览器。MVVM 服务端渲染相比前端渲染，支持SEO，更快的首屏渲染，相比传统的模板引擎，更好的组件化，前后端模板共用。 同时 MVVM 数据驱动方式有着更快的开发效率。总体来说，MVVM 框架的服务端渲染技术比较适合有一定交互性，且对SEO...",
      "coverImage": null,
      "createTime": "2018-06-09T05:22:23.000Z",
      "updateTime": "2019-06-25T11:47:59.000Z",
      "wordCount": 933
    }
  ],
  "easywebpack":[
    {
      "id": 685522,
      "space": "easywebpack",
      "slug": "index",
      "url": "/easywebpack/index",
      "title": "方案介绍",
      "summary": "easywebpack 是什么easywebpack 是基于 webpack 的前端工程化解决方案。旨在解决 webpack 项目构建复杂,使用成本高,复用低,维护成本高等工程效率问题。基于 easywebpack 工程化方案, 你能非常简单容易的对各种前端项目进行工程化建设，及时享受最新的特...",
      "coverImage": null,
      "createTime": "2019-10-05T07:50:54.000Z",
      "updateTime": "2019-10-05T07:50:54.000Z",
      "wordCount": 1408
    },
    {
      "id": 685538,
      "space": "easywebpack",
      "slug": "about",
      "url": "/easywebpack/about",
      "title": "项目实战",
      "summary": "快速开始我们可以使用基于 easywebpack 前端工程化解决方案构建的脚手架 easywebpack-cli 初始化各种项目, 目前支持如下骨架项目:multiple-html-boilerplate 纯静态 Webpack + HTML + 页面构建项目骨架vue-client-rend...",
      "coverImage": null,
      "createTime": "2019-03-08T06:39:57.000Z",
      "updateTime": "2019-05-22T01:47:56.000Z",
      "wordCount": 506
    },
    {
      "id": 685539,
      "space": "easywebpack",
      "slug": "problem",
      "url": "/easywebpack/problem",
      "title": "常见问题",
      "summary": "Babel 快速升级问题为了更方便升级 Babel7, 同时尽量减少配置且无需安装 @babel 依赖，@easy-team 模式直接内置Babel 7 的相关依赖，只需要把 easywebpack 依赖模式改成 @easy-team/easywebpack 模式，如果代码中直接依赖了也请一并...",
      "coverImage": null,
      "createTime": "2019-10-13T12:34:10.000Z",
      "updateTime": "2019-10-13T12:34:10.000Z",
      "wordCount": 2358
    }
  ],
  "blog":[
    {
      "id": 2229810,
      "space": "blog",
      "slug": "cdal6o",
      "url": "/blog/cdal6o",
      "title": "Egg + Web 自定义前端渲染",
      "summary": "背景在 前端渲染模式 和 asset 渲染模式 章节讲到了基于 React 的前端渲染模式，但都依赖  egg-view-react-ssr 插件，那如何基于已有 egg 模板引擎 (egg-view-nunjucks 或 egg-view-ejs) + Webpack 完全自定义前端方案呢？...",
      "coverImage": null,
      "createTime": "2019-07-29T10:31:41.000Z",
      "updateTime": "2019-07-29T10:31:41.000Z",
      "wordCount": 625
    },
    {
      "id": 1917532,
      "space": "blog",
      "slug": "ruv09m",
      "url": "/blog/ruv09m",
      "title": "Egg Webpack 内存编译热更新实现",
      "summary": "1. 背景在用 Node.js + Webpack 构建的方式进行开发时, 我们希望能实现修改代码能实时刷新页面UI的效果. 这个特性 Webpack本身是支持的, 而且基于koa也有现成的 koa-webpack-hot-middleware 和 koa-webpack-dev-middle...",
      "coverImage": "https://cdn.nlark.com/yuque/0/2019/png/116733/1560616044583-df8c99ac-297d-44d0-a824-212947d3ef6d.png",
      "createTime": "2019-06-15T16:29:11.000Z",
      "updateTime": "2019-06-15T16:29:11.000Z",
      "wordCount": 1589
    },
    {
      "id": 2107007,
      "space": "blog",
      "slug": "lsrssy",
      "url": "/blog/lsrssy",
      "title": "Flutter  Android  混合工程实践",
      "summary": "在 Flutter 混合工程体系 一文中，阐述了Flutter 三种开发模式，在实际业务中搭建持续集成时，我们更希望发本地开发使用混合模式，持续集成使用解耦模式， 主要是解决以下两个问题： 混合模式：开发调试方便，包括热更新， Native 与 Flutter 开发源码断点调试 解耦模式：不侵...",
      "coverImage": "https://cdn.nlark.com/yuque/0/2019/png/116733/1561088548020-8053b68f-c617-48d3-865e-fc426f098107.png",
      "createTime": "2019-07-12T16:12:51.000Z",
      "updateTime": "2019-07-12T16:13:43.000Z",
      "wordCount": 2125
    }
  ]
}