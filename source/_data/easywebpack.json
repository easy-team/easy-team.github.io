[
  {
    "id": 685522,
    "space": "easywebpack",
    "slug": "index",
    "url": "/easywebpack/index",
    "title": "总体介绍",
    "summary": "easywebpack 是什么easywebpack 是基于 webpack 的前端工程化解决方案。旨在解决 webpack 项目构建复杂,使用成本高,复用低,维护成本高等工程效率问题。基于 easywebpack 工程化方案, 你能非常简单容易的对各种前端项目进行工程化建设，及时享受最新的特...",
    "coverImage": null,
    "createTime": "2019-10-05T07:50:54.000Z",
    "updateTime": "2019-10-05T07:50:54.000Z",
    "wordCount": 1408
  },
  {
    "id": 685538,
    "space": "easywebpack",
    "slug": "about",
    "url": "/easywebpack/about",
    "title": "项目实战",
    "summary": "快速开始我们可以使用基于 easywebpack 前端工程化解决方案构建的脚手架 easywebpack-cli 初始化各种项目, 目前支持如下骨架项目:multiple-html-boilerplate 纯静态 Webpack + HTML + 页面构建项目骨架vue-client-rend...",
    "coverImage": null,
    "createTime": "2019-03-08T06:39:57.000Z",
    "updateTime": "2019-05-22T01:47:56.000Z",
    "wordCount": 506
  },
  {
    "id": 685539,
    "space": "easywebpack",
    "slug": "problem",
    "url": "/easywebpack/problem",
    "title": "常见问题",
    "summary": "Babel 快速升级问题为了更方便升级 Babel7, 同时尽量减少配置且无需安装 @babel 依赖，@easy-team 模式直接内置Babel 7 的相关依赖，只需要把 easywebpack 依赖模式改成 @easy-team/easywebpack 模式，如果代码中直接依赖了也请一并...",
    "coverImage": null,
    "createTime": "2019-10-13T12:34:10.000Z",
    "updateTime": "2019-10-13T12:34:10.000Z",
    "wordCount": 2358
  },
  {
    "id": 685540,
    "space": "easywebpack",
    "slug": "version",
    "url": "/easywebpack/version",
    "title": "版本历史",
    "summary": "easywebpack 版本发布说明easywebpack4 -&gt; Webpack4支持 Webpack 4 插件版本easywebpack: ^4.x.xeasywebpack-cli: ^3.x.xeasywebpack-vue: ^4.x.xeasywebpack-react: ^4.x.xeasywebpack-html: ^4.x.xeasywebpack-js: ^4.x.xegg-webpack: ^4.x.xwebpack-tool: ^4.x.xwebpack-manifest...",
    "coverImage": null,
    "createTime": "2018-08-21T11:50:56.000Z",
    "updateTime": "2019-08-30T02:29:48.000Z",
    "wordCount": 170
  },
  {
    "id": 685541,
    "space": "easywebpack",
    "slug": "config",
    "url": "/easywebpack/config",
    "title": "webpack.config.js",
    "summary": "webpack.config.js// ${app_root}/webpack.config.js module.exports = {   // framework 支持 `js`,`html`, `vue`, `react`, `weex`   framework: 'html'    e...",
    "coverImage": null,
    "createTime": "2019-06-28T15:07:00.000Z",
    "updateTime": "2019-06-28T15:07:00.000Z",
    "wordCount": 515
  },
  {
    "id": 685546,
    "space": "easywebpack",
    "slug": "base",
    "url": "/easywebpack/base",
    "title": "扩展配置",
    "summary": "webpack.config.js 常用配置1. Egg框架配置  (扩展简化配置)config.egg : {Boolean} 特殊参数,  Egg SSR 构建时使用。easywebpack 4.8.0 无需配置，已支持自动检测使用条件:只有在使用 Egg 框架进行 Server Side...",
    "coverImage": null,
    "createTime": "2018-11-21T08:32:07.000Z",
    "updateTime": "2019-05-22T01:36:04.000Z",
    "wordCount": 1510
  },
  {
    "id": 685551,
    "space": "easywebpack",
    "slug": "build",
    "url": "/easywebpack/build",
    "title": "deploy",
    "summary": "打包配置支持 webpack.config.js 文件配置 和 &nbsp;easyweback-cli 模式, &nbsp;easywebpack-cli@4.3.2 开始支持。注意打部署包时, 如果把 node 和 alinode 打进依赖包里面，请保证打包机器操作系统与线上运行的操作系统...",
    "coverImage": null,
    "createTime": "2019-08-25T05:22:56.000Z",
    "updateTime": "2019-08-25T05:25:56.000Z",
    "wordCount": 1378
  },
  {
    "id": 685552,
    "space": "easywebpack",
    "slug": "entry",
    "url": "/easywebpack/entry",
    "title": "entry",
    "summary": "entry 基本配置config.entry : {String|Object}  Webpack 构建入口文件配置这里的entry 对 Webpack 的 entry 进行了增强， 除了支持 webpack 原生 Object(key:value) 方式配置， 还对entry进行了增强。We...",
    "coverImage": null,
    "createTime": "2019-06-28T16:06:10.000Z",
    "updateTime": "2019-06-28T16:06:10.000Z",
    "wordCount": 869
  },
  {
    "id": 685553,
    "space": "easywebpack",
    "slug": "loader",
    "url": "/easywebpack/loader",
    "title": "loaders",
    "summary": "v3 代表 easywebpack 3.x.x, v4 代表 easywebpack 4.x.x内置配置 loaderseasywebpack 内置了 babel, eslint, css, sass, less, stylus, urlimage, urlfont 等loader,easyw...",
    "coverImage": null,
    "createTime": "2019-06-28T11:14:40.000Z",
    "updateTime": "2019-06-28T11:14:40.000Z",
    "wordCount": 1323
  },
  {
    "id": 685557,
    "space": "easywebpack",
    "slug": "plugin",
    "url": "/easywebpack/plugin",
    "title": "plugins",
    "summary": "内置pluginplugin别名默认是否开启/开启环境npm-install-webpack-pluginnpm否webpack.DefinePlugindefine是webpack.NamedModulesPluginnameModule是/devwebpack.HashedModuleId...",
    "coverImage": null,
    "createTime": "2019-06-28T11:31:03.000Z",
    "updateTime": "2019-06-28T11:31:03.000Z",
    "wordCount": 638
  },
  {
    "id": 685559,
    "space": "easywebpack",
    "slug": "allconfig",
    "url": "/easywebpack/allconfig",
    "title": "全部配置项",
    "summary": "webpack.config.js 参数配置说明// ${app_root}/webpack.config.js module.exports = {   framework: &#x27;html&#x27;   entry:{        }   ...... } 1. 环境配置config.env : 非必需, 目前支持 dev, test, prod 三种环境, 默认 dev使用条件: 使用 easywebpack-cli 构建时, 无需配置该参数.dev  : 开启热更新, image/css...",
    "coverImage": null,
    "createTime": "2018-09-20T01:30:00.000Z",
    "updateTime": "2019-05-20T16:07:16.000Z",
    "wordCount": 2104
  },
  {
    "id": 685564,
    "space": "easywebpack",
    "slug": "native",
    "url": "/easywebpack/native",
    "title": "快速开始",
    "summary": "easywebpack 获取原生 Webpack 配置easywebpack.getWebpackConfig(config)  这种获取方式是指通过解决方案获取配置, 参数 config 支持如下三种配置: config 为 null 或 undefined 时, 目前读取项目根目录下的 w...",
    "coverImage": null,
    "createTime": "2019-10-05T07:49:14.000Z",
    "updateTime": "2019-10-05T07:49:14.000Z",
    "wordCount": 405
  },
  {
    "id": 685565,
    "space": "easywebpack",
    "slug": "debug",
    "url": "/easywebpack/debug",
    "title": "开发调试",
    "summary": "当我们使用 easywebpack 时， 遇到构建问题时，我们可以通过 easywebpack-cli 的  easy print 命令检查一下生成的 webpack config 配置是否正确。默认读取项目根目录下的 webpack.config.js 配置, 你可以通过 -f  参数指定指...",
    "coverImage": null,
    "createTime": "2019-06-28T15:13:02.000Z",
    "updateTime": "2019-06-28T15:13:03.000Z",
    "wordCount": 1143
  },
  {
    "id": 685568,
    "space": "easywebpack",
    "slug": "proxy",
    "url": "/easywebpack/proxy",
    "title": "域名代理",
    "summary": "本地开发域名代理构建支持前提：代理域名能够映射到本机ip地址的功能需要你自己在电脑上面配置。如果是实际的存在的域名，理论上面就不需要自己配置域名映射。该功能只在 Egg 应用构建本地开发使用。在 Egg SSR 应用开发时，Egg 应用的访问地址， 静态资源构建的地址， HMR 地址都是 ip...",
    "coverImage": null,
    "createTime": "2019-08-24T08:47:00.000Z",
    "updateTime": "2019-08-24T08:47:00.000Z",
    "wordCount": 1729
  },
  {
    "id": 685570,
    "space": "easywebpack",
    "slug": "var",
    "url": "/easywebpack/var",
    "title": "全局常量",
    "summary": "easywebpack 内置全局常量easywebpack 通过 webpack.DefinePlugin webpack 插件内置了如下全局常量, 方便业务使用。process.env.NODE_ENV首先会获取用户 process.env.NODE_ENV 值, 如果获取不到，当构建 pr...",
    "coverImage": null,
    "createTime": "2019-06-28T11:34:47.000Z",
    "updateTime": "2019-06-28T11:34:47.000Z",
    "wordCount": 270
  },
  {
    "id": 685571,
    "space": "easywebpack",
    "slug": "deps",
    "url": "/easywebpack/deps",
    "title": "资源依赖",
    "summary": "easywebpack 静态资源 manifest 文件easywebpack 3.5.0 新增自定义插件 webpack-manifest-resource-plugin 替换 webpack-manifest-plugin。 之前的 manifest 依赖关系是在 Egg 运行期间解析的，...",
    "coverImage": null,
    "createTime": "2019-06-28T15:13:16.000Z",
    "updateTime": "2019-06-28T15:13:16.000Z",
    "wordCount": 262
  },
  {
    "id": 685572,
    "space": "easywebpack",
    "slug": "common",
    "url": "/easywebpack/common",
    "title": "公共提取",
    "summary": "Webpack CommonsChunk 公共代码提取easywebpack 4.10.0 开始，底层通过 optimization 实现公共提取，支持公共 js 和 css  提取, 提取的公共 chunk 文件名默认为 common .   默认是提取的是 node_modules 下依赖...",
    "coverImage": null,
    "createTime": "2018-11-15T07:46:25.000Z",
    "updateTime": "2019-05-23T07:04:53.000Z",
    "wordCount": 211
  },
  {
    "id": 685574,
    "space": "easywebpack",
    "slug": "speed",
    "url": "/easywebpack/speed",
    "title": "极速编译",
    "summary": "DLL 公共提取Webpack 通过 DLLPlugin 和 DLLReferencePlugin 可以实现公共类库的单独提取，能极大大提升了构建的速度.只需要在 webpack.config.js 文件添加 dll 节点配置即可完成 dll 整个流程。module.exports = {   dll:[&#x27;vue&#x27;,&#x27;vuex&#x27;,&#x27;axios&#x27;] } 详细方案：Webpack DLL 工程化实现开启 cache-loader...",
    "coverImage": null,
    "createTime": "2018-09-05T08:40:13.000Z",
    "updateTime": "2019-05-22T02:24:42.000Z",
    "wordCount": 353
  },
  {
    "id": 685576,
    "space": "easywebpack",
    "slug": "dll",
    "url": "/easywebpack/dll",
    "title": "DLL 构建",
    "summary": "Webpack Dll 构建在 3.5.0 版本之前，webpack 构建随着项目越来越来大，打包也就越来越慢; 同时 dll 工程化构建也没有内置支持。虽然可以通过在 easywebpack 中添加 new webpack.DllPlugin() 和 webpack.DllReference...",
    "coverImage": null,
    "createTime": "2019-08-02T05:38:28.000Z",
    "updateTime": "2019-08-02T05:38:28.000Z",
    "wordCount": 955
  },
  {
    "id": 685579,
    "space": "easywebpack",
    "slug": "cdn",
    "url": "/easywebpack/cdn",
    "title": "CDN 构建",
    "summary": "基本配置easywebpack 提供了 cdn 配置节点, 只需要配置 cdn 地址即可(cdn地址会覆盖publicPath地址).配置如下:easywebpack3 配置后 dev，test， prod 模式都会生效, 一般通过变量控制 cdn 节点的配置// ${app_root}/webpack.config.js module.exports = {   ......   cdn:UPLOAD_CDN ? { url: &#x27;http://xxx.cdn.com/public/&#x2...",
    "coverImage": null,
    "createTime": "2018-09-05T07:16:29.000Z",
    "updateTime": "2019-05-19T05:52:27.000Z",
    "wordCount": 433
  },
  {
    "id": 685581,
    "space": "easywebpack",
    "slug": "pwd",
    "url": "/easywebpack/pwd",
    "title": "PWA 支持",
    "summary": "service-worker 生成easywebpack 3.7.0 内置支持 service-worker.js 生成, 该功能是通过 service-worker-precache-webpack-plugin实现的。你可以通过如下方式开启， 默认禁用。//${app_root}/webpack.config.js module.exports = {   plugins:{     serviceworker:true   } } 开启后, easywebpack 会自动生成 service...",
    "coverImage": null,
    "createTime": "2018-06-09T03:09:47.000Z",
    "updateTime": "2019-05-22T02:25:02.000Z",
    "wordCount": 654
  },
  {
    "id": 685582,
    "space": "easywebpack",
    "slug": "typescript",
    "url": "/easywebpack/typescript",
    "title": "TypeScript",
    "summary": "TypeScript 构建支持在用 TypeScript 编写 Vue 应用时， Vue 里面的 TypeScript 代码建议不要写在 Vue 文件里面，请以单独 ts 文件存放 TypeScript 代码。目前测试发现与 thread-loader 一起使用是有问题的。easywebpac...",
    "coverImage": null,
    "createTime": "2018-11-15T07:45:29.000Z",
    "updateTime": "2019-06-06T10:48:26.000Z",
    "wordCount": 202
  },
  {
    "id": 685598,
    "space": "easywebpack",
    "slug": "rlm0ki",
    "url": "/easywebpack/rlm0ki",
    "title": "交流反馈",
    "summary": "欢迎有兴趣的开发者参与！邮箱 hubcarl@126.comGitHubhttps://github.com/hubcarl知乎https://zhuanlan.zhihu.com/easywebpackQQ群有问题可以直接在在语雀评论回复(^_^)",
    "coverImage": null,
    "createTime": "2019-06-28T16:10:14.000Z",
    "updateTime": "2019-08-30T02:29:24.000Z",
    "wordCount": 47
  },
  {
    "id": 685602,
    "space": "easywebpack",
    "slug": "home",
    "url": "/easywebpack/home",
    "title": "基本介绍",
    "summary": "easywebpack基于 Webpack 的前端构建工程化解决方案A Simple, Powerful Wepback Front-End Development Solution    使用文档     技术文章     GitHub",
    "coverImage": null,
    "createTime": "2019-06-25T06:05:23.000Z",
    "updateTime": "2019-06-25T06:05:23.000Z",
    "wordCount": 33
  },
  {
    "id": 685616,
    "space": "easywebpack",
    "slug": "vue",
    "url": "/easywebpack/vue",
    "title": "Vue 项目构建",
    "summary": "Webpack  原始配置编写// webpack.config.js const easywebpack = require(&#x27;easywebpack-vue&#x27;); const webpack = easywebpack.webpack; const merge = easywebpack.merge; const env = process.env.BUILD_ENV; const baseWebpackConfig = easywebpack.getWebpackConfig...",
    "coverImage": null,
    "createTime": "2018-06-09T03:40:38.000Z",
    "updateTime": "2019-05-22T09:39:34.000Z",
    "wordCount": 201
  },
  {
    "id": 685622,
    "space": "easywebpack",
    "slug": "abtuv0",
    "url": "/easywebpack/abtuv0",
    "title": "基础配置",
    "summary": "在使用相关方案时, 请在项目中添加 babel  和 postcss  基础配置文件添加 ${app_root}/.babelrc 文件具体根据实际情况添加相关 babel 插件配置，以下仅仅是举例：{   &quot;presets&quot;: [[&quot;env&quot;,{ &quot;modules&quot;: false }]],   &quot;plugins&quot;: [     &quot;transform-object-rest-spread&quot...",
    "coverImage": null,
    "createTime": "2018-06-09T03:44:02.000Z",
    "updateTime": "2019-06-10T10:21:54.000Z",
    "wordCount": 131
  },
  {
    "id": 685628,
    "space": "easywebpack",
    "slug": "vue-single",
    "url": "/easywebpack/vue-single",
    "title": "单页面举例",
    "summary": "easywebpack-vue 构建单页面应用Vue + Vuex + Vue-Router 基本实现router/index.js 实现// router/index.js import Vue from &#x27;vue&#x27;; import VueRouter from &#x27;vue-router&#x27;; import ListView from &#x27;./list&#x27;; import DetailView from &#x27;./detail&#x2...",
    "coverImage": null,
    "createTime": "2018-06-09T03:47:42.000Z",
    "updateTime": "2018-06-09T03:47:42.000Z",
    "wordCount": 787
  },
  {
    "id": 685629,
    "space": "easywebpack",
    "slug": "mgzlq5",
    "url": "/easywebpack/mgzlq5",
    "title": "多页面举例",
    "summary": "基于 easywebpack-cli 模式构建Vue前端渲染项目一. 全局安装 easywebpack-cli 插件npm i easywebpack-cli  -g 安装成功以后, 就可以在命令行中使用 easy 或 easywebpack 命令, 比如 easy build, easy server, easy print 等二. 添加 webpack.config.js 配置在项目根目录添加 webpack.config.js 文件, 添加如下配置const path = require(&#x2...",
    "coverImage": null,
    "createTime": "2018-06-09T03:48:47.000Z",
    "updateTime": "2018-06-09T03:48:47.000Z",
    "wordCount": 330
  },
  {
    "id": 685630,
    "space": "easywebpack",
    "slug": "react",
    "url": "/easywebpack/react",
    "title": "React 项目构建",
    "summary": "Webpack  原始配置编写// webpack.config.js const easywebpack = require(&#x27;easywebpack-react&#x27;); const webpack = easywebpack.webpack; const merge = easywebpack.merge; const env = process.env.BUILD_ENV; const baseWebpackConfig = easywebpack.getWebpackConfig...",
    "coverImage": null,
    "createTime": "2018-06-09T03:53:32.000Z",
    "updateTime": "2019-10-12T06:39:55.000Z",
    "wordCount": 482
  },
  {
    "id": 685636,
    "space": "easywebpack",
    "slug": "in6n2r",
    "url": "/easywebpack/in6n2r",
    "title": "JS 文件打包",
    "summary": "我们经常会遇到单独对 JS 打包的场景，比如 es6 写的 npm 包需要构建成 es5 模式.  easywebpack 也提供了对应的解决方案： easywebpack-js基于 easywebpack-js 构建配置编写// build/index.js const easywebpack = require(&#x27;easywebpack-js&#x27;); const config = {   env: process.env.BUILD_ENV,   entry: {     &#x2...",
    "coverImage": null,
    "createTime": "2018-06-09T07:20:07.000Z",
    "updateTime": "2019-07-08T11:11:44.000Z",
    "wordCount": 293
  },
  {
    "id": 685637,
    "space": "easywebpack",
    "slug": "html",
    "url": "/easywebpack/html",
    "title": "静态页面构建",
    "summary": "nunjucks 模板构建为纯静态页面项目基于 easywebpack-cli 方式构建在用 HTML 模板构建时, 有一个不好的地方就是不能以组件的方式复用, 如是考虑通过渲染模版编译成HTML静态模版. 目前常见的模板引擎有 nunjucks 等渲染模板, 而且社区也有对应的 Webpack loader 支持. 同时 easywebpack-html 也内置支持了, 我们执行只需要打开开关即可.在项目根目录添加 webpack.config.js 文件中启动 nunjucks loader...",
    "coverImage": null,
    "createTime": "2018-09-05T08:06:01.000Z",
    "updateTime": "2019-07-22T08:46:10.000Z",
    "wordCount": 510
  },
  {
    "id": 777021,
    "space": "easywebpack",
    "slug": "rpd7gu",
    "url": "/easywebpack/rpd7gu",
    "title": "构建速度",
    "summary": "检测构建速度最新的 easywebpack-cli@4.0.0 可以通过 easy build --speed  检测 Webpack 各 loader 和 plugin 处理耗时。DLL 公共提取Webpack 通过 DLLPlugin 和 DLLReferencePlugin 可以实现公共类库的单独提取，能极大大提升了构建的速度.只需要在 webpack.config.js 文件添加 dll 节点配置即可完成 dll 整个流程。module.exports = {   dll:[&#x27;vue...",
    "coverImage": null,
    "createTime": "2018-10-11T07:10:15.000Z",
    "updateTime": "2019-06-12T10:46:20.000Z",
    "wordCount": 386
  },
  {
    "id": 777022,
    "space": "easywebpack",
    "slug": "pdwchd",
    "url": "/easywebpack/pdwchd",
    "title": "构建大小",
    "summary": "easywebpack-cli 构建大小分析在项目开发时， 当页面构建的文件太大, 我们可以直接通过 cli 提供功能进行构建大小分析通过 -s 参数启动构建大小分析工具, 支持 analyzer(webpack-bundle-analyzer) 和 stats(stats-webpack-plugin) , 默认用 analyzer 插件。如果运行时, 提示安装缺少插件，请先安装依赖开发模式分析easy build -s  测试模式分析, 移除开发辅助代码easy build test -s...",
    "coverImage": null,
    "createTime": "2018-10-09T07:28:13.000Z",
    "updateTime": "2019-05-20T08:43:51.000Z",
    "wordCount": 1395
  },
  {
    "id": 813892,
    "space": "easywebpack",
    "slug": "upgrade",
    "url": "/easywebpack/upgrade",
    "title": "升级指南",
    "summary": "Webpack 3 到 Webpack 4 经过重大更新，对应 easwebpack3 到 easywebpack4 也有相对性的更新，主要包括以下3点：Webpack 版本升级导致的配置优化和优化修改easywebpack 新特性支持和配置简化easywebpack 遗留问题修复以及去掉历史兼容 ...",
    "coverImage": null,
    "createTime": "2018-11-05T12:25:35.000Z",
    "updateTime": "2019-07-04T02:40:59.000Z",
    "wordCount": 1112
  },
  {
    "id": 814079,
    "space": "easywebpack",
    "slug": "v4",
    "url": "/easywebpack/v4",
    "title": "easywebpack4",
    "summary": "方案说明Webpack4插件版本easywebpack: ^4.x.xeasywebpack-cli: ^4.x.xeasywebpack-vue: ^4.x.xeasywebpack-react: ^4.x.xeasywebpack-html: ^4.x.xeasywebpack-js: ^...",
    "coverImage": null,
    "createTime": "2019-10-13T12:51:00.000Z",
    "updateTime": "2019-10-13T12:51:00.000Z",
    "wordCount": 1248
  },
  {
    "id": 814080,
    "space": "easywebpack",
    "slug": "v3",
    "url": "/easywebpack/v3",
    "title": "easywebpack3",
    "summary": "版本说明Webpack3插件说明easywebpack: ^3.x.xeasywebpack-cli: ^3.x.xeasywebpack-vue: ^3.x.xeasywebpack-react: ^3.x.xeasywebpack-html: ^3.x.xeasywebpack-js: ^3.x.xegg-webpack: ^3.x.xwebpack-tool: ^3.x.xwebpack-manifest-resource-plugin: ^2.x.x 发布历史https://github.com...",
    "coverImage": null,
    "createTime": "2018-09-05T03:59:12.000Z",
    "updateTime": "2019-07-04T09:12:43.000Z",
    "wordCount": 68
  },
  {
    "id": 814227,
    "space": "easywebpack",
    "slug": "cssmodule",
    "url": "/easywebpack/cssmodule",
    "title": "Css Module",
    "summary": "easywepack4easywebpack4 默认提供 /\\.module\\.(css|less|scss|stylus)/  的文件规范的 CSS Module 特性，把 css module 的样式文件改成 /\\.module\\.(css|less|scss|stylus)/  规范，这...",
    "coverImage": null,
    "createTime": "2019-06-28T15:47:31.000Z",
    "updateTime": "2019-06-28T15:47:31.000Z",
    "wordCount": 155
  },
  {
    "id": 880179,
    "space": "easywebpack",
    "slug": "ayrtv3",
    "url": "/easywebpack/ayrtv3",
    "title": "构建模式",
    "summary": "easywebpack-cli 支持两种开发构建模式： easywebpack 增强模式 和 原生 webpack 模式， 同时在最新相关解决方案中，该文件非必须，也就是可以零配置。easywebpack 增强模式（默认）easywebpack 增强模式时，  webpack.config.j...",
    "coverImage": null,
    "createTime": "2018-11-27T08:33:37.000Z",
    "updateTime": "2019-06-12T09:32:52.000Z",
    "wordCount": 308
  },
  {
    "id": 895433,
    "space": "easywebpack",
    "slug": "wb66pe",
    "url": "/easywebpack/wb66pe",
    "title": "静态资源",
    "summary": "import 方式引入在组件中直接 import js 和 css 公共文件, 这种引入会进行 Webpack 编译，比如压缩import  &#x27;asset/css/global.css&#x27; import  &#x27;asset/js/common.js&#x27; 文件拷贝模式借助 copy-webpack-plugin  进行文件拷贝，copy 插件已在 easywebpack@4.8.5 内置支持，然后页面通过 link  标签引入。注意拷贝的文件不会压缩和hash...",
    "coverImage": null,
    "createTime": "2018-10-16T10:32:42.000Z",
    "updateTime": "2019-06-12T09:53:29.000Z",
    "wordCount": 290
  },
  {
    "id": 940880,
    "space": "easywebpack",
    "slug": "babel",
    "url": "/easywebpack/babel",
    "title": "Babel 配置",
    "summary": "Babel 版本说明easywebpack 体系目前内置 Babel 为 6 ，因涉及底层改动以及兼容等问题，为了保证现有已经运行项目的稳定性，暂还没有从框架层进行内置修改，目前提供两种方式进行升级 Babel 7。方式一：使用 @easy-team 插件依赖为了更方便升级 Babel7, 同...",
    "coverImage": null,
    "createTime": "2019-10-05T02:48:17.000Z",
    "updateTime": "2019-10-05T02:48:17.000Z",
    "wordCount": 739
  },
  {
    "id": 940934,
    "space": "easywebpack",
    "slug": "babel7",
    "url": "/easywebpack/babel7",
    "title": "Babel 升级",
    "summary": "easywebpack 体系目前内置 Babel 为 6 ，因涉及底层改动以及兼容性等问题，为了保证现有已经运行项目的稳定性，暂还没有从框架层进行内置修改，目前提供两种方式进行升级 Babel 7。方式一：基于 easy-team 插件模式 Babel 快速升级方案为了更方便升级 Babel7...",
    "coverImage": null,
    "createTime": "2019-10-13T12:38:38.000Z",
    "updateTime": "2019-10-13T12:38:38.000Z",
    "wordCount": 752
  },
  {
    "id": 951530,
    "space": "easywebpack",
    "slug": "open",
    "url": "/easywebpack/open",
    "title": "社区作品",
    "summary": "Egg + Vue 作品/egg-vue/open",
    "coverImage": null,
    "createTime": "2018-11-07T09:06:04.000Z",
    "updateTime": "2019-05-27T21:29:14.000Z",
    "wordCount": 14
  },
  {
    "id": 971920,
    "space": "easywebpack",
    "slug": "ed847g",
    "url": "/easywebpack/ed847g",
    "title": "devServer",
    "summary": "开发服务    easywebpack 整个体系提供的开发构建服务是基于 koa 实现的，用于支持各种类型项目(服务端渲染，前端渲染，静态页面，本地内存编译等)，实现了 内存编译，热更新，发布编译，代理，historyApiFallback等功能，其中代理和historyApiFallback...",
    "coverImage": null,
    "createTime": "2019-06-28T15:20:28.000Z",
    "updateTime": "2019-06-28T15:20:28.000Z",
    "wordCount": 290
  },
  {
    "id": 1251324,
    "space": "easywebpack",
    "slug": "hot",
    "url": "/easywebpack/hot",
    "title": "热更新",
    "summary": "easywebpack 是通过 koa-webpack-hot-middleware 和 koa-webpack-dev-middleware 插件实现热更新机制。具体实现封装成独立 webpack-tool 插件，该插件除了集成在 easywebpack 里面，同时也可以单独使用。下面详细说...",
    "coverImage": null,
    "createTime": "2019-06-28T15:10:30.000Z",
    "updateTime": "2019-06-28T15:10:30.000Z",
    "wordCount": 512
  },
  {
    "id": 1291391,
    "space": "easywebpack",
    "slug": "postcss",
    "url": "/easywebpack/postcss",
    "title": "PostCss",
    "summary": "默认配置// postcss.config.js module.exports = {   plugins: [     require('autoprefixer')({ overrideBrowserslist: ['iOS &gt;= 7', 'Android &gt;= 4.0'] }...",
    "coverImage": null,
    "createTime": "2019-08-02T05:35:21.000Z",
    "updateTime": "2019-08-02T05:35:22.000Z",
    "wordCount": 112
  },
  {
    "id": 1343171,
    "space": "easywebpack",
    "slug": "optimizaiton",
    "url": "/easywebpack/optimizaiton",
    "title": "optimizaiton",
    "summary": "从 webpack 4 开始，会根据你选择的 mode 来执行不同的优化，你可以通过 optimizaiton  节点进行覆盖配置。在 easywebpack  体系中，会进行进步配置简化。easywebpack 默认配置请根据需要，覆盖默认配置runtimeChunk 默认文件名为 runt...",
    "coverImage": null,
    "createTime": "2019-03-13T01:51:39.000Z",
    "updateTime": "2019-10-10T10:57:52.000Z",
    "wordCount": 289
  },
  {
    "id": 1407451,
    "space": "easywebpack",
    "slug": "v5",
    "url": "/easywebpack/v5",
    "title": "easywebpack5",
    "summary": "方案说明Webpack5适配工作webpack 4  -&gt; webpack 5 插件列表升级 webpack 为 5升级相关依赖插件为最新版本 webpack-tool easywebpack easywebpack-cli easywebpack-vue easywebpack-rea...",
    "coverImage": null,
    "createTime": "2019-06-24T06:26:30.000Z",
    "updateTime": "2019-06-24T06:26:30.000Z",
    "wordCount": 168
  },
  {
    "id": 2264395,
    "space": "easywebpack",
    "slug": "css",
    "url": "/easywebpack/css",
    "title": "Css Style",
    "summary": "开启 Sass （默认禁用）webpack.config.js// ${app_root}/webpack.config.js module.exports = {   module:{      rules:[        {          scss: true        }   ...",
    "coverImage": null,
    "createTime": "2019-10-15T01:24:03.000Z",
    "updateTime": "2019-10-15T01:24:03.000Z",
    "wordCount": 135
  },
  {
    "id": 2773678,
    "space": "easywebpack",
    "slug": "vue_project",
    "url": "/easywebpack/vue_project",
    "title": "Vue 工程方案",
    "summary": "安装 easywebpack-cli 工具npm install easywebpack-cli -g添加 ${app_root}/.babelrc 文件具体根据实际情况添加相关 babel 插件配置，以下仅仅是举例. 详细配置见：https://www.yuque.com/easy-team...",
    "coverImage": null,
    "createTime": "2019-10-05T03:26:29.000Z",
    "updateTime": "2019-10-05T03:26:30.000Z",
    "wordCount": 812
  },
  {
    "id": 2773690,
    "space": "easywebpack",
    "slug": "react_project",
    "url": "/easywebpack/react_project",
    "title": "React 工程方案",
    "summary": "安装 easywebpack-cli 工具npm install easywebpack-cli -g添加 ${app_root}/.babelrc 文件具体根据实际情况添加相关 babel 插件配置，以下仅仅是举例. 详细配置见：https://www.yuque.com/easy-team...",
    "coverImage": null,
    "createTime": "2019-10-05T03:32:18.000Z",
    "updateTime": "2019-10-05T03:32:18.000Z",
    "wordCount": 1031
  },
  {
    "id": 2773704,
    "space": "easywebpack",
    "slug": "html_project",
    "url": "/easywebpack/html_project",
    "title": "HTML 工程方案",
    "summary": "easywebpack-html  纯静态页面构建解决方案支持纯静态页面构建支持 nunjucks 模版方式构建如何利用 easywebpack-cli工具快速获得一个骨架项目使用easy-cli你将得到一个具备以下能力的骨架项目:基于Nunjucks模版引擎的模版项目。Why? 借助模版引擎...",
    "coverImage": null,
    "createTime": "2019-10-05T03:36:41.000Z",
    "updateTime": "2019-10-05T03:36:44.000Z",
    "wordCount": 623
  },
  {
    "id": 2773715,
    "space": "easywebpack",
    "slug": "js_project",
    "url": "/easywebpack/js_project",
    "title": "JS 打包工程方案",
    "summary": "我们经常会遇到单独对 JS 打包的场景，比如 es6 写的 npm 包需要构建成 es5 模式.  easywebpack 也提供了对应的解决方案： easywebpack-js基于 easywebpack-js 构建配置编写// build/index.js const easywebpac...",
    "coverImage": null,
    "createTime": "2019-10-05T03:37:08.000Z",
    "updateTime": "2019-10-05T03:37:09.000Z",
    "wordCount": 242
  },
  {
    "id": 2773718,
    "space": "easywebpack",
    "slug": "weex_project",
    "url": "/easywebpack/weex_project",
    "title": "Weex 工程方案",
    "summary": "easywebpack-weex 基于 easywebpack 的 Weex Native 和 Weex Web 打包构建解决方案.安装$ npm i easywebpack-weex --save-dev使用const weex = require('easywebpack-weex'); ...",
    "coverImage": null,
    "createTime": "2019-10-05T03:37:43.000Z",
    "updateTime": "2019-10-05T03:37:45.000Z",
    "wordCount": 174
  }
]