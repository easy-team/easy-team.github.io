[
  {
    "id": 946940,
    "space": "egg-vue",
    "slug": "learn",
    "url": "/egg-vue/learn",
    "title": "工程介绍",
    "keywords": "Egg Vue SSR如何实现, Egg Vue SSR介绍",
    "description": "最简单的 Egg Vue SSR 工程化方案,Egg Vue 工程解决方案特性支持Node 端基于 Egg 开发，遵循 Egg 开发规范和 Egg 生态，支持 Egg 所有特性，比如插件机制，多进程机制。使用 TypeScript 或 JavaScript 编写前端和Node端代码，支持 ts-node 无编译 和 Webpack 编译",
    "summary": "Egg Vue 工程解决方案特性支持Node 端基于 Egg 开发，遵循 Egg 开发规范和 Egg 生态，支持 Egg 所有特性，比如插件机制，多进程机制。使用 TypeScript 或 JavaScript 编写前端和Node端代码，支持 ts-node 无编译 和 Webpack 编译开...",
    "coverImage": null,
    "createTime": "2019-11-30T06:48:54.000Z",
    "updateTime": "2019-11-30T06:48:54.000Z",
    "wordCount": 2152
  },
  {
    "title": "开发指南",
    "expand": true,
    "children":[
      {
        "id": 685667,
        "space": "egg-vue",
        "slug": "init",
        "url": "/egg-vue/init",
        "title": "快速开始",
        "keywords": "Vue 服务器端渲染指南,Vue Server-Side Rendering Guide,Egg Vue SSR开发指南, Egg Vue SSR 入门指引",
        "description": "Vue 服务端渲染从入门到精通, 快速掌握 Egg Vue SSR 开发",
        "summary": "基于 Egg + Vue + Webpack 服务端渲染开发指南1. 项目初始化1.1 easywebpack-cli 脚手架初始化项目安装脚手架 npm install easywebpack-cli -g 命令行，然后就可以使用 easywebpack 或 easy 命令命令行运行 eas...",
        "coverImage": null,
        "createTime": "2019-03-01T08:48:05.000Z",
        "updateTime": "2019-10-18T02:12:11.000Z",
        "wordCount": 2712
      },
      {
        "id": 685668,
        "space": "egg-vue",
        "slug": "start",
        "url": "/egg-vue/start",
        "title": "从零开始",
        "keywords": "从零开始 Vue 服务器渲染, Vue SSR 实现",
        "description": "从零开始 Vue 服务器渲染,最简单的Vue SSR方案",
        "summary": "从零开始搭建 Egg + Vue + Webpack 服务端渲染项目1. 初始化环境安装 Node LST (8.x.x) 环境： https://nodejs.org/zh-cn2. 初始化 egg 项目https://github.com/eggjs/egg-init/blob/maste...",
        "coverImage": null,
        "createTime": "2019-07-12T15:44:47.000Z",
        "updateTime": "2019-08-06T07:56:28.000Z",
        "wordCount": 1752
      }
    ]
  },
  {
    "title": "渲染模式",
    "expand": true,
    "children":[
      {
        "id": 810030,
        "space": "egg-vue",
        "slug": "node",
        "url": "/egg-vue/node",
        "title": "服务端渲染模式",
        "keywords": "vue-server-renderer实现SSR,Vue renderToString,Vue createBundleRenderer,Egg Vue SSR, egg Vue isomorphism render, Egg Vue服务端渲染,Vue服务端渲染,Egg Vue同构渲染,Egg Vue单页面服务端渲染,Egg Vue Render,egg-view-Vue,egg-view-Vue-ssr",
        "description": "通过 Egg 插件 egg-view-Vue-ssr 实现 egg Vue ssr 服务端渲染实现, 支持 Vue-Router Redux 单页面服务端渲染模式",
        "summary": "Egg + Vue 服务端 Node 渲染模式目前 egg-view-vue-ssr 支持 服务端渲染模式 和 前端渲染模式 两种渲染模式这里服务端渲染指的是编写的 Vue 组件在 Node 服务端直接编译成完整的HTML, 然后直接输出给浏览器。MVVM 服务端渲染相比前端渲染，支持SEO，...",
        "coverImage": null,
        "createTime": "2019-07-27T05:49:44.000Z",
        "updateTime": "2019-08-19T14:06:57.000Z",
        "wordCount": 816
      },
      {
        "id": 809509,
        "space": "egg-vue",
        "slug": "web",
        "url": "/egg-vue/web",
        "title": "前端渲染模式",
        "keywords": "Vue Client-Side vs Server-Side, Egg Vue CSR,Egg Vue前端渲染,Vue前端渲染,Egg Vue Render,egg-view-Vue,egg-view-Vue-ssr",
        "description": "通过 Egg 插件 egg-view-Vue-ssr 实现 egg Vue 前端渲染实现",
        "summary": "浏览器渲染模式指的是Node 端只会根据包含html, head, body节点信息的 layout 文件输出骨架内容， 页面的实际内容交给浏览器去渲染。调用 egg-view-vue-ssr 的 renderClient 方法实现客户端浏览器渲染在使用上面, 客户端浏览器渲染模式只需要把 render 改成 renderClient。 正常情况下, 能进行 render 运行的, renderClient  方式也能正常运行。Webpack 配置优化，提高构建速度在 ${root}/webpack...",
        "coverImage": null,
        "createTime": "2018-09-06T07:09:43.000Z",
        "updateTime": "2019-07-24T10:05:33.000Z",
        "wordCount": 646
      },
      {
        "id": 2787947,
        "space": "egg-vue",
        "slug": "html",
        "url": "/egg-vue/html",
        "title": "HTML前端渲染",
        "keywords": "Egg Vue Nunjucks 前端渲染,egg-view-Vue,egg-view-Vue-ssr,egg-view-nunjucks,egg-view-ejs,egg Vue nunjucks render, ",
        "description": "通过 Egg 插件 egg-view-Vue-ssr 和 egg-view-nunjucks 实现 egg Vue 前端渲染实现",
        "summary": "背景在 前端渲染模式 和 asset 渲染模式 章节讲到了基于 Vue 的前端渲染模式，但都依赖  egg-view-Vue-ssr 插件，那如何基于已有 egg 模板引擎 (egg-view-nunjucks 或 egg-view-ejs) + Webpack 完全自定义前端方案呢？...",
        "coverImage": null,
        "createTime": "2019-10-08T07:10:41.000Z",
        "updateTime": "2019-10-08T07:10:42.000Z",
        "wordCount": 652
      },
      {
        "id": 1050061,
        "space": "egg-vue",
        "slug": "asset",
        "url": "/egg-vue/asset",
        "title": "asset 渲染模式",
        "keywords": "Egg Vue前端渲染, Egg Vue Nunjucks 前端渲染,egg-view-Vue,egg-view-Vue-ssr,egg-view-nunjucks,egg-view-ejs,egg Vue nunjucks render, ",
        "description": "通过 Egg 插件 egg-view-Vue-ssr 和 egg-view-nunjucks 实现 egg Vue 前端渲染实现",
        "summary": "背景在 前端渲染模式 章节讲到了基于 Vue 的一体化的前端渲染模式，好处是不需要借助第三方模板引擎且无需关注静态资源注入问题，但有两个小的功能限制：layout 模板数据绑定能力较弱资源注入不能自己定义，比如 async， crossorigin 等配置针对上面问题 egg-view-vue...",
        "coverImage": null,
        "createTime": "2019-07-26T12:18:09.000Z",
        "updateTime": "2019-07-26T12:18:09.000Z",
        "wordCount": 737
      },
      {
        "id": 2787931,
        "space": "egg-vue",
        "slug": "fls9r6",
        "url": "/egg-vue/fls9r6",
        "title": "自定义前端渲染",
        "summary": "背景在 前端渲染模式 和 asset 渲染模式 章节讲到了基于 Vue 的前端渲染模式，但都依赖  egg-view-Vue-ssr 插件，那如何基于已有 egg 模板引擎 (egg-view-nunjucks 或 egg-view-ejs) + Webpack 完全自定义前端方案呢？...",
        "coverImage": null,
        "createTime": "2019-10-08T07:06:39.000Z",
        "updateTime": "2019-10-08T07:06:39.000Z",
        "wordCount": 652
      }
    ]
  },
  {
    "id": 685673,
    "space": "egg-vue",
    "slug": "online",
    "url": "/egg-vue/online",
    "title": "部署流程",
    "keywords": "egg webpack Vue 项目部署,easywebpack-Vue,easywebpack,easywebpack-cli",
    "description": "通过 easywebpack-Vue 编写 webpack Vue 配置, 通过 easywebpack-cli 构建打包部署",
    "summary": "项目开发在 egg-vue-webpack-boilerplate 骨架项目中, 提供了一些demo, 如果要进行新项目开发，可以删除部分文件：app/web/page 是页面目录。下面的每个目录都是一个单独的页面，其中 app 目录是一个单页面服务端渲染例子，其他是简单的 Vue 服务端渲染...",
    "coverImage": null,
    "createTime": "2019-08-25T03:49:02.000Z",
    "updateTime": "2019-09-03T06:17:39.000Z",
    "wordCount": 1198
  },
  {
    "id": 880830,
    "space": "egg-vue",
    "slug": "config",
    "url": "/egg-vue/config",
    "title": "配置说明",
    "keywords": "egg webpack-hot-middleware, egg webpack-dev-middleware,egg webpack,egg-webpack,egg webpack Vue 配置,easywebpack-Vue,easywebpack",
    "description": "egg webpack配置详细流程, 通过 Egg 插件 egg-webpack 实现 webpack 开发构建，通过 easywebpack-Vue 编写 webpack Vue 配置",
    "summary": "webpack.config.js easywebpack@4.8.0 开始支持，因为有了默认配置，所以最新的骨架项目中，webpack.config.js 文件为非必须配置。使用 node-glob 遍历文件。下面配置会自动遍历 app/web/page  目录的所有 .vue 文件作为 en...",
    "coverImage": null,
    "createTime": "2019-02-11T02:55:39.000Z",
    "updateTime": "2019-06-21T09:19:15.000Z",
    "wordCount": 264
  },
  {
    "title": "特性支持",
    "expand": false,
    "children":[
      {
        "id": 1231914,
        "space": "egg-vue",
        "slug": "qpeiow",
        "url": "/egg-vue/qpeiow",
        "title": "入口实现",
        "summary": "服务端渲染模式需要对同一份 vue 文件构建出两份 JSBundle 文件出来，一份给 Node 渲染使用，一份给浏览器渲染使用，但 Node 和浏览器文件初始化代码是不一样的，这就需要我们针对入口代码进行分别实现。这里提供三种实现方案，请根据项目需要选择合适的方案。方案一： 完全自定义入口代...",
        "coverImage": null,
        "createTime": "2019-03-01T08:51:38.000Z",
        "updateTime": "2019-05-20T00:21:38.000Z",
        "wordCount": 1245
      },
      {
        "id": 3315280,
        "space": "egg-vue",
        "slug": "data",
        "url": "/egg-vue/data",
        "title": "数据请求",
        "keywords": "Egg Vue SSR asyncData 实现, vue ssr prefetch, vue ssr vuex asynData实现",
        "summary": "Egg Vue SSR asyncData 实现，这里提供一种 asyncData 获取数据的方式解决单页面 SSR 刷新不走 SSR 问题。 Node 不直接获取数据，获取数据的代码直接写到前端代码里面",
        "coverImage": null,
        "createTime": "2019-11-25T14:45:20.000Z",
        "updateTime": "2019-11-25T14:45:21.000Z",
        "wordCount": 1965
      },
      {
        "id": 685674,
        "space": "egg-vue",
        "slug": "async",
        "url": "/egg-vue/async",
        "title": "异步加载",
        "keywords": "Egg Vue SSR Async Component Load,Vue SSR 组件异步加载",
        "description": "Component Async Load Render / 组件异步加载渲染1. JavaScript File Code Spliting 代码分离Webpack打包是把所有js代码打成一个js文件，我们可以通过 CommonsChunkPlugin 分离出公共组件，但这远远不够。 实际业务...",
        "summary": "Component Async Load Render / 组件异步加载渲染1. JavaScript File Code Spliting 代码分离Webpack打包是把所有js代码打成一个js文件，我们可以通过 CommonsChunkPlugin 分离出公共组件，但这远远不够。 实际业务...",
        "coverImage": null,
        "createTime": "2019-02-15T06:05:32.000Z",
        "updateTime": "2019-05-23T01:14:39.000Z",
        "wordCount": 685
      },
      {
        "id": 685675,
        "space": "egg-vue",
        "slug": "seo",
        "url": "/egg-vue/seo",
        "title": "SEO实现",
        "keywords": "egg Vue ssr seo,Vue 服务端渲染 SEO 实现,Vue SEO 实现,Vue 同构 SEO 实现",
        "description": "Egg + Vue SSR SEO 实现MVVM 服务端渲染相比前端渲染，支持 SEO，更快的首屏渲染，相比传统的模板引擎，更好的组件化，前后端模板共用。在 Egg + Vue 的方案里面, HTML head 里面 meta 信息也作为 Vue 服务端渲染的一部分",
        "summary": "Egg + Vue SSR SEO 实现MVVM 服务端渲染相比前端渲染，支持SEO，更快的首屏渲染，相比传统的模板引擎，更好的组件化，前后端模板共用。在 Egg + Vue 的方案里面, HTML head 里面 meta 信息也作为 Vue 服务端渲染的一部分, 和普通的数据绑定没有什么差别。在实现上面, 考虑到页面有统一的 HTML, header, footer, body 骨架, 可以结合 Vue 的 slot 封装成一个统一的 layout 组件。一. layout...",
        "coverImage": null,
        "createTime": "2018-06-09T05:30:35.000Z",
        "updateTime": "2019-05-29T09:25:28.000Z",
        "wordCount": 878
      },
      {
        "id": 3618042,
        "space": "egg-vue",
        "slug": "inline",
        "url": "/egg-vue/inline",
        "title": "资源内敛",
        "keywords": "vue 静态资源内敛css, vue 静态资源内敛内敛js,vue ssr 内敛js/css, raw-loader",
        "summary": "在日常业务开发过程中，我们可能需要内联文本，JS，CSS到页面，这时我们可以 raw-loader webpack loader 实现。",
        "coverImage": null,
        "createTime": "2019-12-15T12:46:38.000Z",
        "updateTime": "2019-12-15T12:58:58.000Z",
        "wordCount": 60
      },
      {
        "id": 685676,
        "space": "egg-vue",
        "slug": "typescript",
        "url": "/egg-vue/typescript",
        "title": "TypeScript",
        "keywords": "Egg Vue TypeScript SSR,Egg Vue TypeScript 实现, Egg TypeScript, Vue TypeScript",
        "description": "Egg 前后端通过TypeScript实现 Vue SSR(Server Side Render) 服务端渲染",
        "summary": "TypeScript 构建支持Node 启用 typescript 编译 egg-bin dev -r egg-ts-helper/register 实现开发 tsc -p tsconfig.json 编译package.json 运行脚本{   &quot;scripts&quot;: { ...",
        "coverImage": null,
        "createTime": "2018-11-15T08:23:50.000Z",
        "updateTime": "2019-06-20T01:50:20.000Z",
        "wordCount": 188
      },
      {
        "id": 685678,
        "space": "egg-vue",
        "slug": "pwa",
        "url": "/egg-vue/pwa",
        "title": "Service Worker",
        "summary": "Egg + Vue/Vue SSR 使用 service workereasywebpack 默认生成的 service-worker.js 是在 ${app_root}/public/service-worker.js这里. 这样 service-worker.js 访问路径是 http://127.0.0.1:7001/public/service-worker.js。将 service worker 文件注册为 /public/service-worker.js，那么，service...",
        "coverImage": null,
        "createTime": "2018-06-09T05:32:42.000Z",
        "updateTime": "2019-06-17T11:09:32.000Z",
        "wordCount": 354
      },
      {
        "id": 814255,
        "space": "egg-vue",
        "slug": "i18n",
        "url": "/egg-vue/i18n",
        "title": "i18n 国际化支持",
        "keywords": "Egg Vue i18n国际化,egg-i18n,vue-i18n",
        "description": "Egg Vue SSR 服务端渲染 国际化 i18n 实现",
        "summary": "在 Egg Vue SSR 方案中，可以使用 vue-i18n 实现国际化支持， 使用前请先阅读以下文档：http://kazupon.github.io/vue-i18n/guide/started.html#htmlhttp://kazupon.github.io/vue-i18n/guide/started.html#javascriptEgg + Vue 实现国际化安装依赖npm install vue-i18n --save 编写 cn 和 en 语言文件中文配置：egg-vue...",
        "coverImage": null,
        "createTime": "2018-10-11T07:14:13.000Z",
        "updateTime": "2019-05-29T08:25:12.000Z",
        "wordCount": 438
      },
      {
        "id": 814292,
        "space": "egg-vue",
        "slug": "babel",
        "url": "/egg-vue/babel",
        "title": "Babel 构建优化",
        "keywords": "Egg Vue SSR Babel 配置, Vue webpack babel 配置",
        "description": "Vue ssr 构建需要两份 webpack 配置, babel 需要分别配置, Node 编译成 es6, 浏览器编译成 es5",
        "summary": "在进行 Egg + Vue 进行 SSR 模式开发时，运行 npm run dev  后你会看到如下界面， 启动了两个 Webpack 构建实例：Node 模式 和 Web 模式。SSR 运行需要 Webapck 单独构建 target: node   和 target: web  主要的差异...",
        "coverImage": null,
        "createTime": "2019-01-11T09:42:54.000Z",
        "updateTime": "2019-06-12T20:09:04.000Z",
        "wordCount": 727
      }
    ]
  },
  
  {
    "id": 685679,
    "space": "egg-vue",
    "slug": "version",
    "url": "/egg-vue/version",
    "title": "插件使用",
    "keywords": "egg webpack-hot-middleware, egg webpack-dev-middleware,egg-webpack,egg-webpack-vue, egg webpack server, webpack-dev-server",
    "description": "",
    "summary": "插件流程/egg-vue/build插件介绍egg-webpack 用于在 egg 项目中启动 Webpack 编译服务，具体流程请见 构建流程 。 该插件只在本地启用。 该插件除了深度结合 easywebpack 体系使用， 也可...",
    "coverImage": null,
    "createTime": "2019-02-15T03:30:02.000Z",
    "updateTime": "2019-06-15T15:47:15.000Z",
    "wordCount": 766
  },
  {
    "id": 685681,
    "space": "egg-vue",
    "slug": "about",
    "url": "/egg-vue/about",
    "title": "相关问题",
    "summary": "常见问题 issue 汇总服务端 SEO 设置问题 文件打包部署问题Server Side Render 时，$mount节点重新渲染问题see issue：https://github.com/easy-team/egg-vue-webpack-boilerplate/issues/125a...",
    "coverImage": null,
    "createTime": "2019-07-27T06:07:04.000Z",
    "updateTime": "2019-10-10T10:42:49.000Z",
    "wordCount": 349
  },
  {
    "id": 946940,
    "space": "egg-vue",
    "slug": "case",
    "url": "/egg-vue/case",
    "title": "项目一览",
    "keywords": "Egg Vue SSR Example,Egg Vue SSR案例",
    "description": "Egg Vue SSR 线上案例, Vue 服务端渲染例子",
    "summary": "Egg + Vue 服务端渲染项目地址：https://github.com/easy-team/egg-vue-webpack-boilerplateEgg + Vue 前端渲染项目地址：https://github.com/easy-team/egg-vue-webpack-boilerplat...",
    "coverImage": null,
    "createTime": "2018-11-07T08:54:31.000Z",
    "updateTime": "2019-08-07T06:38:21.000Z",
    "wordCount": 105
  },
  {
    "id": 951475,
    "space": "egg-vue",
    "slug": "case",
    "url": "/egg-vue/case",
    "title": "社区作品",
    "keywords": "Egg Vue SSR Example,Egg Vue SSR案例",
    "description": "Egg Vue SSR 线上案例, Vue 服务端渲染例子",
    "summary": "Egg Vue Examples",
    "coverImage": null,
    "createTime": "2019-07-27T05:47:25.000Z",
    "updateTime": "2019-07-27T05:47:25.000Z",
    "wordCount": 29
  }
]