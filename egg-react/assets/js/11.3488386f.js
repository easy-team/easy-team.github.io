(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{304:function(t,a,s){"use strict";s.r(a);var e=s(46),n=Object(e.a)({},function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"服务端渲染模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#服务端渲染模式","aria-hidden":"true"}},[t._v("#")]),t._v(" 服务端渲染模式")]),t._v(" "),s("p",[t._v("目前 "),s("a",{attrs:{href:"https://github.com/easy-team/egg-view-react-ssr",target:"_blank"}},[t._v("egg-view-react-ssr")]),t._v(" 支持 "),s("strong",[t._v("服务端渲染模式")]),t._v(" 和 "),s("strong",[t._v("前端渲染模式")]),t._v(" 两种渲染模式")]),t._v(" "),s("h3",{attrs:{id:"egg-react-服务端-node-渲染模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#egg-react-服务端-node-渲染模式","aria-hidden":"true"}},[t._v("#")]),t._v(" Egg + React 服务端 Node 渲染模式")]),t._v(" "),s("p",{staticStyle:{"padding-left":"2em"}},[t._v("这里服务端渲染指的是编写的 React 组件在 Node 服务端直接编译成完整的HTML, 然后直接输出给浏览器。MVVM 服务端渲染相比前端渲染，支持SEO，更快的首屏渲染，相比传统的模板引擎，更好的组件化，前后端模板共用。 同时 MVVM 数据驱动方式有着更快的开发效率。总体来说，MVVM 框架的服务端渲染技术比较适合有一定交互性，且对SEO，首屏速度有要求的业务应用。当然, 如果想用于不属于该类型的项目(比如各种后台管理系统)也是可以的, 就当纯粹的玩一玩 React SSR 开发。")]),t._v(" "),s("h4",{attrs:{id:"调用-egg-view-react-ssr-的-render-方法实现服务端渲染"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#调用-egg-view-react-ssr-的-render-方法实现服务端渲染","aria-hidden":"true"}},[t._v("#")]),t._v(" 调用 egg-view-react-ssr 的 render 方法实现服务端渲染")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("controller 调用 "),s("code",[t._v("render")]),t._v(" 方法")])])]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// controller/home.js")]),t._v("\nmodule"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("exports")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" app "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HomeController")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("app"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Controller")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("index")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n     "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" ctx "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n     "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" ctx"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("render")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'home/home.js'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Model"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getPage")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n")])])]),s("ul",[s("li",[s("p",[s("code",[t._v("home/home.js")]),t._v(" 是由 Webpack("),s("code",[t._v("target:node")]),t._v(") 把 React 变成 Node 服务端运行的运行文件, 默认在 "),s("code",[t._v("${app_root}/app/view")]),t._v(" 目录下。")])])]),s("ul",[s("li",[s("p",[s("code",[t._v("Model.getPage(1, 10)")]),t._v(" 表示在 Node 服务端获取到的业务数据，传给 React 组件在 Node 端进行模板编译为 HTML")])])]),s("ul",[s("li",[s("p",[t._v("Node 编译 HTML之后会根据 "),s("code",[t._v("config/manifest.json")]),t._v(" 文件把 css, js 资源依赖注入到 HTML")])])]),s("ul",[s("li",[s("p",[t._v("当服务队渲染失败时, "),s("code",[t._v("egg-view-react-ssr")]),t._v(" 默认开启进行客户端渲染模式。当线上流量过大时, 可以根据一定策略一部分用户服务端渲染, 一部分用户前端渲染, 减少服务端压力。")])])]),s("ul",[s("li",[s("p",[t._v("本地开发默认禁用缓存, 线上运行模式默认开启缓存。")])])]),s("ul",[s("li",[s("p",[t._v("如果是 SPA SSR 应用, 一般是在 React 里面提供组件的 fetch 方法由 Node 进行 fetch 数据调用, 然后把数据放入 store, 而不是在 Node 端进行获取, 具体见"),s("a",{attrs:{href:"https://github.com/easy-team/egg-react-webpack-boilerplate/",target:"_blank"}},[t._v("egg-react-webpack-boilerplate")]),t._v(" SPA-SSR 功能实现")])])])])},[],!1,null,null,null);a.default=n.exports}}]);