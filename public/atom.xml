<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>easyjs</title>
  
  <subtitle>An easy suite of JavaScript framework and library designed for working with Egg,Vue,React,Webpack,Flutter</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://easyjs.cn/"/>
  <updated>2020-05-31T09:43:53.000Z</updated>
  <id>https://easyjs.cn/</id>
  
  <author>
    <name>sky</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>页面资源加载</title>
    <link href="https://easyjs.cn/blog/az519d/"/>
    <id>https://easyjs.cn/blog/az519d/</id>
    <published>2020-05-31T09:43:53.000Z</published>
    <updated>2020-05-31T09:43:53.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="首屏测试"><a href="#首屏测试" class="headerlink" title="首屏测试"></a>首屏测试</h2><pre class=" language-bash"><code class="language-bash">window.addEventListener<span class="token punctuation">(</span><span class="token string">'DOMContentLoaded'</span>, <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        const t <span class="token operator">=</span> window.performance.timing<span class="token punctuation">;</span>        console.log<span class="token punctuation">(</span><span class="token string">'first pain time[painTime-navigationStart]:'</span>,         window.painTime - t.navigationStart<span class="token punctuation">)</span><span class="token punctuation">;</span>        console.log<span class="token punctuation">(</span><span class="token string">'first pain time[domContentLoadedEventStart-navigationStart]:'</span>,         t.domContentLoadedEventStart - t.navigationStart<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>, false<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>经过测试:</p><ul><li><p>link css 会阻塞页面渲染，只有等 css 加载完成以后，页面才会继续渲染</p></li><li><p>src image 图片不会阻塞页面渲染，但是会占用处理线程，当pengding的请求多于最多处理线程时，会影响后面的请求，比如ajax请求，动态发起script请求。图片本身不影响首屏时间和可交换时间。</p></li><li><p>js 优先级的比图片高， head里面的css优先级比body的script优先级高</p></li><li><p>遇到 js 会阻塞页面渲染，只有等 js 加载完成以后，页面才会继续渲染，影响首屏时间。</p></li><li><p>从chrome network看，js 和 image 线程同时执行总共最多 6 个，如果同时有 6 js 个阻塞，后面的 js 请求也会阻塞(pending)。</p></li><li><p>从chrome network看，当 image 阻塞超过 6 个时， image 后面的js 很大可能会被阻塞加载。</p></li><li><p>DOMContentLoaded事件本身不会等待CSS文件、图片、iframe加载完成。</p></li><li><p>当页面中没有script标签，DOMContentLoaded事件不会等待css、image加载完成。</p></li></ul><p><a href="https://developers.google.com/web/tools/chrome-devtools/network-performance/resource-loading?utm_source=dcc&utm_medium=redirect&utm_campaign=2016q3#resource-network-timing" target="_blank" rel="noopener">https://developers.google.com/web/tools/chrome-devtools/network-performance/resource-loading?utm_source=dcc&amp;utm_medium=redirect&amp;utm_campaign=2016q3#resource-network-timing</a></p><p><a href="https://developers.google.cn/web/tools/chrome-devtools/network-performance/understanding-resource-timing?hl=zh-cn" target="_blank" rel="noopener">https://developers.google.cn/web/tools/chrome-devtools/network-performance/understanding-resource-timing?hl=zh-cn</a></p><p><img src="https://cdn.yuque.com/yuque/0/2018/png/116733/1531219107852-65469425-6abb-49c6-bc69-a01cedb88bd5.png#width=776" alt=""></p><p>总共两个域名，delay.png 是单独的一个域名，js 是应用本身的域名。Chrome每个域原始规则的最多六个TCP连接，但这里有两个域名，所以可以同时触发多于6个请求。<br /><img src="https://cdn.yuque.com/yuque/0/2018/png/116733/1531219123819-0c2dedcb-e044-4852-95ca-43220b51f2c2.png#width=821" alt=""><br />queueing:从添加到待处理队列到实际开始处理的时间间隔.</p><p>上面大红色框的请求是一起发送的，但是由于浏览器http线程池内可用线程数量有限，但这些先排队等着<br />之前的http请求使用完成，有空线程了再按队列中的顺序发送请求。如果按照Time排序，就很清晰的看到队列处理的层次结构：<br /><img src="https://cdn.yuque.com/yuque/0/2018/png/116733/1531219142941-caadd916-db43-4c68-ab31-ea8b1058aa3f.png#width=736" alt=""><br />Stalled：浏览器得到要发出这个请求的指令，到请求可以发出的等待时间，一般是代理协商、以及等待可复用的TCP连接释放的时间，不包括DNS查询、建立TCP连接等时间等。此外，这段时间将包括浏览器何时等待已建立的连接可用于重用，并遵循Chrome每个域原始规则的最多六个TCP连接。</p><p>Request sent 请求第一个字节发出前到最后一个字节发出后的时间，也就是上传时间<br />Waiting 请求发出后，到收到响应的第一个字节所花费的时间(Time To First Byte)<br />Content Download 收到响应的第一个字节，到接受完最后一个字节的时间，就是下载时间<br /><img src="https://cdn.yuque.com/yuque/0/2018/png/116733/1531219163951-49c01481-ba69-4bbb-981c-b67d1aba15dd.png#width=827" alt=""></p><ul><li><p>Queued at 209.48ms: 页面访问后，经过 209.48ms后加入请求队列</p></li><li><p>Started at 210.44ms: 页面访问后，经过 210.44ms后开始进行网络请求</p></li><li><p>Queueing 0.96ms: 在队列中存放了0.96ms，这个值刚好是 210.44ms - 209.48ms = 0.96ms</p></li></ul><p>chrome://net-internals/#events</p><p><a href="http://www.jianshu.com/p/504bde348956" target="_blank" rel="noopener">http://www.jianshu.com/p/504bde348956</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;首屏测试&quot;&gt;&lt;a href=&quot;#首屏测试&quot; class=&quot;headerlink&quot; title=&quot;首屏测试&quot;&gt;&lt;/a&gt;首屏测试&lt;/h2&gt;&lt;pre class=&quot; language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;window.ad
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Egg + Web 自定义前端渲染</title>
    <link href="https://easyjs.cn/blog/cdal6o/"/>
    <id>https://easyjs.cn/blog/cdal6o/</id>
    <published>2020-05-31T09:43:53.000Z</published>
    <updated>2020-05-31T09:43:53.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在 <a href="/egg-react/web">前端渲染模式</a> 和 <a href="/egg-react/web">asset 渲染模式</a> 章节讲到了基于 React 的前端渲染模式，但都依赖  <a href="https://github.com/easy-team/egg-view-react-ssr" target="_blank" rel="noopener">egg-view-react-ssr</a> 插件，那如何基于已有 egg 模板引擎 (<a href="https://github.com/eggjs/egg-view-nunjucks" target="_blank" rel="noopener">egg-view-nunjucks</a> 或 <a href="https://github.com/eggjs/egg-view-ejs" target="_blank" rel="noopener">egg-view-ejs</a>) + Webpack 完全自定义前端方案呢？</p><h2 id="关键问题"><a href="#关键问题" class="headerlink" title="关键问题"></a>关键问题</h2><ul><li>本地开发 Webpack 与 Egg 集成，可以直接使用 <a href="/blog/wumyiw">egg-webpack</a>， 该插件可以独立使用, 当然你可以实现。</li><li>通过 <a href="https://github.com/eggjs/egg-view-nunjucks" target="_blank" rel="noopener">egg-view-nunjucks</a> 或 <a href="https://github.com/eggjs/egg-view-ejs" target="_blank" rel="noopener">egg-view-ejs</a> 插件进行数据绑定</li><li>通过 <code>html-webpack-plugin</code>  插件生成 HTML 文件，并自动注入 JS/CSS 依赖</li><li>本地开发时，需要通过 <code>write-file-webpack-plugin</code>  插件把 Webpack HTML 文件写到本地。Webpack 默认是在内存里面，无法直接读取。</li></ul><h2 id="如何实现"><a href="#如何实现" class="headerlink" title="如何实现"></a>如何实现</h2><blockquote><p>这里以 <a href="https://github.com/eggjs/egg-view-nunjucks" target="_blank" rel="noopener">egg-view-nunjucks</a> 为例，其它模板引擎类似。</p></blockquote><ul><li>安装 <a href="https://github.com/eggjs/egg-view-nunjucks" target="_blank" rel="noopener">egg-view-nunjucks</a> 插件依赖</li></ul><p><code>npm install egg-view-nunjucks --save</code> <br /><code>npm install egg-webpack --save-dev</code></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ${root}/package.json</span><span class="token punctuation">{</span>   <span class="token string">"dependencies"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>     <span class="token string">"egg-webpack"</span><span class="token punctuation">:</span> <span class="token string">"^4.0.0"</span><span class="token punctuation">,</span>     <span class="token string">"egg-view-nunjucks"</span><span class="token punctuation">:</span> <span class="token string">"^2.2.0"</span><span class="token punctuation">,</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>开启 <a href="https://github.com/eggjs/egg-view-nunjucks" target="_blank" rel="noopener">egg-view-nunjucks</a> 插件配置<br /></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ${root}/config/plugin.local.js</span>exports<span class="token punctuation">.</span>nunjucks <span class="token operator">=</span> <span class="token punctuation">{</span>  enable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token keyword">package</span><span class="token punctuation">:</span> <span class="token string">'egg-webpack'</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ${root}/config/plugin.js</span>exports<span class="token punctuation">.</span>nunjucks <span class="token operator">=</span> <span class="token punctuation">{</span>  enable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token keyword">package</span><span class="token punctuation">:</span> <span class="token string">'egg-view-nunjucks'</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><ul><li>配置 layout.tpl  模板<br /></li></ul><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>en<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>{{title}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>keywords<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>description<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>content-type<span class="token punctuation">'</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>text/html;charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>viewport<span class="token punctuation">'</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>initial-scale<span class="token punctuation">=</span>1, maximum-scale<span class="token punctuation">=</span>1, user-scalable<span class="token punctuation">=</span>no, minimal-ui<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>shortcut icon<span class="token punctuation">'</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>/favicon.ico<span class="token punctuation">'</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>image/x-icon<span class="token punctuation">'</span></span> <span class="token punctuation">/></span></span>  <span class="token comment" spellcheck="true">&lt;!-- html-webpack-plugin 自动注入 css --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>app<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    window<span class="token punctuation">.</span>__INITIAL_STATE__ <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- html-webpack-plugin 自动注入 js --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><ul><li>配置默认渲染引擎</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ${root}/config/local.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> app <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> exports <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  exports<span class="token punctuation">.</span>webpack <span class="token operator">=</span> <span class="token punctuation">{</span>    webpackConfigList<span class="token punctuation">:</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'easywebpack-react'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getWebpackConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> exports<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// ${root}/config/default.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> app <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> exports <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  exports<span class="token punctuation">.</span>view <span class="token operator">=</span> <span class="token punctuation">{</span>    defaultViewEngine<span class="token punctuation">:</span> <span class="token string">'nunjucks'</span><span class="token punctuation">,</span>    mapping<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token string">'.tpl'</span><span class="token punctuation">:</span> <span class="token string">'nunjucks'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> exports<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>render默认调用，使用 nunjucks 模板引擎<br /></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> egg <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'egg'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">AppController</span> <span class="token keyword">extends</span> <span class="token class-name">egg<span class="token punctuation">.</span>Controller</span> <span class="token punctuation">{</span>  <span class="token keyword">async</span> <span class="token function">home</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">await</span> ctx<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'layout.tpl'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> title<span class="token punctuation">:</span> <span class="token string">'自定义渲染'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>webpack.config.js 配置 <blockquote><p>该配置基于 easywebpack 配置，如果要用原生 webpack 请参考：<a href="/blog/wumyiw">/blog/wumyiw</a></p></blockquote></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> WriteFilePlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'write-file-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  egg<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  target<span class="token punctuation">:</span> <span class="token string">'web'</span><span class="token punctuation">,</span>  entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>    app<span class="token punctuation">:</span> <span class="token string">'app/web/page/app/app.js'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      filename<span class="token punctuation">:</span> <span class="token string">'../app/view/layout.tpl'</span><span class="token punctuation">,</span>      template<span class="token punctuation">:</span> <span class="token string">'./app/web/view/layout.tpl'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">WriteFilePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      test<span class="token punctuation">:</span> <span class="token regex">/\.tpl$/</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="依赖插件"><a href="#依赖插件" class="headerlink" title="依赖插件"></a>依赖插件</h2><ul><li><a href="/blog/wumyiw">egg-webpack</a></li><li><a href="https://github.com/eggjs/egg-view-nunjucks" target="_blank" rel="noopener">egg-view-nunjucks</a> </li><li><a href="https://github.com/gajus/write-file-webpack-plugin" target="_blank" rel="noopener">write-file-webpack-plugin</a></li><li><a href="https://github.com/jantimon/html-webpack-plugin" target="_blank" rel="noopener">html-webpack-plugin</a></li></ul><h2 id="骨架项目"><a href="#骨架项目" class="headerlink" title="骨架项目"></a>骨架项目</h2><p><a href="https://github.com/easy-team/egg-react-webpack-boilerplate/tree/feature/green/html" target="_blank" rel="noopener">https://github.com/easy-team/egg-react-webpack-boilerplate/tree/feature/green/html</a></p>]]></content>
    
    <summary type="html">
    
      Egg React 前端渲染, Egg React Nunjucks 前端渲染, 静态页面渲染
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Egret  游戏开发</title>
    <link href="https://easyjs.cn/blog/egret/"/>
    <id>https://easyjs.cn/blog/egret/</id>
    <published>2020-05-31T09:43:53.000Z</published>
    <updated>2020-05-31T09:43:53.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h2><ul><li><p>egret build</p></li><li><p>egret run -a   自动编译，浏览器不能自动刷新</p></li></ul><h2 id="Stage"><a href="#Stage" class="headerlink" title="Stage"></a>Stage</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">public</span> <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">once</span><span class="token punctuation">(</span>egret<span class="token punctuation">.</span>Event<span class="token punctuation">.</span>ADDED_TO_STAGE<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>onAddToStage<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token function">onAddToStage</span><span class="token punctuation">(</span>event<span class="token punctuation">:</span>egret<span class="token punctuation">.</span>Event<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>stage<span class="token punctuation">.</span>frameRate <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><p>通过 addEventListener 注册监听事件，可以是系统和自定义事件， 通过 dispatchEventWith 和 dispatchEventWith 触发事件， 另外可以通过 removeEventListener 移除监听事件</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span>fireTimer<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>egret<span class="token punctuation">.</span>TimerEvent<span class="token punctuation">.</span>TIMER<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>createBullet<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">dispatchEventWith</span><span class="token punctuation">(</span><span class="token string">"createBullet"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>egret<span class="token punctuation">.</span>Event<span class="token punctuation">.</span>ENTER_FRAME<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>gameViewUpdate<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>常用系统事件</p><ul><li><p>egret.TouchEvent.TOUCH_MOVE</p></li><li><p>egret.TimerEvent.TIMER</p></li><li><p>egret.TouchEvent.TOUCH_MOVE</p></li></ul><h2 id="拖动"><a href="#拖动" class="headerlink" title="拖动"></a>拖动</h2><blockquote><p><a href="http://developer.egret.com/cn/example/egret2d/index.html#060-interact-drag-drop" target="_blank" rel="noopener">http://developer.egret.com/cn/example/egret2d/index.html#060-interact-drag-drop</a></p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 鼠标点击时，鼠标全局坐标与e的位置差</span><span class="token keyword">private</span> _distance<span class="token punctuation">:</span>egret<span class="token punctuation">.</span>Point <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">egret<span class="token punctuation">.</span>Point</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>e<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>egret<span class="token punctuation">.</span>TouchEvent<span class="token punctuation">.</span>TOUCH_BEGIN<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mouseDown<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>e<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>egret<span class="token punctuation">.</span>TouchEvent<span class="token punctuation">.</span>TOUCH_END<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mouseUp<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token function">mouseDown</span><span class="token punctuation">(</span>evt<span class="token punctuation">:</span>egret<span class="token punctuation">.</span>TouchEvent<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_touchStatus <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_distance<span class="token punctuation">.</span>x <span class="token operator">=</span> evt<span class="token punctuation">.</span>stageX <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>e<span class="token punctuation">.</span>x<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_distance<span class="token punctuation">.</span>y <span class="token operator">=</span> evt<span class="token punctuation">.</span>stageY <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>e<span class="token punctuation">.</span>y<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>stage<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>egret<span class="token punctuation">.</span>TouchEvent<span class="token punctuation">.</span>TOUCH_MOVE<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mouseMove<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token function">mouseMove</span><span class="token punctuation">(</span>evt<span class="token punctuation">:</span>egret<span class="token punctuation">.</span>TouchEvent<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_touchStatus <span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>e<span class="token punctuation">.</span>x <span class="token operator">=</span> evt<span class="token punctuation">.</span>stageX <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_distance<span class="token punctuation">.</span>x<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>e<span class="token punctuation">.</span>y <span class="token operator">=</span> evt<span class="token punctuation">.</span>stageY <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_distance<span class="token punctuation">.</span>y<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>egret.TouchEvent.TOUCH_BEGIN</li></ul><h2 id="锚点"><a href="#锚点" class="headerlink" title="锚点"></a>锚点</h2><blockquote><p>anchoroffsetX  和  anchoroffsetX 可以用来作为虚拟的中心点或者参考点</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span>fire<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>fire<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>fire<span class="token punctuation">.</span>scaleX <span class="token operator">=</span> <span class="token number">0.7</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>fire<span class="token punctuation">.</span>scaleY <span class="token operator">=</span> <span class="token number">0.7</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>fire<span class="token punctuation">.</span>anchorOffsetX <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fire<span class="token punctuation">.</span>width <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>fire<span class="token punctuation">.</span>anchorOffsetY <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fire<span class="token punctuation">.</span>height <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span></code></pre><h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><blockquote><p>监听 <code>ENTER_FRAME</code> 将会按照帧频进行回调</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span> egret<span class="token punctuation">.</span>Event<span class="token punctuation">.</span>ENTER_FRAME<span class="token punctuation">,</span> <span class="token punctuation">(</span> evt<span class="token punctuation">:</span>egret<span class="token punctuation">.</span>Event <span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  e<span class="token punctuation">.</span>rotation <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">this</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li><p>e.rotation<a href="http://developer.egret.com/cn/example/egret2d/index.html#010-disp-anchor-rota-scale" target="_blank" rel="noopener"> 旋转</a></p></li><li><p>e.scaleX (0-1) <a href="http://developer.egret.com/cn/example/egret2d/index.html#010-disp-anchor-rota-scale" target="_blank" rel="noopener">缩放 </a></p></li></ul><h2 id="富文本"><a href="#富文本" class="headerlink" title="富文本"></a>富文本</h2><blockquote><p><a href="http://developer.egret.com/cn/example/egret2d/index.html#110-text-text-flow-2" target="_blank" rel="noopener">http://developer.egret.com/cn/example/egret2d/index.html#110-text-text-flow-2</a></p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> html<span class="token punctuation">:</span>egret<span class="token punctuation">.</span>TextField <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">egret<span class="token punctuation">.</span>TextField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>html<span class="token punctuation">.</span>textFlow <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">egret<span class="token punctuation">.</span>HtmlTextParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parser</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="粒子-particle"><a href="#粒子-particle" class="headerlink" title="粒子 particle"></a>粒子 particle</h2><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span> <span class="token property">"modules"</span><span class="token operator">:</span><span class="token punctuation">[</span>  <span class="token punctuation">{</span>   <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"particle"</span><span class="token punctuation">,</span>   <span class="token property">"path"</span><span class="token operator">:</span> <span class="token string">"../particle/libsrc"</span>  <span class="token punctuation">}</span> <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><blockquote><p><a href="http://developer.egret.com/cn/github/egret-docs/extension/threes/instructions/index.html" target="_blank" rel="noopener">http://developer.egret.com/cn/github/egret-docs/extension/threes/instructions/index.html</a></p></blockquote><p>下载地址：<a href="https://github.com/egret-labs/egret-game-library/tree/master/particle" target="_blank" rel="noopener">https://github.com/egret-labs/egret-game-library/tree/master/particle</a><br />教程文档：<a href="http://developer.egret.com/cn/github/egret-docs/extension/particle/introduction/index.html" target="_blank" rel="noopener">http://developer.egret.com/cn/github/egret-docs/extension/particle/introduction/index.html</a></p><p>粒子编辑器： <a href="http://developer.egret.com/cn/github/egret-docs/tools/Feather/manual/index.html" target="_blank" rel="noopener">http://developer.egret.com/cn/github/egret-docs/tools/Feather/manual/index.html</a><br /><a href="https://www.yuque.com/attachments/yuque/0/2018/zip/116733/1543482819156-6fa0dc2b-73aa-40a3-bc3b-dad8c6542eff.zip?_lake_card=%7B%22src%22%3A%22https%3A%2F%2Fwww.yuque.com%2Fattachments%2Fyuque%2F0%2F2018%2Fzip%2F116733%2F1543482819156-6fa0dc2b-73aa-40a3-bc3b-dad8c6542eff.zip%22%2C%22name%22%3A%22silver.zip%22%2C%22size%22%3A3621%2C%22ext%22%3A%22zip%22%2C%22type%22%3A%22application%2Fzip%22%2C%22card%22%3A%22file%22%7D" target="_blank" rel="noopener">silver.zip</a><br /><img src="https://cdn.nlark.com/yuque/0/2018/png/116733/1543482690971-4bc964a4-b29c-4fd3-a6b4-93bbe379b839.png#width=827" alt=""></p><h2 id="资源加载"><a href="#资源加载" class="headerlink" title="资源加载"></a>资源加载</h2><blockquote><p><a href="http://edn.egret.com/cn/article/index/id/123" target="_blank" rel="noopener">http://edn.egret.com/cn/article/index/id/123</a></p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 同步加载资源，这种方式只能获取已经缓存过的资源，例如之前调用过loadGroup()被预加载的资源</span><span class="token comment" spellcheck="true">// 可以在 resource/default.res.json 配置</span><span class="token keyword">const</span> res <span class="token operator">=</span> RES<span class="token punctuation">.</span><span class="token function">getRes</span><span class="token punctuation">(</span><span class="token string">"red_icon_png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 异步获取资源，这种方式可以获取配置中含有的所有资源项。如果缓存中存在，</span><span class="token comment" spellcheck="true">// 直接调用回调函数返回，若不存在，就启动网络加载文件并解析后回调。</span><span class="token keyword">const</span> res <span class="token operator">=</span> RES<span class="token punctuation">.</span><span class="token function">getResAsync</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span>string<span class="token punctuation">,</span>compFunc<span class="token punctuation">:</span>Function<span class="token punctuation">,</span>thisObject<span class="token punctuation">:</span>any<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">void</span></code></pre><h2 id="纹理集"><a href="#纹理集" class="headerlink" title="纹理集"></a>纹理集</h2><ul><li>纹理集实际上就是将一些零碎的小图放到一张大图当中, 可以用 <a href="http://edn.egret.com/cn/index.php?g=portal&amp;m=article&amp;a=index&amp;id=238" target="_blank" rel="noopener">Texture Merger</a> 工具制作<a href="http://edn.egret.com/cn/article/index/id/135" target="_blank" rel="noopener">http://edn.egret.com/cn/article/index/id/135</a></li></ul><ul><li>可以通过 <code>markman</code>  软件获取已有纹理图元素坐标，用于编写 纹理图 json 文件,  需要先安装 AdobeAIR</li></ul><p><a href="https://www.yuque.com/attachments/yuque/0/2018/zip/116733/1544149398492-7070a934-fc8f-4a2c-989b-39b895996db7.zip?_lake_card=%7B%22src%22%3A%22https%3A%2F%2Fwww.yuque.com%2Fattachments%2Fyuque%2F0%2F2018%2Fzip%2F116733%2F1544149398492-7070a934-fc8f-4a2c-989b-39b895996db7.zip%22%2C%22name%22%3A%22MarkMan.air.zip%22%2C%22size%22%3A1644801%2C%22ext%22%3A%22zip%22%2C%22type%22%3A%22application%2Fzip%22%2C%22card%22%3A%22file%22%7D" target="_blank" rel="noopener">MarkMan.air.zip</a></p><h2 id="飞机大战"><a href="#飞机大战" class="headerlink" title="飞机大战"></a>飞机大战</h2><p><a href="https://www.yuque.com/attachments/yuque/0/2019/zip/116733/1546414664425-5010a57a-e7e2-4c7f-bac5-663daa4e4648.zip?_lake_card=%7B%22src%22%3A%22https%3A%2F%2Fwww.yuque.com%2Fattachments%2Fyuque%2F0%2F2019%2Fzip%2F116733%2F1546414664425-5010a57a-e7e2-4c7f-bac5-663daa4e4648.zip%22%2C%22name%22%3A%22egret-air-fight.zip%22%2C%22size%22%3A10981593%2C%22ext%22%3A%22zip%22%2C%22type%22%3A%22application%2Fzip%22%2C%22card%22%3A%22file%22%7D" target="_blank" rel="noopener">egret-air-fight.zip</a></p><h3 id="游戏逻辑"><a href="#游戏逻辑" class="headerlink" title="游戏逻辑"></a>游戏逻辑</h3><ol><li><p>创建默认背景图和启动按钮，同时创建可滚动背景图。飞机不动， 利用负坐标，背景向下移动，背景图循环滚动，循环利用</p></li><li><p>点击启动按钮启动游戏，开始创建飞机和发射子弹</p></li><li><p>监听 egret.Event.ENTER_FRAME 事件，更新飞机和子弹位置，通过不停的更改飞机和子弹的 y 坐标实现子弹发射效果， 通过 hitTestPoint 进行我的子弹与敌机， 敌机子弹与我的飞机进行碰撞检测，进行相应的扣血</p></li><li><p>创建我的飞机和发射子弹，监听创建子弹事件，监听我的飞机 egret.TouchEvent.TOUCH_MOVE 事件，同时调整飞机和子弹坐标</p></li><li><p>定时创建不同类型的敌机，同时开火，监听创建子弹事件</p></li><li><p>增加护卫机子弹发射，滚石场景，BOSS 场景，能量，爆炸，音乐等场景</p></li></ol><h3 id="开发技巧"><a href="#开发技巧" class="headerlink" title="开发技巧"></a>开发技巧</h3><ul><li><p>飞机不动， 背景向下移动，背景图循环滚动，循环利用 </p></li><li><p>通过 egret.TimerEvent.TIMER 事件执行重复操作，比如创建飞机，滚石，发射子弹等</p></li><li><p>敌机，子弹，滚石，道具都需要进行回收（超出屏幕）和重复利用，同时停止发射等事件</p></li><li><p>通过设置 子弹的 scaleX 和 scaleY 改变子弹的发射角度和方向， 可以使用坐标递增，递减或 egret.Tween.get 动画实现子弹发射效果</p></li><li><p>游戏结束，清理现场，包括 TIMER，ENTER_FRAME以及自定义事件</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;命令行&quot;&gt;&lt;a href=&quot;#命令行&quot; class=&quot;headerlink&quot; title=&quot;命令行&quot;&gt;&lt;/a&gt;命令行&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;egret build&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;egret run -a   自动编译，浏览器不能自动刷
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Webpack 构建流程解密</title>
    <link href="https://easyjs.cn/blog/ekvirc/"/>
    <id>https://easyjs.cn/blog/ekvirc/</id>
    <published>2020-05-31T09:43:53.000Z</published>
    <updated>2020-05-31T09:43:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>通过 Webpack 工具，可以很方便完成各种框架的构建打包支持。使用 Webpack 一段事件后，各种配置也都非常熟悉， 但只停留使用节点，对内部原理极致不是非常清新，常常带着这些疑问：</p><ul><li><p>Webpack 启动流程是怎么样的？</p></li><li><p>Webpack 插件是怎么使用的，怎么保证调用顺序？</p></li><li><p>Webpack 事件机制是怎么样的？</p></li></ul><p>接下来我将通过从 Webpack 启动流程， 事件机制， 插件机制， 热更新等几方面深入的讲述一下构建 Webpack 内部构建流程。</p><h2 id="启动流程"><a href="#启动流程" class="headerlink" title="启动流程"></a>启动流程</h2><p>首先我们来看看webpack的 <a href="https://github.com/webpack/webpack/tree/master/lib/webpack.js" target="_blank" rel="noopener">webpack.js</a>入口定义：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">webpack</span><span class="token punctuation">(</span>options<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token operator">...</span><span class="token operator">...</span>  <span class="token comment" spellcheck="true">// 初始化所有plugin, 包括自定义事件, 事件回调定义</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>plugins <span class="token operator">&amp;&amp;</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>plugins<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    compiler<span class="token punctuation">.</span>apply<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>compiler<span class="token punctuation">,</span> options<span class="token punctuation">.</span>plugins<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">var</span> compiler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Compiler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 这里比较关键，如果有提供回调函数，直接启动编译，这个是用于发布构建使用，</span>  <span class="token comment" spellcheck="true">// 构建文件落地磁盘，需要提供callback进入构建流程；当使用 webpack-dev-middlerware </span>  <span class="token comment" spellcheck="true">// 和 webpack-hot-middleware 时，不需要提供callback函数， 由 触发。</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 启动 webpack 编译</span>       compiler<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> compiler<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="https://cdn.yuque.com/yuque/0/2018/png/116733/1531218906866-6357a41d-3295-43ef-bdb7-9ea2a2b09e54.png#width=576" alt=""></p><p>以上图片来自<a href="https://fengmiaosen.github.io/2017/03/21/webpack-core-code/" target="_blank" rel="noopener">冯淼森的博客</a></p><h2 id="事件机制"><a href="#事件机制" class="headerlink" title="事件机制"></a>事件机制</h2><h3 id="关键事件"><a href="#关键事件" class="headerlink" title="关键事件"></a>关键事件</h3><h4 id="before-run"><a href="#before-run" class="headerlink" title="before-run"></a>before-run</h4><ul><li>NodeEnvironmentPlugin</li></ul><h4 id="run"><a href="#run" class="headerlink" title="run"></a>run</h4><ul><li>CachePlugin</li></ul><h4 id="watch-run"><a href="#watch-run" class="headerlink" title="watch-run"></a>watch-run</h4><ul><li>CachePlugin</li></ul><h4 id="before-compile"><a href="#before-compile" class="headerlink" title="before-compile"></a>before-compile</h4><h4 id="compile"><a href="#compile" class="headerlink" title="compile"></a>compile</h4><h4 id="entry-option"><a href="#entry-option" class="headerlink" title="entry-option"></a>entry-option</h4><ul><li>EntryOptionPlugin</li></ul><h4 id="make"><a href="#make" class="headerlink" title="make"></a>make</h4><ul><li>SingleEntryPlugin</li></ul><h4 id="after-compile"><a href="#after-compile" class="headerlink" title="after-compile"></a>after-compile</h4><ul><li>CachePlugin</li></ul><h4 id="after-emit"><a href="#after-emit" class="headerlink" title="after-emit"></a>after-emit</h4><ul><li>SizeLimitsPlugin</li></ul><h4 id="after-resolvers"><a href="#after-resolvers" class="headerlink" title="after-resolvers"></a>after-resolvers</h4><ul><li><p>AMDPlugin</p></li><li><p>NodeSourcePlugin</p></li></ul><h4 id="compilation"><a href="#compilation" class="headerlink" title="compilation"></a>compilation</h4><ul><li><p>FunctionModulePlugin</p></li><li><p>NodeSourcePlugin</p></li><li><p>LoaderTargetPlugin</p></li><li><p>EvalSourceMapDevToolPlugin</p></li><li><p>CompatibilityPlugin</p></li><li><p>HarmonyModulesPlugin</p></li><li><p>AMDPlugin</p></li><li><p>CommonJsPlugin</p></li><li><p>LoaderPlugin</p></li><li><p>NodeStuffPlugin</p></li><li><p>RequireJsStuffPlugin</p></li><li><p>APIPlugin</p></li><li><p>ConstPlugin</p></li><li><p>UseStrictPlugin</p></li><li><p>RequireIncludePlugin</p></li><li><p>RequireEnsurePlugin</p></li><li><p>RequireContextPlugin</p></li><li><p>ImportPlugin</p></li><li><p>SystemPlugin</p></li><li><p>EnsureChunkConditionsPlugin</p></li><li><p>RemoveParentModulesPlugin</p></li><li><p>RemoveEmptyChunksPlugin</p></li><li><p>MergeDuplicateChunksPlugin</p></li><li><p>FlagIncludedChunksPlugin</p></li><li><p>OccurrenceOrderPlugin</p></li><li><p>FlagDependencyExportsPlugin</p></li><li><p>FlagDependencyUsagePlugin</p></li><li><p>TemplatedPathPlugin</p></li><li><p>RecordIdsPlugin</p></li><li><p>WarnCaseSensitiveModulesPlugin</p></li></ul><h4 id="this-compilation"><a href="#this-compilation" class="headerlink" title="this-compilation"></a>this-compilation</h4><ul><li><p>CachePlugin</p></li><li><p>JsonpTemplatePlugin</p></li></ul><h4 id="done"><a href="#done" class="headerlink" title="done"></a>done</h4><p>上面是列举的几个重要的事件名，通过打日志发现，你还会发现还有很多自定义事件, 更多事件请参考官网<a href="https://webpack.js.org/api/compiler/" target="_blank" rel="noopener">Event Hooks</a>。你可以通过 compiler.plugin(‘事件名’, callback) 的方式监听这些事件，并提供回调函数。通过Webpack构建提供的生命周期事件，你可以控制 Webpack 编译流程的每个环节，从而实现对 Webpack 的自定义扩展功能。</p><h3 id="事件定义"><a href="#事件定义" class="headerlink" title="事件定义"></a>事件定义</h3><ul><li>全局事件容器定义</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// Tapable.prototype.plugin 定义事件， 一个事件可以多个回调函数</span>compiler<span class="token punctuation">.</span>plugin <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">plugin</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        name<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">plugin</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>_plugins<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_plugins<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>fn<span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token keyword">else</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_plugins<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>Webpack 启动入口组件初始化</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// node_modules/webpack/lib/webpack.js</span><span class="token keyword">function</span> <span class="token function">webpack</span><span class="token punctuation">(</span>options<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token operator">...</span><span class="token operator">...</span>  <span class="token comment" spellcheck="true">// 初始化所有plugin, 同时注册自定义事件和定义事件回调</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>plugins <span class="token operator">&amp;&amp;</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>plugins<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// apply 是每个plugin必须实现的方法</span>    compiler<span class="token punctuation">.</span>apply<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>compiler<span class="token punctuation">,</span> options<span class="token punctuation">.</span>plugins<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token operator">...</span><span class="token operator">...</span><span class="token punctuation">}</span></code></pre><ul><li>插件内部事件注册</li></ul><p>查阅代码 Webpack 插件代码你会发现， 很多插件会在 <code>apply</code> 里面监听关键事件，然后处理相关逻辑</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">apply</span><span class="token punctuation">(</span>compiler<span class="token punctuation">)</span> <span class="token punctuation">{</span>  compiler<span class="token punctuation">.</span><span class="token function">plugin</span><span class="token punctuation">(</span><span class="token string">"compilation"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>compilation<span class="token punctuation">,</span> params<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>   <span class="token operator">...</span><span class="token operator">...</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  compiler<span class="token punctuation">.</span><span class="token function">plugin</span><span class="token punctuation">(</span><span class="token string">"make"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>compilation<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>   <span class="token operator">...</span><span class="token operator">...</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="触发事件"><a href="#触发事件" class="headerlink" title="触发事件"></a>触发事件</h3><p>在 <code>node_modules/tapable/lib/Tapable.js</code> 文件中提供很多触发事件的方法(方法命名好多，1，2，3，4这种命名，怀疑是版本兼容时不停增加导致的)，下面介绍一下主要的两个。</p><ul><li>applyPlugins</li></ul><pre class=" language-javascript"><code class="language-javascript">compiler<span class="token punctuation">.</span><span class="token function">applyPlugins</span><span class="token punctuation">(</span><span class="token string">"compile"</span><span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>applyPluginsAsync</li></ul><pre class=" language-javascript"><code class="language-javascript">compiler<span class="token punctuation">.</span><span class="token function">applyPluginsAsync</span><span class="token punctuation">(</span><span class="token string">"before-compile"</span><span class="token punctuation">,</span> params<span class="token punctuation">,</span> err <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>applyPluginsAsyncSeries [ Compiler {<br />_plugins:<br />{ ‘before-run’: [Array],<br />‘this-compilation’: [Array],<br />compilation: [Array],<br />‘after-resolvers’: [Array],<br />‘entry-option’: [Array],<br />make: [Array],<br />‘after-emit’: [Array],<br />‘watch-run’: [Array],<br />run: [Array],<br />‘after-compile’: [Array] },</p><h2 id="代码执行流程"><a href="#代码执行流程" class="headerlink" title="代码执行流程"></a>代码执行流程</h2><h2 id="webpack-js"><a href="#webpack-js" class="headerlink" title="webpack.js"></a>webpack.js</h2><h4 id="WebpackOptionsDefaulter-初始化-webpack-默认配置"><a href="#WebpackOptionsDefaulter-初始化-webpack-默认配置" class="headerlink" title="WebpackOptionsDefaulter 初始化 webpack 默认配置"></a>WebpackOptionsDefaulter 初始化 webpack 默认配置</h4><h4 id="NodeEnvironmentPlugin-apply-before-run"><a href="#NodeEnvironmentPlugin-apply-before-run" class="headerlink" title="NodeEnvironmentPlugin.apply(before-run)"></a>NodeEnvironmentPlugin.apply(before-run)</h4><p>初始化 inputFileSystem/outputFileSystem/watchFileSystem</p><h4 id="compiler-applyPlugins-“environment”"><a href="#compiler-applyPlugins-“environment”" class="headerlink" title="compiler.applyPlugins(“environment”);"></a>compiler.applyPlugins(“environment”);</h4><h4 id="compiler-applyPlugins-“after-environment”"><a href="#compiler-applyPlugins-“after-environment”" class="headerlink" title="compiler.applyPlugins(“after-environment”);"></a>compiler.applyPlugins(“after-environment”);</h4><h4 id="WebpackOptionsApply"><a href="#WebpackOptionsApply" class="headerlink" title="WebpackOptionsApply"></a>WebpackOptionsApply</h4><p>根据 webpack 配置 target 初始化 对应 Webpack plugin,  同时初始化文件查找<br />ResolverFactory.createResolver</p><h5 id="web"><a href="#web" class="headerlink" title="web"></a>web</h5><pre class=" language-javascript"><code class="language-javascript">compiler<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>    <span class="token comment" spellcheck="true">// jsonp-script, require-ensure, bootstrap 脚本注入</span>    <span class="token keyword">new</span> <span class="token class-name">JsonpTemplatePlugin</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>output<span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// __webpack_require__ 定义</span>    <span class="token keyword">new</span> <span class="token class-name">FunctionModulePlugin</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>output<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">NodeSourcePlugin</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>node<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">LoaderTargetPlugin</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="node"><a href="#node" class="headerlink" title="node"></a>node</h5><pre class=" language-javascript"><code class="language-javascript">compiler<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>  <span class="token keyword">new</span> <span class="token class-name">NodeTemplatePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    asyncChunkLoading<span class="token punctuation">:</span> options<span class="token punctuation">.</span>target <span class="token operator">===</span> <span class="token string">"async-node"</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">new</span> <span class="token class-name">FunctionModulePlugin</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>output<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">new</span> <span class="token class-name">NodeTargetPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">new</span> <span class="token class-name">LoaderTargetPlugin</span><span class="token punctuation">(</span><span class="token string">"node"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-javascript"><code class="language-javascript">compiler<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">EntryOptionPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    compiler<span class="token punctuation">.</span><span class="token function">applyPluginsBailResult</span><span class="token punctuation">(</span><span class="token string">"entry-option"</span><span class="token punctuation">,</span> options<span class="token punctuation">.</span>context<span class="token punctuation">,</span> options<span class="token punctuation">.</span>entry<span class="token punctuation">)</span><span class="token punctuation">;</span>    compiler<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>      <span class="token keyword">new</span> <span class="token class-name">CompatibilityPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token keyword">new</span> <span class="token class-name">HarmonyModulesPlugin</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>module<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token keyword">new</span> <span class="token class-name">AMDPlugin</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>module<span class="token punctuation">,</span> options<span class="token punctuation">.</span>amd <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token keyword">new</span> <span class="token class-name">CommonJsPlugin</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>module<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token keyword">new</span> <span class="token class-name">LoaderPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token keyword">new</span> <span class="token class-name">NodeStuffPlugin</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>node<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token keyword">new</span> <span class="token class-name">RequireJsStuffPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token keyword">new</span> <span class="token class-name">APIPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token keyword">new</span> <span class="token class-name">ConstPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token keyword">new</span> <span class="token class-name">UseStrictPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token keyword">new</span> <span class="token class-name">RequireIncludePlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token keyword">new</span> <span class="token class-name">RequireEnsurePlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token keyword">new</span> <span class="token class-name">RequireContextPlugin</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>resolve<span class="token punctuation">.</span>modules<span class="token punctuation">,</span>             options<span class="token punctuation">.</span>resolve<span class="token punctuation">.</span>extensions<span class="token punctuation">,</span>             options<span class="token punctuation">.</span>resolve<span class="token punctuation">.</span>mainFiles<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token keyword">new</span> <span class="token class-name">ImportPlugin</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>module<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token keyword">new</span> <span class="token class-name">SystemPlugin</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>module<span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-javascript"><code class="language-javascript">compiler<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>      <span class="token keyword">new</span> <span class="token class-name">EnsureChunkConditionsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token keyword">new</span> <span class="token class-name">RemoveParentModulesPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token keyword">new</span> <span class="token class-name">RemoveEmptyChunksPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token keyword">new</span> <span class="token class-name">MergeDuplicateChunksPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token keyword">new</span> <span class="token class-name">FlagIncludedChunksPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token keyword">new</span> <span class="token class-name">OccurrenceOrderPlugin</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token keyword">new</span> <span class="token class-name">FlagDependencyExportsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token keyword">new</span> <span class="token class-name">FlagDependencyUsagePlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>performance<span class="token punctuation">)</span> <span class="token punctuation">{</span>      compiler<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SizeLimitsPlugin</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>performance<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    compiler<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TemplatedPathPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    compiler<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RecordIdsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    compiler<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WarnCaseSensitiveModulesPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>cache<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> CachePlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./CachePlugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      compiler<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CachePlugin</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>cache<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h4 id="compiler-run-callback-进入run流程"><a href="#compiler-run-callback-进入run流程" class="headerlink" title="compiler.run(callback) 进入run流程"></a>compiler.run(callback) 进入run流程</h4><h2 id="Compiler-extends-Tapable"><a href="#Compiler-extends-Tapable" class="headerlink" title="Compiler extends Tapable"></a>Compiler extends Tapable</h2><h4 id="compiler-run-callback-进入编译流程"><a href="#compiler-run-callback-进入编译流程" class="headerlink" title="compiler.run(callback) 进入编译流程"></a>compiler.run(callback) 进入编译流程</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token function">run</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> startTime <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> onCompiled <span class="token operator">=</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> compilation<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//console.log('---run:onCompiled');</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">applyPluginsBailResult</span><span class="token punctuation">(</span><span class="token string">"should-emit"</span><span class="token punctuation">,</span> compilation<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">applyPlugins</span><span class="token punctuation">(</span><span class="token string">"done"</span><span class="token punctuation">,</span> stats<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> stats<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">emitAssets</span><span class="token punctuation">(</span>compilation<span class="token punctuation">,</span> err <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>compilation<span class="token punctuation">.</span><span class="token function">applyPluginsBailResult</span><span class="token punctuation">(</span><span class="token string">"need-additional-pass"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">applyPlugins</span><span class="token punctuation">(</span><span class="token string">"done"</span><span class="token punctuation">,</span> stats<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">applyPluginsAsync</span><span class="token punctuation">(</span><span class="token string">"additional-pass"</span><span class="token punctuation">,</span> err <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>onCompiled<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">emitRecords</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">applyPlugins</span><span class="token punctuation">(</span><span class="token string">"done"</span><span class="token punctuation">,</span> stats<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> stats<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">applyPluginsAsync</span><span class="token punctuation">(</span><span class="token string">"before-run"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> err <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">applyPluginsAsync</span><span class="token punctuation">(</span><span class="token string">"run"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> err <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//console.log('---applyPluginsAsync:run');</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">readRecords</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>onCompiled<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h4 id="Webpack-Loader-处理初始化-NormalModuleFactory"><a href="#Webpack-Loader-处理初始化-NormalModuleFactory" class="headerlink" title="Webpack Loader 处理初始化 NormalModuleFactory"></a>Webpack Loader 处理初始化 NormalModuleFactory</h4><p><strong>NormalModuleFactory: /node_modules/webpack/lib/NormalModuleFactory.js</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">createNormalModuleFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">// /node_modules/webpack/lib/NormalModuleFactory.js</span>    <span class="token keyword">const</span> normalModuleFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NormalModuleFactory</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>context<span class="token punctuation">,</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>resolvers<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>module <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">applyPlugins</span><span class="token punctuation">(</span><span class="token string">"normal-module-factory"</span><span class="token punctuation">,</span> normalModuleFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> normalModuleFactory<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">createContextModuleFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> contextModuleFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ContextModuleFactory</span><span class="token punctuation">(</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>resolvers<span class="token punctuation">,</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>inputFileSystem    <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">applyPlugins</span><span class="token punctuation">(</span><span class="token string">"context-module-factory"</span><span class="token punctuation">,</span> contextModuleFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> contextModuleFactory<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">newCompilationParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> params <span class="token operator">=</span> <span class="token punctuation">{</span>            normalModuleFactory<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createNormalModuleFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            contextModuleFactory<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createContextModuleFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            compilationDependencies<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> params<span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><h4 id="compiler-compile-onCompiled-进入编译流程"><a href="#compiler-compile-onCompiled-进入编译流程" class="headerlink" title="compiler.compile(onCompiled) 进入编译流程"></a>compiler.compile(onCompiled) 进入编译流程</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token function">compile</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> params <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">newCompilationParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">applyPluginsAsync</span><span class="token punctuation">(</span><span class="token string">"before-compile"</span><span class="token punctuation">,</span> params<span class="token punctuation">,</span> err <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">applyPlugins</span><span class="token punctuation">(</span><span class="token string">"compile"</span><span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> compilation <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">newCompilation</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">applyPluginsParallel</span><span class="token punctuation">(</span><span class="token string">"make"</span><span class="token punctuation">,</span> compilation<span class="token punctuation">,</span> err <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>                compilation<span class="token punctuation">.</span><span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                compilation<span class="token punctuation">.</span><span class="token function">seal</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">applyPluginsAsync</span><span class="token punctuation">(</span><span class="token string">"after-compile"</span><span class="token punctuation">,</span> compilation<span class="token punctuation">,</span> err <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> compilation<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id=""><a href="#" class="headerlink" title=""></a></h4><h2 id="Entry"><a href="#Entry" class="headerlink" title="Entry"></a>Entry</h2><h4 id="entry-option-EntryOptionPlugin"><a href="#entry-option-EntryOptionPlugin" class="headerlink" title="entry-option:EntryOptionPlugin"></a>entry-option:EntryOptionPlugin</h4><h4 id="make-SingleEntryPlugin"><a href="#make-SingleEntryPlugin" class="headerlink" title="make:SingleEntryPlugin"></a>make:SingleEntryPlugin</h4><p>// Compilation: node_modules/webpack/lib/Compilation.js</p><pre><code>Compilation.addEntry(context, entry, name, callback)</code></pre><h2 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h2><h3 id="Webpack-js"><a href="#Webpack-js" class="headerlink" title="Webpack.js"></a>Webpack.js</h3><ul><li><p>function webpack(options)</p><ul><li><p>new WebpackOptionsDefaulter().process(options);</p></li><li><p>compiler.apply.apply(compiler, options.plugins);</p></li><li><p>new NodeEnvironmentPlugin().apply(compiler);</p></li><li><p>NodeEnvironmentPlugin.js: compiler.plugin(“before-run”)</p></li><li><p>compiler.applyPlugins(“environment”);</p></li><li><p>compiler.applyPlugins(“after-environment”);</p></li><li><p>compiler.options = new WebpackOptionsApply().process(options, compiler);</p></li><li><p>WebpackOptionsApply.js </p><ul><li><p>EntryOptionPlugin: “entry-option”</p></li><li><p>SingleEntryPlugin: “make” or MultiEntryPlugin: “make”</p></li><li><p>若干组件初始化</p></li><li><p>compiler.resolvers.context = ResolverFactory.createResolver(options.resolve)</p></li><li><p>compiler.resolvers.loader = ResolverFactory.createResolver(options.resolveLoader);</p></li></ul></li><li><p>compiler.run(callback)</p></li></ul></li></ul><h3 id="Compiler-js"><a href="#Compiler-js" class="headerlink" title="Compiler.js"></a>Compiler.js</h3><ul><li><p>compiler.run(callback)</p><ul><li><p>this.applyPluginsAsync(“before-run”)</p></li><li><p>this.applyPluginsAsync(“run”)</p></li></ul></li><li><p>this.compile(onCompiled);</p><ul><li><p>new NormalModuleFactory(this.options.context, this.resolvers, this.options.module || {})</p></li><li><p>this.applyPluginsAsync(“before-compile”)</p></li><li><p>this.applyPlugins(“compile”)</p></li><li><p>this.applyPluginsParallel(“make”)</p></li><li><p>this.applyPluginsAsync(“after-compile”)</p></li><li><p>callback(null, compilation)</p></li></ul></li></ul><h3 id="WebpackOptionsApply-js"><a href="#WebpackOptionsApply-js" class="headerlink" title="WebpackOptionsApply.js"></a>WebpackOptionsApply.js</h3><ul><li><p>new EntryOptionPlugin: ‘entry-option’</p></li><li><p>compiler.apply(‘entry-option’)</p></li><li><p>compiler.apply(new SingleEntryPlugin: “make” or MultiEntryPlugin: “make”);</p></li><li><p>SingleEntryPlugin</p><ul><li>compiler.plugin(“make”, (compilation, callback) =&gt; {});</li></ul></li><li><p>若干组件初始化</p></li><li><p>compiler.resolvers.context = ResolverFactory.createResolver(options.resolve)</p></li><li><p>compiler.resolvers.loader = ResolverFactory.createResolver(options.resolveLoader);</p></li></ul><h3 id="Compilation-js"><a href="#Compilation-js" class="headerlink" title="Compilation.js"></a>Compilation.js</h3><ul><li><p>addEntry</p></li><li><p>_addModuleChain</p></li><li><p>NormalModuleFactory.create</p></li><li><p>buildModule:build-module</p></li><li><p>NormalModule.js: build</p></li><li><p>loader-runner:runLoaders</p></li><li><p>NormalModule.js: parser.parse HarmonyImportDependency 文件依赖</p></li><li><p>processModuleDependencies( 递归解析文件和处理文件依赖 )</p></li></ul><h4 id="Dependencies"><a href="#Dependencies" class="headerlink" title="Dependencies"></a>Dependencies</h4><ul><li>factory: NullFactory &amp; NormalModuleFactory</li></ul><pre class=" language-json"><code class="language-json"><span class="token punctuation">[</span> HarmonyCompatibilityDependency <span class="token punctuation">{</span> module<span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">,</span> originModule<span class="token operator">:</span> <span class="token punctuation">[</span>Object<span class="token punctuation">]</span><span class="token punctuation">,</span> loc<span class="token operator">:</span> <span class="token punctuation">[</span>Object<span class="token punctuation">]</span> <span class="token punctuation">}</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span> HarmonyImportDependency <span class="token punctuation">{</span>      module<span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">,</span>      request<span class="token operator">:</span> 'vue'<span class="token punctuation">,</span>      userRequest<span class="token operator">:</span> 'vue'<span class="token punctuation">,</span>      range<span class="token operator">:</span> <span class="token punctuation">[</span>Array<span class="token punctuation">]</span><span class="token punctuation">,</span>      importedVar<span class="token operator">:</span> '__WEBPACK_IMPORTED_MODULE_0_vue__'<span class="token punctuation">,</span>      loc<span class="token operator">:</span> <span class="token punctuation">[</span>Object<span class="token punctuation">]</span> <span class="token punctuation">}</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span> HarmonyImportDependency <span class="token punctuation">{</span>      module<span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">,</span>      request<span class="token operator">:</span> './components/Hello.vue'<span class="token punctuation">,</span>      userRequest<span class="token operator">:</span> './components/Hello.vue'<span class="token punctuation">,</span>      range<span class="token operator">:</span> <span class="token punctuation">[</span>Array<span class="token punctuation">]</span><span class="token punctuation">,</span>      importedVar<span class="token operator">:</span> '__WEBPACK_IMPORTED_MODULE_1__components_Hello_vue__'<span class="token punctuation">,</span>      loc<span class="token operator">:</span> <span class="token punctuation">[</span>Object<span class="token punctuation">]</span> <span class="token punctuation">}</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span> HarmonyImportDependency <span class="token punctuation">{</span>      module<span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">,</span>      request<span class="token operator">:</span> './components/HelloDecorator.vue'<span class="token punctuation">,</span>      userRequest<span class="token operator">:</span> './components/HelloDecorator.vue'<span class="token punctuation">,</span>      range<span class="token operator">:</span> <span class="token punctuation">[</span>Array<span class="token punctuation">]</span><span class="token punctuation">,</span>      importedVar<span class="token operator">:</span> '__WEBPACK_IMPORTED_MODULE_2__components_HelloDecorator_vue__'<span class="token punctuation">,</span>      loc<span class="token operator">:</span> <span class="token punctuation">[</span>Object<span class="token punctuation">]</span> <span class="token punctuation">}</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span> HarmonyImportSpecifierDependency <span class="token punctuation">{</span>      module<span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">,</span>      importDependency<span class="token operator">:</span> <span class="token punctuation">[</span>Object<span class="token punctuation">]</span><span class="token punctuation">,</span>      importedVar<span class="token operator">:</span> '__WEBPACK_IMPORTED_MODULE_0_vue__'<span class="token punctuation">,</span>      id<span class="token operator">:</span> 'default'<span class="token punctuation">,</span>      name<span class="token operator">:</span> 'Vue'<span class="token punctuation">,</span>      range<span class="token operator">:</span> <span class="token punctuation">[</span>Array<span class="token punctuation">]</span><span class="token punctuation">,</span>      strictExportPresence<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      namespaceObjectAsContext<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      callArgs<span class="token operator">:</span> undefined<span class="token punctuation">,</span>      call<span class="token operator">:</span> undefined<span class="token punctuation">,</span>      directImport<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      shorthand<span class="token operator">:</span> undefined<span class="token punctuation">,</span>      loc<span class="token operator">:</span> <span class="token punctuation">[</span>Object<span class="token punctuation">]</span> <span class="token punctuation">}</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span> HarmonyImportSpecifierDependency <span class="token punctuation">{</span>      module<span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">,</span>      importDependency<span class="token operator">:</span> <span class="token punctuation">[</span>Object<span class="token punctuation">]</span><span class="token punctuation">,</span>      importedVar<span class="token operator">:</span> '__WEBPACK_IMPORTED_MODULE_1__components_Hello_vue__'<span class="token punctuation">,</span>      id<span class="token operator">:</span> 'default'<span class="token punctuation">,</span>      name<span class="token operator">:</span> 'HelloComponent'<span class="token punctuation">,</span>      range<span class="token operator">:</span> <span class="token punctuation">[</span>Array<span class="token punctuation">]</span><span class="token punctuation">,</span>      strictExportPresence<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      namespaceObjectAsContext<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      callArgs<span class="token operator">:</span> undefined<span class="token punctuation">,</span>      call<span class="token operator">:</span> undefined<span class="token punctuation">,</span>      directImport<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      shorthand<span class="token operator">:</span> undefined<span class="token punctuation">,</span>      loc<span class="token operator">:</span> <span class="token punctuation">[</span>Object<span class="token punctuation">]</span> <span class="token punctuation">}</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span> HarmonyImportSpecifierDependency <span class="token punctuation">{</span>      module<span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">,</span>      importDependency<span class="token operator">:</span> <span class="token punctuation">[</span>Object<span class="token punctuation">]</span><span class="token punctuation">,</span>      importedVar<span class="token operator">:</span> '__WEBPACK_IMPORTED_MODULE_2__components_HelloDecorator_vue__'<span class="token punctuation">,</span>      id<span class="token operator">:</span> 'default'<span class="token punctuation">,</span>      name<span class="token operator">:</span> 'HelloDecoratorComponent'<span class="token punctuation">,</span>      range<span class="token operator">:</span> <span class="token punctuation">[</span>Array<span class="token punctuation">]</span><span class="token punctuation">,</span>      strictExportPresence<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      namespaceObjectAsContext<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      callArgs<span class="token operator">:</span> undefined<span class="token punctuation">,</span>      call<span class="token operator">:</span> undefined<span class="token punctuation">,</span>      directImport<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      shorthand<span class="token operator">:</span> undefined<span class="token punctuation">,</span>      loc<span class="token operator">:</span> <span class="token punctuation">[</span>Object<span class="token punctuation">]</span> <span class="token punctuation">}</span> <span class="token punctuation">]</span> <span class="token punctuation">]</span></code></pre><h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><h4 id="NormalModuleFactory-js"><a href="#NormalModuleFactory-js" class="headerlink" title="NormalModuleFactory.js"></a>NormalModuleFactory.js</h4><ul><li><p>this.plugin(“factory”)</p></li><li><p>this.plugin(“resolver”)</p></li><li><p>create(data, callback)</p></li></ul><p>创建模块：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">NormalModule</span><span class="token punctuation">(</span> result<span class="token punctuation">.</span>request<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">///TypeScript-Vue-Starter/node_modules/_ts-loader@3.2.0</span> <span class="token comment" spellcheck="true">// @ts-loader/index.js??ref--1!/TypeScript-Vue-Starter/src/index.ts</span> result<span class="token punctuation">.</span>userRequest<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//'/TypeScript-Vue-Starter/src/index.ts',</span> result<span class="token punctuation">.</span>rawRequest<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//'./src/index.ts'</span> result<span class="token punctuation">.</span>loaders<span class="token punctuation">,</span> result<span class="token punctuation">.</span>resource<span class="token punctuation">,</span> result<span class="token punctuation">.</span>parser<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><a href="https://github.com/webpack/enhanced-resolve/tree/master/lib" target="_blank" rel="noopener">https://github.com/webpack/enhanced-resolve/tree/master/lib</a><br /><a href="https://doc.webpack-china.org/concepts/module-resolution/" target="_blank" rel="noopener">https://doc.webpack-china.org/concepts/module-resolution/</a></p><p>TypeScript-Vue-Starter/node_modules/enhanced-resolve/lib/ResolverFactory.js</p><p>TypeScript-Vue-Starter/node_modules/enhanced-resolve/lib/Resolver.js</p><p>TypeScript-Vue-Starter/node_modules/webpack/lib/NormalModuleFactory.js</p><h4 id="ResolverFactory"><a href="#ResolverFactory" class="headerlink" title="ResolverFactory"></a>ResolverFactory</h4><ul><li>TypeScript-Vue-Starter/node_modules/<a href="mailto:_enhanced-resolve@3.4.1">_enhanced-resolve@3.4.1</a>@enhanced-resolve/lib/ResolverFactory.js</li></ul><ul><li>TypeScript-Vue-Starter/node_modules/enhanced-resolve/lib/node.js</li></ul><ul><li>TypeScript-Vue-Starter/node_modules/webpack/lib/WebpackOptionsApply.js</li></ul><ul><li>TypeScript-Vue-Starter/node_modules/<a href="mailto:_webpack@3.10.0">_webpack@3.10.0</a>@webpack/lib/webpack.js</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">WebpackOptionsDefaulter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>compiler<span class="token punctuation">.</span>options <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebpackOptionsApply</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span>options<span class="token punctuation">,</span> compiler<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="插件初始化"><a href="#插件初始化" class="headerlink" title="插件初始化"></a>插件初始化</h3><p>class Compiler extends Tapable</p><ul><li><ol><li>执行plugin 的apply方法</li></ol></li></ul><pre class=" language-javascript"><code class="language-javascript">Tapable<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>apply <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arguments<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Tapable#apply'</span><span class="token punctuation">,</span> arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><ul><li><ol><li>注册事件回调函数</li></ol></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// name  hook 事件名称</span><span class="token comment" spellcheck="true">// fn: function (request, callback) {</span><span class="token comment" spellcheck="true">//    resolver.doResolve(target, obj, appending, callback);</span><span class="token comment" spellcheck="true">// }</span>Tapable<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>plugin <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">plugin</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        name<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">plugin</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 一个事件名可以注册多个回调函数</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>_plugins<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_plugins<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>fn<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_plugins<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h4 id="插件执行循序"><a href="#插件执行循序" class="headerlink" title="插件执行循序"></a>插件执行循序</h4><ul><li>SingleEntryPlugin</li></ul><ul><li><p><a href="https://github.com/webpack/webpack/tree/master/lib/webpack.js" target="_blank" rel="noopener">webpack.js</a></p></li><li><p><a href="https://github.com/webpack/webpack/tree/master/lib/Tabable.js" target="_blank" rel="noopener">Tabable.js</a></p></li><li><p><a href="https://github.com/webpack/webpack/tree/master/lib/Compiler.js" target="_blank" rel="noopener">Compiler.js</a></p></li><li><p><a href="https://github.com/webpack/webpack/tree/master/lib/node/NodeEnvironmentPlugin.js" target="_blank" rel="noopener">NodeEnvironmentPlugin.js</a></p></li></ul><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li><p><a href="https://fengmiaosen.github.io/2017/03/21/webpack-core-code/" target="_blank" rel="noopener">webpack之plugin内部运行机制</a></p></li><li><p><a href="https://www.jianshu.com/p/223bb6edc0eb" target="_blank" rel="noopener">Webpack Module Resolution</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;通过 Webpack 工具，可以很方便完成各种框架的构建打包支持。使用 Webpack 一段事件后，各种配置也都非常熟悉， 但只停留使用节点，对内部原理极致不是非常清新，常常带着这些疑问：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Webpack 启动流程是怎么样的？&lt;/p&gt;
&lt;/l
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Docker 随记</title>
    <link href="https://easyjs.cn/blog/gayu0o/"/>
    <id>https://easyjs.cn/blog/gayu0o/</id>
    <published>2020-05-31T09:43:53.000Z</published>
    <updated>2020-05-31T09:43:53.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker:"></a>安装docker:</h1><ul><li><p>Docker：<a href="https://download.docker.com/mac/stable/Docker.dmg" target="_blank" rel="noopener">https://download.docker.com/mac/stable/Docker.dmg</a></p></li><li><p>Docker GUI： <a href="https://github.com/docker/kitematic/releases" target="_blank" rel="noopener">https://github.com/docker/kitematic/releases</a></p></li></ul><h2 id="Docker-服务管理"><a href="#Docker-服务管理" class="headerlink" title="Docker 服务管理"></a>Docker 服务管理</h2><pre class=" language-bash"><code class="language-bash">docker run -d --name gitlab-runner --restart always -v /Users/sky/dev/docker/gitlab-runner/config:/etc/gitlab-runner gitlab/gitlab-runner:latestdocker <span class="token function">exec</span> -it gitlab-runner gitlab-runner register</code></pre><ul><li>Pull the latest version:</li></ul><pre class=" language-bash"><code class="language-bash">docker pull gitlab/gitlab-runner:latest</code></pre><ul><li>Stop and remove the existing container:</li></ul><pre class=" language-bash"><code class="language-bash">docker stop gitlab-runner <span class="token operator">&amp;&amp;</span> docker <span class="token function">rm</span> gitlab-runner</code></pre><ul><li>要从 Docker Hub 取得最新的稳定版 CentOS 官方映像：</li></ul><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> docker pull centos:latest<span class="token function">sudo</span> docker pull centos:centos6</code></pre><ul><li>测试centos是否可以运行成功：</li></ul><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> docker images centos</code></pre><ul><li>要查看已下载至本地的映像：</li></ul><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> docker images centos</code></pre><ul><li>要通过 docker 执行基本的 cat 指令：</li></ul><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> docker run centos:latest <span class="token function">cat</span> /etc/centos-release<span class="token function">sudo</span> docker run -i -t centos7 /bin/bash</code></pre><p>一切正常的话，你会看到一个终端提示符，然后你就可以像操作任何CentOS机器一样进行你的体验。</p><h2 id="Run-a-Hello-world"><a href="#Run-a-Hello-world" class="headerlink" title="Run a Hello world"></a>Run a Hello world</h2><ul><li>docker run runs a container.</li></ul><blockquote><p>centos:centos7 is the image you run, for example the centos operating system image.<br>When you specify an image, Docker looks first for the image on your Docker host.<br>If the image does not exist locally, then the image is pulled from the public image<br>registry Docker Hub. /bin/echo is the command to run inside the new container.</p></blockquote><pre class=" language-bash"><code class="language-bash">docker run centos:centos7  /bin/echo 'Hello world’</code></pre><ul><li>docker ps</li></ul><blockquote><p>The docker ps command queries the Docker daemon for information about all the<br>containers it knows about.</p></blockquote><pre class=" language-bash"><code class="language-bash">docker <span class="token function">ps</span></code></pre><ul><li>docker logs</li></ul><pre class=" language-bash"><code class="language-bash">docker logs CONTAINERID</code></pre><ul><li>Running a web application in Docker</li></ul><pre class=" language-bash"><code class="language-bash">docker run -d -P centos:centos7 python app.py</code></pre><h2 id="查找docker-images"><a href="#查找docker-images" class="headerlink" title="查找docker images"></a>查找docker images</h2><blockquote><p><a href="https://hub.docker.com/explore/" target="_blank" rel="noopener">https://hub.docker.com/explore/</a></p></blockquote><p>$ docker search</p><h2 id="更新ubuntu-image"><a href="#更新ubuntu-image" class="headerlink" title="更新ubuntu image"></a>更新ubuntu image</h2><pre class=" language-bash"><code class="language-bash">docker run -t -i ubuntu  /bin/bash</code></pre><pre class=" language-bash"><code class="language-bash">root@00ee3e6b6450:/<span class="token comment" spellcheck="true"># apt-get install -g nodejs</span>root@00ee3e6b6450:/<span class="token comment" spellcheck="true"># apt-get update</span>root@00ee3e6b6450:/<span class="token comment" spellcheck="true"># apt-get install -y nodejs npm git</span>root@00ee3e6b6450:/<span class="token comment" spellcheck="true"># exit</span></code></pre><pre class=" language-bash"><code class="language-bash">docker commit -m <span class="token string">"apt-get node install"</span> -a <span class="token string">"sky"</span></code></pre><h2 id="Building-an-image-from-a-Dockerfile"><a href="#Building-an-image-from-a-Dockerfile" class="headerlink" title="Building an image from a Dockerfile"></a>Building an image from a Dockerfile</h2><p>$ mkdir docker-sky-dev<br />$ cd docker-sky-dev</p><pre class=" language-bash"><code class="language-bash">docker run -t -i centos:centos7  /bin/bash// 编译docker imagedocker build --rm -t  docker-sky-centos <span class="token keyword">.</span>gitlab-ci-multi-runner unregister --url http://gitlab.xxxx.com/ci --token xxxxxxx</code></pre><h2 id="docker强制批量删除none的image镜像"><a href="#docker强制批量删除none的image镜像" class="headerlink" title="docker强制批量删除none的image镜像"></a>docker强制批量删除none的image镜像</h2><pre class=" language-bash"><code class="language-bash">docker <span class="token function">ps</span> -a <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"Exited"</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{print <span class="token variable">$1</span> }'</span><span class="token operator">|</span><span class="token function">xargs</span> docker stopdocker <span class="token function">ps</span> -a <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"Exited"</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{print <span class="token variable">$1</span> }'</span><span class="token operator">|</span><span class="token function">xargs</span> docker <span class="token function">rm</span>docker images<span class="token operator">|</span><span class="token function">grep</span> none<span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'{print <span class="token variable">$3</span> }'</span><span class="token operator">|</span><span class="token function">xargs</span> docker rmi -f</code></pre><h2 id="install-node-js"><a href="#install-node-js" class="headerlink" title="install node.js"></a>install node.js</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">wget</span> http://nodejs.org/dist/v6.7.0/node-v6.7.0-linux-x64.tar.gz<span class="token function">tar</span> --strip-components 1 -xzvf node-v* -C /usr/localnode --version</code></pre><h2 id="install-nvm"><a href="#install-nvm" class="headerlink" title="install nvm"></a>install nvm</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">wget</span> https://github.com/cnpm/nvm/archive/v0.23.0.tar.gz  -P /opt/download<span class="token function">tar</span> --strip-components 1 -xzvf /opt/download/v0.23.0.tar.gz -C /opt/download<span class="token function">cd</span> /opt/download./install.sh<span class="token function">source</span> ~/.nvm/nvm.shnvm <span class="token function">install</span> 8.13.0nvm <span class="token function">alias</span> default 8.13.0<span class="token comment" spellcheck="true">## install electron</span>yum <span class="token function">install</span> clang dbus-devel gtk2-devel libnotify-devel libgnome-keyring-devel \                   xorg-x11-server-utils libcap-devel cups-devel libXtst-devel \                   alsa-lib-devel libXrandr-devel GConf2-devel nss-devel libgtk-x11-2.0.so.0 libXss.so<span class="token function">npm</span> <span class="token function">install</span> electron -g<span class="token comment" spellcheck="true">## yum</span><span class="token operator">></span> http://repository.it4i.cz/mirrors/repoforge/redhat/el6/en/x86_64/rpmforge/RPMS/rpmforge-release-0.5.3-1.el6.rf.x86_64.rpmyum whatprovides// 安装 example.rpm 包并在安装过程中显示正在安装的文件信息及安装进度；rpm -ivh example.rpm yum groupinstall <span class="token string">"Development Tools"</span>dnf groupinstall <span class="token string">"Development Tools"</span></code></pre><p><a href="https://www.centos.org/forums/viewtopic.php?t=52129" target="_blank" rel="noopener">https://www.centos.org/forums/viewtopic.php?t=52129</a></p><h2 id="安装-bzip2"><a href="#安装-bzip2" class="headerlink" title="安装 bzip2"></a>安装 bzip2</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">wget</span> http://www.bzip.org/1.0.6/bzip2-1.0.6.tar.gz<span class="token function">tar</span> xf bzip2-1.0.6.tar.gz<span class="token function">cd</span> bzip2-1.0.6<span class="token function">make</span><span class="token function">make</span> <span class="token function">install</span>yum <span class="token function">install</span> rpm-develyum <span class="token function">install</span> libxml2 libxslt</code></pre><h2 id="DockerFile"><a href="#DockerFile" class="headerlink" title="DockerFile"></a>DockerFile</h2><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 设置基础镜像</span>FROM ubuntu:latest<span class="token comment" spellcheck="true"># 如果上个步骤已经更新软件源，这步可以忽略</span>RUN <span class="token function">apt-get</span> update<span class="token comment" spellcheck="true"># 安装 NodeJS 和 npm</span>RUN <span class="token function">apt-get</span> <span class="token function">install</span> -y nodejs <span class="token function">npm</span><span class="token comment" spellcheck="true"># 将目录中的文件添加至镜像的 /srv/hello 目录中</span>ADD <span class="token keyword">.</span> /srv/hello<span class="token comment" spellcheck="true"># 设置工作目录</span>WORKDIR /srv/hello<span class="token comment" spellcheck="true"># 安装 Node 依赖库</span>RUN <span class="token function">npm</span> <span class="token function">install</span><span class="token comment" spellcheck="true"># 暴露 3001 端口，便于访问</span>EXPOSE 3001<span class="token comment" spellcheck="true"># 设置启动时默认运行命令</span>CMD <span class="token punctuation">[</span><span class="token string">"nodejs”, “/srv/hello/index.js"</span><span class="token punctuation">]</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;安装docker&quot;&gt;&lt;a href=&quot;#安装docker&quot; class=&quot;headerlink&quot; title=&quot;安装docker:&quot;&gt;&lt;/a&gt;安装docker:&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Docker：&lt;a href=&quot;https://download.do
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>React Native代码执行跟踪和调试</title>
    <link href="https://easyjs.cn/blog/kghphs/"/>
    <id>https://easyjs.cn/blog/kghphs/</id>
    <published>2020-05-31T09:43:53.000Z</published>
    <updated>2020-05-31T09:43:53.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>原文 <a href="https://hubcarl.github.io/blog/2016/09/04/react-native-debug/" target="_blank" rel="noopener">https://hubcarl.github.io/blog/2016/09/04/react-native-debug/</a></p></blockquote><p>在本地开发时, React Native 是加载本地Node服务, 可以通过npm start 启动， package.json 代码如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token string">"scripts"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>  <span class="token string">"start"</span><span class="token keyword">:</span> <span class="token string">"node node_modules/react-native/local-cli/cli.js start"</span><span class="token punctuation">}</span></code></pre><p>加载的地址为：<a href="http://localhost:8081/debug.android.bundle?platform=android&dev=true&hot=false&minify=false" target="_blank" rel="noopener">http://localhost:8081/debug.android.bundle?platform=android&amp;dev=true&amp;hot=false&amp;minify=false</a></p><p>首次在电脑上面打开该地址，被庞大的源代码吓一跳。一个简单的HelloWorld App 足足有5万多行JS代码(开发模式)。仔细分析和梳理调用流程后，也没有那么的恐怖。代码主要包括React源码, 所有初始化定义的Native组件定义，Bridge层调用相关的MessageQueue，NativeModules，原生JS常用方法polyfill等代码定义实现。</p><p>如果是正式发布包，在应用运行时，是不存在本地nodejs服务器这个概念的，所以JS整合文件都是预先打包到asset资源文件里的，减少网络下载JS耗时。当然也可以从网络下载JSBundle，这时就需要考虑首次启动下载JSBundle的网络耗时和下载失败的情况处理。在项目开发时，其实可以在打包时内置一份JSBundle文件，然后启动后异步去下载最新JSBundle，下次启动时就可以加载新的JSBundle。</p><p>针对如此庞大的JSBundle文件，首次启动加载和解析的性能如何呢？</p><h3 id="一-远程本地调试"><a href="#一-远程本地调试" class="headerlink" title="一.远程本地调试"></a>一.远程本地调试</h3><p>通过创建ReactInstanceManager.builder 设置setUseDeveloperSupport(true)支持远程本地调试。<br />远程调试时，如果是通过Android studio 打包时，可以先通过npm start启动启动本地服务，启动后服务地址：</p><p><a href="http://localhost:8081/debug.android.bundle?platform=android&dev=true&hot=false&minify=false" target="_blank" rel="noopener">http://localhost:8081/debug.android.bundle?platform=android&amp;dev=true&amp;hot=false&amp;minify=false</a></p><p>如果想加载asset下的JSBundle文件，需要先把JSBundle打到本地assets目录下面，可以通过react-native bundle实现。命令自动会分析图片依赖，然后拷贝到res目录下面。</p><pre class=" language-bash"><code class="language-bash">react-native bundle --entry-file ./index.android.js  --bundle-output ./app/src/main/assets/index.android.jsbundle --platform android --assets-dest ./app/src/main/res/ --dev</code></pre><p>然后setUseDeveloperSupport(false)，之后重新打包即可。</p><h3 id="二-远程加载JSBundle文件"><a href="#二-远程加载JSBundle文件" class="headerlink" title="二.远程加载JSBundle文件"></a>二.远程加载JSBundle文件</h3><p>在<code>ReactInstanceManager</code> 类里面提供了<code>setJSBundleFile</code>方法,这个就是动态更新的入口.</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Builder <span class="token function">setJSBundleFile</span><span class="token punctuation">(</span>String jsBundleFile<span class="token punctuation">)</span> <span class="token punctuation">{</span>      mJSBundleFile <span class="token operator">=</span> jsBundleFile<span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>由于React Native加载的js文件都打包在bundle中，通过这个方法，可以设置app加载的bundle来源。若检测到远端存在更新的bundle文件，下载好后重新加载即可。</p><p>在<code>ReactInstanceManager</code> 类里面提供了<code>recreateReactContextInBackground</code>方法, 可以通过调用该方法重新加载JSBundle文件.</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">recreateReactContextInBackground</span><span class="token punctuation">(</span>JavaScriptExecutor jsExecutor<span class="token punctuation">,</span> JSBundleLoader jsBundleLoader<span class="token punctuation">)</span> <span class="token punctuation">{</span>    UiThreadUtil<span class="token punctuation">.</span><span class="token function">assertOnUiThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ReactContextInitParams initParams <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReactContextInitParams</span><span class="token punctuation">(</span>jsExecutor<span class="token punctuation">,</span> jsBundleLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mIsContextInitAsyncTaskRunning<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// No background task to create react context is currently running, create and execute one.</span>      ReactContextInitAsyncTask initTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReactContextInitAsyncTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      initTask<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>initParams<span class="token punctuation">)</span><span class="token punctuation">;</span>      mIsContextInitAsyncTaskRunning <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// Background task is currently running, queue up most recent init params to recreate context</span>      <span class="token comment" spellcheck="true">// once task completes.</span>      mPendingReactContextInitParams <span class="token operator">=</span> initParams<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><p>目前该方法访问权限上private,需要通过反射才能调用, 希望未来 React Native 能够从官方支持. 代码如下:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">onJSBundleLoadedFromServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>            Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> RIManagerClazz <span class="token operator">=</span> mReactInstanceManager<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Method method <span class="token operator">=</span> RIManagerClazz<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"recreateReactContextInBackground"</span><span class="token punctuation">,</span>                JavaScriptExecutor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> JSBundleLoader<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            method<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>mReactInstanceManager<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">JSCJavaScriptExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    JSBundleLoader<span class="token punctuation">.</span><span class="token function">createFileLoader</span><span class="token punctuation">(</span><span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                     JS_BUNDLE_LOCAL_PATH<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchMethodException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalAccessException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InvocationTargetException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalArgumentException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h3 id="三-开启ReactNative日志打印"><a href="#三-开启ReactNative日志打印" class="headerlink" title="三.开启ReactNative日志打印"></a>三.开启ReactNative日志打印</h3><p>React Native 增加了关键日志自定义listener回调接口MarkerListener，只要在React Activity onCreate设置ReactMarker.setMarkerListener方法，<br />实现MarkerListener接口logMarker方法，即可实现控制台日志打印。我们可以记录下每个关键路径的当前时间，即可计算出每个关键路径的执行时间。</p><pre class=" language-java"><code class="language-java">ReactMarker<span class="token punctuation">.</span><span class="token function">setMarkerListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ReactMarker<span class="token punctuation">.</span>MarkerListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">logMarker</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token string">"ReactNativeJS"</span><span class="token punctuation">,</span> name<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" cost:"</span> <span class="token operator">+</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre><code>09-03 20:33:47.637 I/ReactNativeJS: process_packages_end cost:147238762763709-03 20:33:47.637 I/ReactNativeJS: build_native_module_registry_start cost:147238762763709-03 20:33:47.639 I/ReactNativeJS: build_native_module_registry_end cost:147238762763909-03 20:33:47.646 I/ReactNativeJS: create_catalyst_instance_start cost:147238762764609-03 20:33:47.688 I/ReactNativeJS: create_catalyst_instance_end cost:147238762768809-03 20:33:47.688 I/ReactNativeJS: run_js_bundle_start cost:147238762768809-03 20:33:47.717 I/ReactNativeJS: loadapplicationscript_startstringconvert cost:147238762771709-03 20:33:47.833 I/ReactNativeJS: loadapplicationscript_endstringconvert cost:147238762783209-03 20:33:48.787 I/ReactNativeJS: create_react_context_end cost:147238762878609-03 20:33:48.787 I/ReactNativeJS: run_js_bundle_end cost:1472387628787</code></pre><h3 id="四-简单的React-Native-View创建流程"><a href="#四-简单的React-Native-View创建流程" class="headerlink" title="四.简单的React Native View创建流程"></a>四.简单的React Native View创建流程</h3><p><img src="https://raw.githubusercontent.com/hubcarl/hubcarl.github.io/master/_posts/images/react/rn-simple-view.jpg#width=" alt=""></p><h4 id="1-React-View源码"><a href="#1-React-View源码" class="headerlink" title="1.React View源码"></a>1.React View源码</h4><pre><code>render() {    return (        &lt;View style={styles.container}&gt;            &lt;Text style={styles.welcome}&gt;                {this.state.text}            &lt;/Text&gt;            &lt;TouchableOpacity activeOpacity={0.8} onPress={this._getJSNativeCost}&gt;                &lt;Text style={styles.instructions}&gt;                    点击我，测试JS调用Native性能                &lt;/Text&gt;            &lt;/TouchableOpacity&gt;             &lt;TouchableOpacity activeOpacity={0.8} onPress={this._setCache}&gt;                &lt;Text style={styles.instructions}&gt;                    点击我，设置缓存测试                &lt;/Text&gt;              &lt;/TouchableOpacity&gt;             &lt;TouchableOpacity activeOpacity={0.8} onPress={this._getCache}&gt;              &lt;Text style={styles.instructions}&gt;                  点击我，获取缓存值              &lt;/Text&gt;             &lt;/TouchableOpacity&gt;            &lt;TouchableOpacity activeOpacity={0.8} onPress={this._secondActivity}&gt;                &lt;Text style={styles.instructions}&gt;                    点击我，打开Android Native Activity页面                &lt;/Text&gt;            &lt;/TouchableOpacity&gt;            &lt;TouchableOpacity activeOpacity={0.8} onPress={this._secondReactActivity}&gt;                &lt;Text style={styles.instructions}&gt;                    点击我，打开Android Second React Activity页面                &lt;/Text&gt;            &lt;/TouchableOpacity&gt;            &lt;Text style={styles.instructions}&gt;                Shake or press menu button for dev menu            &lt;/Text&gt;        &lt;/View&gt;    );}</code></pre><h4 id="2-React-bundle-js-打包构建后"><a href="#2-React-bundle-js-打包构建后" class="headerlink" title="2.React bundle.js 打包构建后"></a>2.React bundle.js 打包构建后</h4><pre><code>{key:&#39;render&#39;,value:function render(){return(_react2.default.createElement(_reactNative.View,{style:styles.container},_react2.default.createElement(_reactNative.Text,{style:styles.welcome},this.state.text),_react2.default.createElement(_reactNative.TouchableOpacity,{activeOpacity:0.8,onPress:this._getJSNativeCost},_react2.default.createElement(_reactNative.Text,{style:styles.instructions},&#39;点击我，测试JS调用Native性能&#39;)),_react2.default.createElement(_reactNative.TouchableOpacity,{activeOpacity:0.8,onPress:this._setCache},_react2.default.createElement(_reactNative.Text,{style:styles.instructions},&#39;点击我，设置缓存测试&#39;)),_react2.default.createElement(_reactNative.TouchableOpacity,{activeOpacity:0.8,onPress:this._getCache},_react2.default.createElement(_reactNative.Text,{style:styles.instructions},&#39;点击我，获取缓存值&#39;)),_react2.default.createElement(_reactNative.TouchableOpacity,{activeOpacity:0.8,onPress:this._secondActivity},_react2.default.createElement(_reactNative.Text,{style:styles.instructions},&#39;点击我，打开Android Native Activity页面&#39;)),_react2.default.createElement(_reactNative.TouchableOpacity,{activeOpacity:0.8,onPress:this._secondReactActivity},_react2.default.createElement(_reactNative.Text,{style:styles.instructions},&#39;点击我，打开Android Second React Activity页面&#39;)),_react2.default.createElement(_reactNative.Text,{style:styles.instructions},&#39;Shake or press menu button for dev menu&#39;)));}}</code></pre><h4 id="3-Native-View创建之JS调用Native"><a href="#3-Native-View创建之JS调用Native" class="headerlink" title="3.Native View创建之JS调用Native"></a>3.Native View创建之JS调用Native</h4><pre><code>09-03 20:19:19.462  Running application &quot;SmartDebugReactApp&quot; with appParams: {&quot;initialProps&quot;:{},&quot;rootTag&quot;:1}. __DEV__ === true, development-level warning are ON, performance optimizations are OFF09-03 20:19:19.526  &#39;JS-&gt;N : &#39;, 8, 18, &#39;NaN.createView([2,&quot;RCTView&quot;,1,{&quot;flex&quot;:1}])&#39;09-03 20:19:19.545  &#39;JS-&gt;N : &#39;, 8, 18, &#39;NaN.createView([3,&quot;RCTView&quot;,1,{&quot;collapsable&quot;:true,&quot;flex&quot;:1}])&#39;09-03 20:19:19.584  &#39;JS-&gt;N : &#39;, 28, 1, &#39;NaN.createTimer([2,1,1472386759583,false])&#39;09-03 20:19:19.706  &#39;JS-&gt;N : &#39;, 8, 18, &#39;NaN.createView([4,&quot;RCTView&quot;,1,{&quot;flex&quot;:1,&quot;justifyContent&quot;:&quot;center&quot;,&quot;alignItems&quot;:&quot;center&quot;,&quot;backgroundColor&quot;:-656129}])&#39;09-03 20:19:19.721  &#39;JS-&gt;N : &#39;, 8, 18, &#39;NaN.createView([5,&quot;RCTText&quot;,1,{&quot;fontSize&quot;:20,&quot;textAlign&quot;:&quot;center&quot;,&quot;margin&quot;:10,&quot;color&quot;:-65536,&quot;accessible&quot;:true,&quot;allowFontScaling&quot;:true,&quot;ellipsizeMode&quot;:&quot;tail&quot;}])&#39;09-03 20:19:19.732  &#39;JS-&gt;N : &#39;, 8, 18, &#39;NaN.createView([6,&quot;RCTRawText&quot;,1,{&quot;text&quot;:&quot;Welcome to React Native!&quot;}])&#39;09-03 20:19:19.738  &#39;JS-&gt;N : &#39;, 8, 9, &#39;NaN.setChildren([5,[6]])&#39;09-03 20:19:19.768  &#39;JS-&gt;N : &#39;, 8, 18, &#39;NaN.createView([7,&quot;RCTView&quot;,1,{&quot;accessible&quot;:true,&quot;opacity&quot;:1}])&#39;09-03 20:19:19.777  &#39;JS-&gt;N : &#39;, 8, 18, &#39;NaN.createView([8,&quot;RCTText&quot;,1,{&quot;textAlign&quot;:&quot;center&quot;,&quot;color&quot;:-13421773,&quot;marginTop&quot;:15,&quot;marginBottom&quot;:5,&quot;fontSize&quot;:14,&quot;accessible&quot;:true,&quot;allowFontScaling&quot;:true,&quot;ellipsizeMode&quot;:&quot;tail&quot;}])&#39;09-03 20:19:19.779  &#39;JS-&gt;N : &#39;, 8, 18, &#39;NaN.createView([9,&quot;RCTRawText&quot;,1,{&quot;text&quot;:&quot;点击我，测试JS调用Native性能&quot;}])&#39;09-03 20:19:19.782  &#39;JS-&gt;N : &#39;, 8, 9, &#39;NaN.setChildren([8,[9]])&#39;09-03 20:19:19.783  &#39;JS-&gt;N : &#39;, 8, 9, &#39;NaN.setChildren([7,[8]])&#39;09-03 20:19:19.801  &#39;JS-&gt;N : &#39;, 8, 18, &#39;NaN.createView([10,&quot;RCTView&quot;,1,{&quot;accessible&quot;:true,&quot;opacity&quot;:1}])&#39;09-03 20:19:19.810  &#39;JS-&gt;N : &#39;, 8, 18, &#39;NaN.createView([12,&quot;RCTText&quot;,1,{&quot;textAlign&quot;:&quot;center&quot;,&quot;color&quot;:-13421773,&quot;marginTop&quot;:15,&quot;marginBottom&quot;:5,&quot;fontSize&quot;:14,&quot;accessible&quot;:true,&quot;allowFontScaling&quot;:true,&quot;ellipsizeMode&quot;:&quot;tail&quot;}])&#39;09-03 20:19:19.812  &#39;JS-&gt;N : &#39;, 8, 18, &#39;NaN.createView([13,&quot;RCTRawText&quot;,1,{&quot;text&quot;:&quot;点击我，设置缓存测试&quot;}])&#39;09-03 20:19:19.813  &#39;JS-&gt;N : &#39;, 8, 9, &#39;NaN.setChildren([12,[13]])&#39;09-03 20:19:19.814  &#39;JS-&gt;N : &#39;, 8, 9, &#39;NaN.setChildren([10,[12]])&#39;09-03 20:19:19.834  &#39;JS-&gt;N : &#39;, 8, 18, &#39;NaN.createView([14,&quot;RCTView&quot;,1,{&quot;accessible&quot;:true,&quot;opacity&quot;:1}])&#39;09-03 20:19:19.849  &#39;JS-&gt;N : &#39;, 8, 18, &#39;NaN.createView([15,&quot;RCTText&quot;,1,{&quot;textAlign&quot;:&quot;center&quot;,&quot;color&quot;:-13421773,&quot;marginTop&quot;:15,&quot;marginBottom&quot;:5,&quot;fontSize&quot;:14,&quot;accessible&quot;:true,&quot;allowFontScaling&quot;:true,&quot;ellipsizeMode&quot;:&quot;tail&quot;}])&#39;09-03 20:19:19.851  &#39;JS-&gt;N : &#39;, 8, 18, &#39;NaN.createView([16,&quot;RCTRawText&quot;,1,{&quot;text&quot;:&quot;点击我，获取缓存值&quot;}])&#39;09-03 20:19:19.851  &#39;JS-&gt;N : &#39;, 8, 9, &#39;NaN.setChildren([15,[16]])&#39;09-03 20:19:19.854  &#39;JS-&gt;N : &#39;, 8, 9, &#39;NaN.setChildren([14,[15]])&#39;09-03 20:19:19.881  &#39;JS-&gt;N : &#39;, 8, 18, &#39;NaN.createView([17,&quot;RCTView&quot;,1,{&quot;accessible&quot;:true,&quot;opacity&quot;:1}])&#39;09-03 20:19:19.890  &#39;JS-&gt;N : &#39;, 8, 18, &#39;NaN.createView([18,&quot;RCTText&quot;,1,{&quot;textAlign&quot;:&quot;center&quot;,&quot;color&quot;:-13421773,&quot;marginTop&quot;:15,&quot;marginBottom&quot;:5,&quot;fontSize&quot;:14,&quot;accessible&quot;:true,&quot;allowFontScaling&quot;:true,&quot;ellipsizeMode&quot;:&quot;tail&quot;}])&#39;09-03 20:19:19.894  &#39;JS-&gt;N : &#39;, 8, 18, &#39;NaN.createView([19,&quot;RCTRawText&quot;,1,{&quot;text&quot;:&quot;点击我，打开Android Native Activity页面&quot;}])&#39;09-03 20:19:19.895  &#39;JS-&gt;N : &#39;, 8, 9, &#39;NaN.setChildren([18,[19]])&#39;09-03 20:19:19.896  &#39;JS-&gt;N : &#39;, 8, 9, &#39;NaN.setChildren([17,[18]])&#39;09-03 20:19:19.914  &#39;JS-&gt;N : &#39;, 8, 18, &#39;NaN.createView([20,&quot;RCTView&quot;,1,{&quot;accessible&quot;:true,&quot;opacity&quot;:1}])&#39;09-03 20:19:19.924  &#39;JS-&gt;N : &#39;, 8, 18, &#39;NaN.createView([22,&quot;RCTText&quot;,1,{&quot;textAlign&quot;:&quot;center&quot;,&quot;color&quot;:-13421773,&quot;marginTop&quot;:15,&quot;marginBottom&quot;:5,&quot;fontSize&quot;:14,&quot;accessible&quot;:true,&quot;allowFontScaling&quot;:true,&quot;ellipsizeMode&quot;:&quot;tail&quot;}])&#39;09-03 20:19:19.927  &#39;JS-&gt;N : &#39;, 8, 18, &#39;NaN.createView([23,&quot;RCTRawText&quot;,1,{&quot;text&quot;:&quot;点击我，打开Android Second React Activity页面&quot;}])&#39;09-03 20:19:19.932  &#39;JS-&gt;N : &#39;, 8, 9, &#39;NaN.setChildren([22,[23]])&#39;09-03 20:19:19.935  &#39;JS-&gt;N : &#39;, 8, 9, &#39;NaN.setChildren([20,[22]])&#39;09-03 20:19:19.941  &#39;JS-&gt;N : &#39;, 8, 18, &#39;NaN.createView([24,&quot;RCTText&quot;,1,{&quot;textAlign&quot;:&quot;center&quot;,&quot;color&quot;:-13421773,&quot;marginTop&quot;:15,&quot;marginBottom&quot;:5,&quot;fontSize&quot;:14,&quot;accessible&quot;:true,&quot;allowFontScaling&quot;:true,&quot;ellipsizeMode&quot;:&quot;tail&quot;}])&#39;09-03 20:19:19.945  &#39;JS-&gt;N : &#39;, 8, 18, &#39;NaN.createView([25,&quot;RCTRawText&quot;,1,{&quot;text&quot;:&quot;Shake or press menu button for dev menu&quot;}])&#39;09-03 20:19:19.946  &#39;JS-&gt;N : &#39;, 8, 9, &#39;NaN.setChildren([24,[25]])&#39;09-03 20:19:19.950  &#39;JS-&gt;N : &#39;, 8, 9, &#39;NaN.setChildren([4,[5,7,10,14,17,20,24]])&#39;09-03 20:19:19.951  &#39;JS-&gt;N : &#39;, 8, 9, &#39;NaN.setChildren([3,[4]])&#39;09-03 20:19:19.962  &#39;JS-&gt;N : &#39;, 8, 18, &#39;NaN.createView([26,&quot;RCTView&quot;,1,{&quot;collapsable&quot;:true,&quot;position&quot;:&quot;absolute&quot;}])&#39;09-03 20:19:19.963  &#39;JS-&gt;N : &#39;, 8, 9, &#39;NaN.setChildren([2,[3,26]])&#39;09-03 20:19:19.964  &#39;JS-&gt;N : &#39;, 8, 9, &#39;NaN.setChildren([1,[2]])&#39;09-03 20:19:19.976  &#39;JS-&gt;N : &#39;, 24, 0, &#39;NaN.getDataFromIntent([0,1])&#39;09-03 20:19:19.978  &#39;JS-&gt;N : &#39;, 1, 1, &#39;NaN.show([&quot;Toast 是原生支持的!&quot;,3000])&#39;09-03 20:19:20.056  &#39;JS-&gt;N : &#39;, 8, 12, &#39;NaN.updateView([6,&quot;RCTRawText&quot;,{&quot;text&quot;:&quot;注意：数据为空！&quot;}])&#39;</code></pre><h3 id="五-性能测试"><a href="#五-性能测试" class="headerlink" title="五.性能测试"></a>五.性能测试</h3><h4 id="1-React-Native-简单测试JS调用Native接口性能"><a href="#1-React-Native-简单测试JS调用Native接口性能" class="headerlink" title="1.React Native 简单测试JS调用Native接口性能"></a>1.React Native 简单测试JS调用Native接口性能</h4><p>准备三组测试数据:</p><p>第一组(简单):   key: 随机生成  value: 我是来自React Native缓存消息</p><p>第二组(长字符): key: 随机生成  value: 我是来自React Native缓存消息(循环50遍)</p><p>第二组(JSON):  key: 随机生成  value: 下面JSON字符串,循环10遍, 内容不重复</p><p>{<br />“id”: 000001,<br />“title”: “React Native接口性能测试”,<br />“summary”: “炫斗不停，精彩不断，不要怂就是干的全武将萌化翻转扮演的新式三国策略养成手游《女神三国》邀您…”,<br />“category”: “React Native”,<br />“createTime”: “2016-09-09 17:48:38”,<br />“publicTime”: “2016-09-09 17:48:00”<br />}</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ReactMethod</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCache</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String value<span class="token punctuation">,</span>     Callback successCallback<span class="token punctuation">,</span> Callback errorCallback<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        sharedPreference <span class="token operator">=</span> <span class="token function">getCurrentActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSharedPreferences</span><span class="token punctuation">(</span><span class="token string">"rn_cache"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sharedPreference<span class="token punctuation">.</span><span class="token function">edit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putString</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        successCallback<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token string">"save success"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        errorCallback<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//Java中的方法需要导出才能给JS使用，要导出Java方法，需要使用@ReactMethod来注解，且方法的返回值只能是void。</span><span class="token annotation punctuation">@ReactMethod</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getCache</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Callback callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>    callback<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>sharedPreference<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> start <span class="token operator">=</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>NativeModules<span class="token punctuation">.</span>IntentModule<span class="token punctuation">.</span><span class="token function">getCache</span><span class="token punctuation">(</span><span class="token string">'RN001'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">const</span> time <span class="token operator">=</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>start<span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'>>>>cost[getCache]:'</span><span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>    NativeModules<span class="token punctuation">.</span>ToastAndroid<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span>value<span class="token operator">+</span><span class="token string">' cost:'</span><span class="token operator">+</span> time<span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Native收到JS传递过来的值直接返回给JS, 经过多次对三组进行测试（Nexus 5 Android 5.0, MX3 5.0），时间稳定在2-4ms, 偶尔会出现5ms, 数据的大小对接口调用耗时影响不大.</p><h4 id="2-WebView-addJavascriptInterface-接口测试"><a href="#2-WebView-addJavascriptInterface-接口测试" class="headerlink" title="2.WebView addJavascriptInterface 接口测试"></a>2.WebView addJavascriptInterface 接口测试</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@JavascriptInterface</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCache</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        sharedPreference <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getSharedPreferences</span><span class="token punctuation">(</span><span class="token string">"rn_cache"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sharedPreference<span class="token punctuation">.</span><span class="token function">edit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putString</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@JavascriptInterface</span><span class="token keyword">public</span> String <span class="token function">getCache</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> sharedPreference<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">getCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> start <span class="token operator">=</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> ret <span class="token operator">=</span> HybridApp<span class="token punctuation">.</span><span class="token function">getCache</span><span class="token punctuation">(</span><span class="token string">'RN001'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> end <span class="token operator">=</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'>>>cost[getCache]:'</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'  result:'</span> <span class="token operator">+</span> ret<span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>JS从Native获取数据, 经过多次进行三组数据测试（Nexus 5 Android 5.0），时间稳定在0-3ms, 多次点击后,时间更短,时间稳定范围0s-1s,说明Interface有缓存机制和数据的大小对接口调用耗时影响不大.</p><h4 id="3-WebView-prompt-接口测试"><a href="#3-WebView-prompt-接口测试" class="headerlink" title="3.WebView prompt 接口测试"></a>3.WebView prompt 接口测试</h4><pre class=" language-javascript"><code class="language-javascript">@Override<span class="token keyword">public</span> boolean <span class="token function">onJsPrompt</span><span class="token punctuation">(</span>WebView view<span class="token punctuation">,</span> String url<span class="token punctuation">,</span> String message<span class="token punctuation">,</span>     String defaultValue<span class="token punctuation">,</span> JsPromptResult result<span class="token punctuation">)</span> <span class="token punctuation">{</span>    result<span class="token punctuation">.</span><span class="token function">confirm</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>经过多次对三组进行数据进行测试（Nexus 5 Android 5.），时间稳定在1-2ms,数据的大小对接口调用耗时影响不大</p><h4 id="4-三种方式耗时总结"><a href="#4-三种方式耗时总结" class="headerlink" title="4.三种方式耗时总结"></a>4.三种方式耗时总结</h4><ol><li><p>从测试效果来看, 三种方式接口调用耗时都在1s-4s级别, 性能表现都非常不错. React Native因为进行了接口封装转换, 比addJavascriptInterface和prompt方式都是简单的数据透传返回要慢1ms-2ms是可以预期的.</p></li><li><p>说明: 这里只是简单的接口调用测试, 当前运行环境(Native线程切换,Native数据获取方式,数据回调方式等)都可能会影响实际的接口调用耗时.</p></li></ol><h4 id="2-React-Native-首次加载性能测试"><a href="#2-React-Native-首次加载性能测试" class="headerlink" title="2.React Native 首次加载性能测试"></a>2.React Native 首次加载性能测试</h4><h4 id="Nexus5-5-0系统测试"><a href="#Nexus5-5-0系统测试" class="headerlink" title="Nexus5 5.0系统测试"></a>Nexus5 5.0系统测试</h4><p><strong>第一次测试</strong></p><pre><code>09-08 20:41:39.002   I/ReactNativeJS﹕ &gt;&gt;&gt;react performance react start:147333849900209-08 20:41:39.081   I/ReactNativeJS﹕ &gt;&gt;&gt;react performance react end:147333849908109-08 20:41:39.601   I/ReactNativeJS﹕ &gt;&gt;&gt;react[runApplication]:147333849960009-08 20:41:39.618   I/ReactNativeJS﹕ &gt;&gt;&gt;react#constructor, 147333849961609-08 20:41:39.618   I/ReactNativeJS﹕ &gt;&gt;&gt;react#componentWillMount, 147333849961809-08 20:41:39.711   I/ReactNativeJS﹕ &gt;&gt;&gt;react#componentDidMount, 1473338499711</code></pre><p>cost:1473338499711-1473338499002=709ms</p><p><strong>第二次测试</strong></p><pre><code>09-08 20:45:42.774   I/ReactNativeJS﹕ &gt;&gt;&gt;react performance react start:147333874277409-08 20:45:42.806   I/ReactNativeJS﹕ &gt;&gt;&gt;react performance react end:147333874280609-08 20:45:43.300  14935-14965/com.react.smart I/ReactNativeJS﹕ &gt;&gt;&gt;react[runApplication]:147333874329909-08 20:45:43.320  14935-14965/com.react.smart I/ReactNativeJS﹕ &gt;&gt;&gt;react#constructor, 147333874331909-08 20:45:43.321  14935-14965/com.react.smart I/ReactNativeJS﹕ &gt;&gt;&gt;react#componentWillMount, 147333874332109-08 20:45:43.471  14935-14965/com.react.smart I/ReactNativeJS﹕ &gt;&gt;&gt;react#componentDidMount, 1473338743471</code></pre><p>cost:1473338743471-1473338742774=697ms</p><p><strong>第三次测试</strong></p><pre><code>09-08 20:41:39.002   I/ReactNativeJS﹕ &gt;&gt;&gt;react performance react start:147333849900209-08 20:41:39.081   I/ReactNativeJS﹕ &gt;&gt;&gt;react performance react end:147333849908109-08 20:41:39.601   I/ReactNativeJS﹕ &gt;&gt;&gt;react[runApplication]:147333849960009-08 20:41:39.618   I/ReactNativeJS﹕ &gt;&gt;&gt;react#constructor, 147333849961609-08 20:41:39.618   I/ReactNativeJS﹕ &gt;&gt;&gt;react#componentWillMount, 147333849961809-08 20:41:39.711   I/ReactNativeJS﹕ &gt;&gt;&gt;react#componentDidMount, 1473338499711</code></pre><p>cost:1473338499711-1473338499002=709ms</p><p><strong>第四次测试</strong></p><pre><code>09-08 20:50:46.781   I/ReactNativeJS﹕ &gt;&gt;&gt;react performance react start:147333904678109-08 20:50:46.789   I/ReactNativeJS﹕ &gt;&gt;&gt;react performance react end:147333904678909-08 20:50:47.213   I/ReactNativeJS﹕ &gt;&gt;&gt;react[runApplication]:147333904721309-08 20:50:47.231   I/ReactNativeJS﹕ &gt;&gt;&gt;react#constructor, 147333904722909-08 20:50:47.231   I/ReactNativeJS﹕ &gt;&gt;&gt;react#componentWillMount, 147333904723109-08 20:50:47.327   I/ReactNativeJS﹕ &gt;&gt;&gt;react#componentDidMount, 1473339047327</code></pre><p>cost:1473339047327-1473339046781=546ms</p><p>从测试结果来看, Nexus5 时间稳定在500ms-700ms之间, 时间可以接受.</p><h4 id="MX3-5-0系统测试"><a href="#MX3-5-0系统测试" class="headerlink" title="MX3 5.0系统测试"></a>MX3 5.0系统测试</h4><p><strong>第一次测试</strong></p><pre><code>09-11 16:51:36.967   I/ReactNativeJS﹕ &gt;&gt;&gt;react performance react start:147358389696709-11 16:51:37.091   I/ReactNativeJS﹕ &gt;&gt;&gt;react performance react end:147358389709109-11 16:51:38.349   I/ReactNativeJS﹕ &#39;&gt;&gt;&gt;react#constructor&#39;, 147358389834209-11 16:51:38.350   I/ReactNativeJS﹕ &#39;&gt;&gt;&gt;react#componentWillMount&#39;, 147358389834909-11 16:51:38.523   I/ReactNativeJS﹕ &#39;&gt;&gt;&gt;react#componentDidMount&#39;, 147358389852309-11 16:51:38.528   I/ReactNativeJS﹕ &#39;&gt;&gt;&gt;react#componentDidMount#ToastAndroid.show&#39;, 1473583898527</code></pre><p>cost:1473583898527-1473583896967=1560ms</p><p><strong>第二次测试</strong></p><pre><code>09-11 16:53:48.688   I/ReactNativeJS﹕ &gt;&gt;&gt;react performance react start:147358402868809-11 16:53:48.887   I/ReactNativeJS﹕ &gt;&gt;&gt;react performance react end:147358402888709-11 16:53:50.345   I/ReactNativeJS﹕ &#39;&gt;&gt;&gt;react#constructor&#39;, 147358403034209-11 16:53:50.346   I/ReactNativeJS﹕ &#39;&gt;&gt;&gt;react#componentWillMount&#39;, 147358403034509-11 16:53:50.500   I/ReactNativeJS﹕ &#39;&gt;&gt;&gt;react#componentDidMount&#39;, 147358403050009-11 16:53:50.504   I/ReactNativeJS﹕ &#39;&gt;&gt;&gt;react#componentDidMount#ToastAndroid.show&#39;, 1473584030503</code></pre><p>cost:1473584030503-1473584028688=1815ms</p><p><strong>第三次测试</strong></p><pre><code>09-11 17:10:20.694   I/ReactNativeJS﹕ &gt;&gt;&gt;react performance react start:147358502069409-11 17:10:20.894   I/ReactNativeJS﹕ &gt;&gt;&gt;react performance react end:147358502089409-11 17:10:22.225   I/ReactNativeJS﹕ &#39;&gt;&gt;&gt;react#constructor&#39;, 147358502222209-11 17:10:22.226   I/ReactNativeJS﹕ &#39;&gt;&gt;&gt;react#componentWillMount&#39;, 147358502222509-11 17:10:22.405   I/ReactNativeJS﹕ &#39;&gt;&gt;&gt;react#componentDidMount&#39;, 147358502240509-11 17:10:22.409   I/ReactNativeJS﹕ &#39;&gt;&gt;&gt;react#componentDidMount#ToastAndroid.show&#39;, 1473585022408</code></pre><p>cost:1473585022408-1473585020694=1714ms</p><p><strong>第四次测试</strong></p><pre><code>09-11 17:11:25.690   I/ReactNativeJS﹕ &gt;&gt;&gt;react performance react start:147358508569009-11 17:11:25.865   I/ReactNativeJS﹕ &gt;&gt;&gt;react performance react end:147358508586509-11 17:11:27.173   I/ReactNativeJS﹕ &#39;&gt;&gt;&gt;react#constructor&#39;, 147358508716909-11 17:11:27.173   I/ReactNativeJS﹕ &#39;&gt;&gt;&gt;react#componentWillMount&#39;, 147358508717309-11 17:11:27.336   I/ReactNativeJS﹕ &#39;&gt;&gt;&gt;react#componentDidMount&#39;, 147358508733509-11 17:11:27.340   I/ReactNativeJS﹕ &#39;&gt;&gt;&gt;react#componentDidMount#ToastAndroid.show&#39;, 1473585087339</code></pre><p>cost: 1473585087339-1473585085690=1649ms</p><p>从测试结果来看, MX3 时间稳定在1500ms-1800ms之间, 明显比Nexus5要慢.</p><h4 id="3-MX3-内存占用和cpu消耗"><a href="#3-MX3-内存占用和cpu消耗" class="headerlink" title="3.MX3 内存占用和cpu消耗"></a>3.MX3 内存占用和cpu消耗</h4><p><strong>内存占用曲线图</strong></p><p><img src="https://raw.githubusercontent.com/hubcarl/hubcarl.github.io/master/_posts/images/react/rn-memory.png#width=" alt=""></p><p>从曲线图看出内存占用非常稳定, 一个HellWord的React Native App占用内存大概在20M</p><p><strong>cpu曲线图</strong></p><p><img src="https://raw.githubusercontent.com/hubcarl/hubcarl.github.io/master/_posts/images/react/rn-cpu.png#width=" alt=""></p><p>从曲线图看出启动的时候cpu瞬间飙到40%, 原因是因为启动时涉及Android和React Native JS与Native的大量调用,这个可以从上面View的绘制的过程可以看出.</p><p>第二个cpu波动是我这边频繁的点击[点击我]相关测试, 停止点击后, cpu马上就降落下来.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;原文 &lt;a href=&quot;https://hubcarl.github.io/blog/2016/09/04/react-native-debug/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://hubcarl.gi
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Egg SSR Webpack 内存编译热更新实现</title>
    <link href="https://easyjs.cn/blog/pgbb4x/"/>
    <id>https://easyjs.cn/blog/pgbb4x/</id>
    <published>2020-05-31T09:43:53.000Z</published>
    <updated>2020-05-31T09:43:53.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id=""><a href="#" class="headerlink" title=""></a></h3><h2 id="1-背景"><a href="#1-背景" class="headerlink" title="1. 背景"></a>1. 背景</h2><p>在用 Node.js + Webpack 构建的方式进行开发时, 我们希望能实现修改代码能实时刷新页面UI的效果. 这个特性 Webpack本身是支持的, 而且基于koa也有现成的 koa-webpack-hot-middleware 和 koa-webpack-dev-middleware 封装好的组件支持.</p><p>不过这里如果需要支持Node.js服务器端修改代码自动重启webpack自动编译功能该如何实现呢, 主要存在以下几个问题:</p><ul><li>如何解决 Node.js 服务器端代码修改应用重启避免 Webpack 重新编译.<br /></li><li>如何访问 js, css, image 等静态资源.<br /></li><li>服务端渲染时, Node 层如何读取 Webpack 内存编译的内容<br /></li><li>如何处理本地开发 Webpack 热更新内存存储读取和线上应用本机文件读取逻辑分离.<br /></li></ul><h2 id="2-构建热更新实现"><a href="#2-构建热更新实现" class="headerlink" title="2.构建热更新实现"></a>2.构建热更新实现</h2><blockquote><p>前端渲染和服务端渲染构建热更新实现</p></blockquote><p>在koa项目中, 通过 koa-webpack-dev-middleware 和 koa-webpack-hot-middleware 可以实现 Webpack 编译内存存储和热更新功能, 代码如下:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> compiler <span class="token operator">=</span> <span class="token function">webpack</span><span class="token punctuation">(</span>webpackConfig<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> devMiddleware <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa-webpack-dev-middleware'</span><span class="token punctuation">)</span><span class="token punctuation">(</span>compiler<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> hotMiddleware <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa-webpack-hot-middleware'</span><span class="token punctuation">)</span><span class="token punctuation">(</span>compiler<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>devMiddleware<span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>hotMiddleware<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>如果按照上面实现, 可以满足修改修改客户端代码实现webpack自动变编译和UI界面热更新的功能.</p><p>但如果是修改 Node.js 服务器端代码重启后就会发现webpack会重新编译, 这不是我们要的效果.</p><p>原因是因为 middleware 是依赖 app 的生命周期, 当 app 销毁时, 对应 Webpack compiler 实例也就没有了, 重启时会重新执行middleware 初始化工作.</p><p>那有没有办法保持 Webpack 编译实例呢? 针对这个我们可以通过 Egg 框架已经内置了 worke r和 agent 机制来实现 Webpack内存编译功能.</p><ul><li>worker 和 agent 通信机制: <a href="https://eggjs.org/zh-cn/core/cluster-and-ipc.html" target="_blank" rel="noopener">https://eggjs.org/zh-cn/core/cluster-and-ipc.html</a><br /></li><li>实现 egg 项目服务器代码修改项目自动重启的功能可以使用 egg-development 插件.<br /></li></ul><h2 id="3-Egg-框架中-Webpack-构建"><a href="#3-Egg-框架中-Webpack-构建" class="headerlink" title="3. Egg 框架中 Webpack 构建"></a>3. Egg 框架中 Webpack 构建</h2><h3 id="3-1-解决思路"><a href="#3-1-解决思路" class="headerlink" title="3.1 解决思路"></a>3.1 解决思路</h3><ul><li>我们利用本地开发修改 Node 层代码修复重启时, 只会重启 Worker 进程, 不会重启 Agent 进程, 我们可以在 Agent 里面启动 Webpack 编译服务解决 Webpack compiler 实例问题.<br /></li><li>因为 Egg App 进程 和 Agent 进程是两个进程, 当 url 访问时, 我们通过 Worker 发送消息给 Agent 进程, 获取服务端渲染的文件内容, 然后 Agent 再发送消息给 Worker 解决文件读取问题.<br /></li><li>本地开发 Webpack 热更新内存存储读取和线上应用本机文件读取逻辑分离功能, 我们通过本地开发模式时, 通过读取Webpack 内存内容覆盖本地文件读取的逻辑, 这样在开发模式和发布模式可以无缝对接.<br /></li></ul><h3 id="3-2-本地开发模式"><a href="#3-2-本地开发模式" class="headerlink" title="3.2 本地开发模式"></a>3.2 本地开发模式</h3><h4 id="3-2-1-Egg项目启动"><a href="#3-2-1-Egg项目启动" class="headerlink" title="3.2.1 Egg项目启动"></a>3.2.1 Egg项目启动</h4><p><img src="https://cdn.yuque.com/yuque/0/2018/png/116733/1528521824273-8fc185c1-8124-4422-919e-33341ebff8c3.png#align=left&display=inline&height=594&originHeight=600&originWidth=836&status=done&width=827" alt=""></p><ul><li>首先执行<code>node index.js</code> 或者 <code>npm run dev</code> 启动 Egg 应用<br /></li><li>在 Egg Agent 里面启动 koa 服务, 同时在koa服务里面启动 Webpack 编译服务<br /></li><li>挂载 Webpack 内存文件读取方法覆盖本地文件读取的逻辑<br /></li></ul><pre class=" language-javascript"><code class="language-javascript">app<span class="token punctuation">.</span>vue<span class="token punctuation">.</span>renderBundle <span class="token operator">=</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> context<span class="token punctuation">,</span> options<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> filePath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">isAbsolute</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">?</span> name <span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>view<span class="token punctuation">.</span>root<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> promise <span class="token operator">=</span> app<span class="token punctuation">.</span>webpack<span class="token punctuation">.</span>fileSystem<span class="token punctuation">.</span><span class="token function">readWebpackMemoryFile</span><span class="token punctuation">(</span>filePath<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">co</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> content <span class="token operator">=</span> <span class="token keyword">yield</span> promise<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>content<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`read webpack memory file[</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>filePath<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">] content is empty, please check if the file exists`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> renderBundle<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>vue<span class="token punctuation">)</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> context<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><ul><li>Worker 监听 Webpack 编译状态, 检测 Webpack 编译是否完成, 如果未完成, 显示 Webpack 编译 Loading, 如果编译完成, 自动打开浏览器<br /></li><li>Webpack 编译完成, Agent 发送消息给 Worker,  Worker 检测到编译完成, 自动打开浏览器, Egg 服务正式可用<br /></li></ul><h4 id="3-2-2-本地开发服务端渲染页面访问"><a href="#3-2-2-本地开发服务端渲染页面访问" class="headerlink" title="3.2.2 本地开发服务端渲染页面访问"></a>3.2.2 本地开发服务端渲染页面访问</h4><p><img src="https://cdn.yuque.com/yuque/0/2018/png/116733/1528521836714-be7dd0fe-f89d-4a50-af97-902f1d0fe50f.png#align=left&display=inline&height=548&originHeight=663&originWidth=1000&status=done&width=827" alt=""></p><ul><li><p>浏览器输入URL请求地址, 然后Egg接收到请求, 然后进入Controller<br /></p></li><li><p>Node层获取数据后(Node通过http/rpc方式调用Java后端API数据接口), 进入模板render流程<br /></p></li><li><p>进入render流程后, 通过worker进程通过调用 <code>app.messenger.sendToAgent</code> 发送文件名给Agent进程, 同时通过 <code>app.messenger.on</code> 启动监听监听agent发送过来的消<br /></p></li><li><p>Agent进程获取到文件名后, 从Webpack编译内存里面获取文件内容, 然后Agent 通过 <code>agent.messenger.sendToApp</code> 把文件内容发送给Worker进程<br /></p></li><li><p>Worker进程获取到内容以后, 进行Vue编译HTML, 编译成HTML后, 进入jss/css资源依赖流程<br /></p></li><li><p>如果启动代理模式(见easywebpack的setProxy),  HTML直接注入相对路径的JS/CSS, 如下:</p><p>   页面可以直接使用 <code>/public/client/js/vendor.js</code> 相对路径,  <code>/public/client/js/vendor.js</code> 由后端框架代理转发到webpack编译服务, 然后返回内容给后端框架, 这里涉及两个应用通信. 如下:<br /></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/public/client/css/home/android/home.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre></li><li><br />```javascript<script type="text/javascript" src="/public/client/js/vendor.js"></script><script type="text/javascript" src="/public/client/js/home.js"></script>```</li><li><p>如果非代理模式,  HTML直接注入必须是绝对路径的 JS/CSS , 如下:<br /></p><blockquote><p>页面必须使用 <code>http://127.0.0.1:9001/public/client/js/vendor.js</code> 绝对路径</p></blockquote></li><li><br />```html<link rel="stylesheet" href="http://127.0.0.1:9001/public/client/css/home/android/home.css">```</li><li><br />```javascript<script type="text/javascript" src="http://127.0.0.1:9001/public/client/js/vendor.js"></script><script type="text/javascript" src="http://127.0.0.1:9001/public/client/js/home.js"></script>```</li><li><p>其中 <a href="http://127.0.0.1:9001/" target="_blank" rel="noopener">http://127.0.0.1:9001</a> 是 Agent里面启动的Webpack编译服务地址, 与Egg应用地址是两回事</p></li><li><p>最后, 模板渲染完成, 服务器输出HTML内容给浏览器.<br /></p></li></ul><h3 id="4-发布模式构建流程和运行模式"><a href="#4-发布模式构建流程和运行模式" class="headerlink" title="4. 发布模式构建流程和运行模式"></a>4. 发布模式构建流程和运行模式</h3><ul><li>easywebpack 通过本地构建或者ci直接构建好服务端和客户端渲染文件到磁盘, 命令是 <code>easy build prod</code><br /></li><li>Egg render 直接读取本地文件, 然后渲染成 HTML.<br /></li><li>根据 <code>manfifest.json</code> 文件注入 jss/css 资源依赖注入.<br /></li><li>模板渲染完成, 服务器输出HTML内容给浏览器.<br /></li></ul><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ul><li>Egg + Vue：<a href="/egg-vue/build">/egg-vue/build</a></li><li>Egg + React ： <a href="/egg-react/build">/egg-react/build</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;h2 id=&quot;1-背景&quot;&gt;&lt;a href=&quot;#1-背景&quot; class=&quot;headerlink&quot; title=&quot;1. 背景&quot;&gt;&lt;/a&gt;1. 背景&lt;/h2&gt;&lt;p&gt;在
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>React Native 热更新实现</title>
    <link href="https://easyjs.cn/blog/qwywww/"/>
    <id>https://easyjs.cn/blog/qwywww/</id>
    <published>2020-05-31T09:43:53.000Z</published>
    <updated>2020-05-31T09:43:53.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>原文：<a href="https://hubcarl.github.io/blog/2016/09/15/react-native-update/" target="_blank" rel="noopener">https://hubcarl.github.io/blog/2016/09/15/react-native-update/</a></p></blockquote><p>React Native 动态更新实际效果如下</p><p><img src="https://raw.githubusercontent.com/hubcarl/hubcarl.github.io/master/_posts/images/react/react-native-update.gif#width=" alt=""></p><p><a href="https://raw.githubusercontent.com/hubcarl/hubcarl.github.io/master/_posts/images/react/react-native-update.apk" target="_blank" rel="noopener">React Native 热更新实现APK</a></p><p><img src="https://raw.githubusercontent.com/hubcarl/hubcarl.github.io/master/_posts/images/react/react-native-update-qrcode.png#width=" alt=""></p><p>我们知道, React Native所有的js文件都打包在一个jsbundle文件中，发布时也是打包到app里面,一般是放到asset目录.<br />如是猜想是不是可以从远程下载jsbundle文件覆盖asset的jsbundle. 查资料发现asset目录是只读的,该想法行不通.</p><p>在看React Native 启动入口时,看到通过是setBundleAssetName指定 asset文件的, 查看方法实现:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> ReactInstanceManager<span class="token punctuation">.</span>Builder <span class="token function">setBundleAssetName</span><span class="token punctuation">(</span>String bundleAssetName<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setJSBundleFile</span><span class="token punctuation">(</span>bundleAssetName <span class="token operator">==</span> null<span class="token operator">?</span>null<span class="token operator">:</span><span class="token string">"assets://"</span> <span class="token operator">+</span> bundleAssetName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>发现调用了setJSBundleFile方法,  而且该方法是public的, 也就是可以通过这个方法指定的jsbundle文件</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> ReactInstanceManager<span class="token punctuation">.</span>Builder <span class="token function">setJSBundleFile</span><span class="token punctuation">(</span>String jsBundleFile<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>mJSBundleFile <span class="token operator">=</span> jsBundleFile<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>mJSBundleLoader <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>可以设置了jsbundle文件, 那我们就可以把jsbundle文件放到sdcard, 经过测试发现, 确实可以读取sdcard jsbundle.</p><p>sdcar的文件开业读取了,那我们就可以把文件放到远程服务器, 启动后下载远程jsbundle文件到sdcard. 大概思路如下:</p><ol><li><p>我们打好包jsbundle文件放到<a href="https://raw.githubusercontent.com/hubcarl/smart-react-native-app/debug/app/src/main/assets/index.android.bundle" target="_blank" rel="noopener">远程服务器</a></p></li><li><p>启动React Native, 检查sdcard是否有jsbundle文件, 如果没有调用setBundleAssetName加载asset目录的jsbundle, 同时启动线程下载远程jsbundle文件到sdcard目录.</p></li><li><p>待下次启动时, sdcard是有jsbundle文件的, 加载的就是最新的jsbundle文件.</p></li></ol><p>实现代码如下:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String JS_BUNDLE_REACT_UPDATE_PATH <span class="token operator">=</span> Environment<span class="token punctuation">.</span><span class="token function">getExternalStorageDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> File<span class="token punctuation">.</span>separator <span class="token operator">+</span> <span class="token string">"react_native_update/debug.android.bundle"</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">iniReactRootView</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> isRelease<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ReactInstanceManager<span class="token punctuation">.</span>Builder builder <span class="token operator">=</span> ReactInstanceManager<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setApplication</span><span class="token punctuation">(</span><span class="token function">getApplication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setJSMainModuleName</span><span class="token punctuation">(</span><span class="token string">"debug.android.bundle"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">addPackage</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MainReactPackage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">addPackage</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Package</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setInitialLifecycleState</span><span class="token punctuation">(</span>LifecycleState<span class="token punctuation">.</span>RESUMED<span class="token punctuation">)</span><span class="token punctuation">;</span>        File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>JS_BUNDLE_LOCAL_PATH<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>isRelease <span class="token operator">&amp;&amp;</span> file <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            builder<span class="token punctuation">.</span><span class="token function">setJSBundleFile</span><span class="token punctuation">(</span>JS_BUNDLE_LOCAL_PATH<span class="token punctuation">)</span><span class="token punctuation">;</span>            Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"load bundle from local cache"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            builder<span class="token punctuation">.</span><span class="token function">setBundleAssetName</span><span class="token punctuation">(</span>JS_BUNDLE_LOCAL_FILE<span class="token punctuation">)</span><span class="token punctuation">;</span>            Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"load bundle from asset"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">updateJSBundle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        mReactRootView <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReactRootView</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mReactInstanceManager <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mReactRootView<span class="token punctuation">.</span><span class="token function">startReactApplication</span><span class="token punctuation">(</span>mReactInstanceManager<span class="token punctuation">,</span> <span class="token string">"SmartReactApp"</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>mReactRootView<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 从远程服务器下载新的jsbundle文件</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">updateJSBundle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        DownloadManager<span class="token punctuation">.</span>Request request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DownloadManager<span class="token punctuation">.</span>Request</span><span class="token punctuation">(</span>            Uri<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>JS_BUNDLE_REMOTE_URL<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        request<span class="token punctuation">.</span><span class="token function">setAllowedNetworkTypes</span><span class="token punctuation">(</span>DownloadManager<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>NETWORK_WIFI<span class="token punctuation">)</span><span class="token punctuation">;</span>        request<span class="token punctuation">.</span><span class="token function">setDestinationUri</span><span class="token punctuation">(</span>Uri<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"file://"</span> <span class="token operator">+</span> JS_BUNDLE_LOCAL_PATH<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        DownloadManager dm <span class="token operator">=</span> <span class="token punctuation">(</span>DownloadManager<span class="token punctuation">)</span> <span class="token function">getSystemService</span><span class="token punctuation">(</span>Context<span class="token punctuation">.</span>DOWNLOAD_SERVICE<span class="token punctuation">)</span><span class="token punctuation">;</span>        mDownloadId <span class="token operator">=</span> dm<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>        Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"start download remote js bundle file"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>经过测试发现, 确实可以实现动态更新, 但要下次启动才能看到最新的效果, 那有没有办法实现立即看到更新效果呢?</p><p>通过查看React Native 源码和<a href="https://github.com/fengjundev/React-Native-Remote-Update" target="_blank" rel="noopener">查阅资料</a>是可以实现的, 具体实现如下:</p><p>为了在运行中重新加载bundle文件，查看ReactInstanceManager的源码，找到如下方法：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">recreateReactContextInBackground</span><span class="token punctuation">(</span>JavaScriptExecutor jsExecutor<span class="token punctuation">,</span> JSBundleLoader jsBundleLoader<span class="token punctuation">)</span> <span class="token punctuation">{</span>    UiThreadUtil<span class="token punctuation">.</span><span class="token function">assertOnUiThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ReactContextInitParams initParams <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReactContextInitParams</span><span class="token punctuation">(</span>jsExecutor<span class="token punctuation">,</span> jsBundleLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mIsContextInitAsyncTaskRunning<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// No background task to create react context is currently running, create and execute one.</span>      ReactContextInitAsyncTask initTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReactContextInitAsyncTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      initTask<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>initParams<span class="token punctuation">)</span><span class="token punctuation">;</span>      mIsContextInitAsyncTaskRunning <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// Background task is currently running, queue up most recent init params to recreate context</span>      <span class="token comment" spellcheck="true">// once task completes.</span>      mPendingReactContextInitParams <span class="token operator">=</span> initParams<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>虽然这个方法是private的，但是可以通过反射调用,下面是0.29版本的实现(上面React-Native-Remote-Update项目实现React Native版本旧了,直接拷贝反射参数有问题)</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">onJSBundleLoadedFromServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>JS_BUNDLE_LOCAL_PATH<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>file <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token operator">!</span>file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"js bundle file download error, check URL or network state"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"js bundle file file success, reload js bundle"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span>UpdateReactActivity<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"download bundle complete"</span><span class="token punctuation">,</span>             Toast<span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> RIManagerClazz <span class="token operator">=</span> mReactInstanceManager<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Field f <span class="token operator">=</span> RIManagerClazz<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"mJSCConfig"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            f<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            JSCConfig jscConfig <span class="token operator">=</span> <span class="token punctuation">(</span>JSCConfig<span class="token punctuation">)</span>f<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>mReactInstanceManager<span class="token punctuation">)</span><span class="token punctuation">;</span>            Method method <span class="token operator">=</span> RIManagerClazz<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"recreateReactContextInBackground"</span><span class="token punctuation">,</span>                    com<span class="token punctuation">.</span>facebook<span class="token punctuation">.</span>react<span class="token punctuation">.</span>cxxbridge<span class="token punctuation">.</span>JavaScriptExecutor<span class="token punctuation">.</span>Factory<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>                    com<span class="token punctuation">.</span>facebook<span class="token punctuation">.</span>react<span class="token punctuation">.</span>cxxbridge<span class="token punctuation">.</span>JSBundleLoader<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            method<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>mReactInstanceManager<span class="token punctuation">,</span>                    <span class="token keyword">new</span> <span class="token class-name">com<span class="token punctuation">.</span>facebook<span class="token punctuation">.</span>react<span class="token punctuation">.</span>cxxbridge<span class="token punctuation">.</span>JSCJavaScriptExecutor<span class="token punctuation">.</span>Factory</span><span class="token punctuation">(</span>jscConfig<span class="token punctuation">.</span><span class="token function">getConfigMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    com<span class="token punctuation">.</span>facebook<span class="token punctuation">.</span>react<span class="token punctuation">.</span>cxxbridge<span class="token punctuation">.</span>JSBundleLoader<span class="token punctuation">.</span><span class="token function">createFileLoader</span><span class="token punctuation">(</span>                        <span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> JS_BUNDLE_LOCAL_PATH<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchMethodException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalAccessException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InvocationTargetException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalArgumentException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchFieldException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>通过监听下载成功事件, 然后调用onJSBundleLoadedFromServer接口就可以看到立即更新的效果.</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> CompleteReceiver mDownloadCompleteReceiver<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">long</span> mDownloadId<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">initDownloadManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   mDownloadCompleteReceiver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CompleteReceiver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">registerReceiver</span><span class="token punctuation">(</span>mDownloadCompleteReceiver<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">IntentFilter</span><span class="token punctuation">(</span>DownloadManager<span class="token punctuation">.</span>ACTION_DOWNLOAD_COMPLETE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">CompleteReceiver</span> <span class="token keyword">extends</span> <span class="token class-name">BroadcastReceiver</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onReceive</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> Intent intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">long</span> completeDownloadId <span class="token operator">=</span> intent<span class="token punctuation">.</span><span class="token function">getLongExtra</span><span class="token punctuation">(</span>DownloadManager<span class="token punctuation">.</span>EXTRA_DOWNLOAD_ID<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>completeDownloadId <span class="token operator">==</span> mDownloadId<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">onJSBundleLoadedFromServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>尝试以后果然可以更新, 当时心情非常好~  可是……,  后面继续实现项目时发现,  动态更新后, 本地图片始终不显示, 远程图片可以.</p><p>接下来查看React Native, jsbundle 源码和查看资料,  终于寻的一点蛛丝马迹, 大概的意思如下:</p><ol><li><p>如果bundle在sd卡【 比如bundle在file://sdcard/react_native_update/index.android.bundle 那么图片目录在file://sdcard/react_native_update/drawable-mdpi】</p></li><li><p>如果你的bundle在assets里，图片资源要放到res文件夹里,例如res/drawable-mdpi</p></li></ol><p>接下来按照该说法进行了实验, 发现确实可以. 当界面刷新时,心情格外好! 下面是详细代码实现(部分代码参考React-Native-Remote-Update项目,在这里直接引用):</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>react<span class="token punctuation">.</span>smart<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>app<span class="token punctuation">.</span>Activity<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>app<span class="token punctuation">.</span>DownloadManager<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>content<span class="token punctuation">.</span>BroadcastReceiver<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>content<span class="token punctuation">.</span>Context<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>content<span class="token punctuation">.</span>Intent<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>content<span class="token punctuation">.</span>IntentFilter<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>net<span class="token punctuation">.</span>Uri<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Bundle<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Environment<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Log<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>view<span class="token punctuation">.</span>KeyEvent<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>Toast<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>facebook<span class="token punctuation">.</span>react<span class="token punctuation">.</span>JSCConfig<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>facebook<span class="token punctuation">.</span>react<span class="token punctuation">.</span>LifecycleState<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>facebook<span class="token punctuation">.</span>react<span class="token punctuation">.</span>ReactInstanceManager<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>facebook<span class="token punctuation">.</span>react<span class="token punctuation">.</span>ReactRootView<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>facebook<span class="token punctuation">.</span>react<span class="token punctuation">.</span>modules<span class="token punctuation">.</span>core<span class="token punctuation">.</span>DefaultHardwareBackBtnHandler<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>facebook<span class="token punctuation">.</span>react<span class="token punctuation">.</span>shell<span class="token punctuation">.</span>MainReactPackage<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>react<span class="token punctuation">.</span>smart<span class="token punctuation">.</span>componet<span class="token punctuation">.</span>Package<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>react<span class="token punctuation">.</span>smart<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>FileAssetUtils<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Field<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>InvocationTargetException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Created by sky on 16/7/15. * https://github.com/hubcarl */</span><span class="token comment" spellcheck="true">/** * Created by sky on 16/9/4. * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UpdateReactActivity</span> <span class="token keyword">extends</span> <span class="token class-name">Activity</span> <span class="token keyword">implements</span> <span class="token class-name">DefaultHardwareBackBtnHandler</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String TAG <span class="token operator">=</span> <span class="token string">"UpdateReactActivity"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String JS_BUNDLE_REMOTE_APP<span class="token operator">=</span>     <span class="token string">"https://raw.githubusercontent.com/hubcarl/smart-react-native-app"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String JS_BUNDLE_REMOTE_URL <span class="token operator">=</span> JS_BUNDLE_REMOTE_APP     <span class="token operator">+</span> <span class="token string">"/debug/app/src/main/assets/index.android.bundle"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String JS_BUNDLE_LOCAL_FILE <span class="token operator">=</span> <span class="token string">"debug.android.bundle"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String JS_BUNDLE_REACT_UPDATE_PATH <span class="token operator">=</span>     Environment<span class="token punctuation">.</span><span class="token function">getExternalStorageDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> File<span class="token punctuation">.</span>separator <span class="token operator">+</span> <span class="token string">"react_native_update"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String JS_BUNDLE_LOCAL_PATH <span class="token operator">=</span> JS_BUNDLE_REACT_UPDATE_PATH    <span class="token operator">+</span> File<span class="token punctuation">.</span>separator <span class="token operator">+</span> JS_BUNDLE_LOCAL_FILE<span class="token punctuation">;</span>    <span class="token keyword">private</span> ReactInstanceManager mReactInstanceManager<span class="token punctuation">;</span>    <span class="token keyword">private</span> ReactRootView mReactRootView<span class="token punctuation">;</span>    <span class="token keyword">private</span> CompleteReceiver mDownloadCompleteReceiver<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> mDownloadId<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">iniReactRootView</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">initDownloadManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">updateJSBundle</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 如果bundle在sd卡【 比如bundle在file://sdcard/react_native_update/index.android.bundle </span>    <span class="token comment" spellcheck="true">// 那么图片目录在file://sdcard/react_native_update/drawable-mdpi】</span>    <span class="token comment" spellcheck="true">// 如果你的bundle在assets里，图片资源要放到res文件夹里,例如res/drawable-mdpi</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">iniReactRootView</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> isRelease<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ReactInstanceManager<span class="token punctuation">.</span>Builder builder <span class="token operator">=</span> ReactInstanceManager<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setApplication</span><span class="token punctuation">(</span><span class="token function">getApplication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setJSMainModuleName</span><span class="token punctuation">(</span>JS_BUNDLE_LOCAL_FILE<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">addPackage</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MainReactPackage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">addPackage</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Package</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setInitialLifecycleState</span><span class="token punctuation">(</span>LifecycleState<span class="token punctuation">.</span>RESUMED<span class="token punctuation">)</span><span class="token punctuation">;</span>        File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>JS_BUNDLE_LOCAL_PATH<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>isRelease <span class="token operator">&amp;&amp;</span> file <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            builder<span class="token punctuation">.</span><span class="token function">setJSBundleFile</span><span class="token punctuation">(</span>JS_BUNDLE_LOCAL_PATH<span class="token punctuation">)</span><span class="token punctuation">;</span>            Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"load bundle from local cache"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            builder<span class="token punctuation">.</span><span class="token function">setBundleAssetName</span><span class="token punctuation">(</span>JS_BUNDLE_LOCAL_FILE<span class="token punctuation">)</span><span class="token punctuation">;</span>            Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"load bundle from asset"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        mReactRootView <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReactRootView</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mReactInstanceManager <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mReactRootView<span class="token punctuation">.</span><span class="token function">startReactApplication</span><span class="token punctuation">(</span>mReactInstanceManager<span class="token punctuation">,</span> <span class="token string">"SmartReactApp"</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>mReactRootView<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">updateJSBundle</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> isRelease<span class="token punctuation">)</span> <span class="token punctuation">{</span>        File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>JS_BUNDLE_LOCAL_PATH<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>isRelease <span class="token operator">&amp;&amp;</span> file <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"new bundle exists !"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        File rootDir <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>JS_BUNDLE_REACT_UPDATE_PATH<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>rootDir <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>rootDir<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            rootDir<span class="token punctuation">.</span><span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        File res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>JS_BUNDLE_REACT_UPDATE_PATH <span class="token operator">+</span> File<span class="token punctuation">.</span>separator <span class="token operator">+</span> <span class="token string">"drawable-mdpi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>res<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        FileAssetUtils<span class="token punctuation">.</span><span class="token function">copyAssets</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"drawable-mdpi"</span><span class="token punctuation">,</span> JS_BUNDLE_REACT_UPDATE_PATH<span class="token punctuation">)</span><span class="token punctuation">;</span>        DownloadManager<span class="token punctuation">.</span>Request request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DownloadManager<span class="token punctuation">.</span>Request</span><span class="token punctuation">(</span>Uri<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>JS_BUNDLE_REMOTE_URL<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        request<span class="token punctuation">.</span><span class="token function">setAllowedNetworkTypes</span><span class="token punctuation">(</span>DownloadManager<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>NETWORK_WIFI<span class="token punctuation">)</span><span class="token punctuation">;</span>        request<span class="token punctuation">.</span><span class="token function">setDestinationUri</span><span class="token punctuation">(</span>Uri<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"file://"</span> <span class="token operator">+</span> JS_BUNDLE_LOCAL_PATH<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        DownloadManager dm <span class="token operator">=</span> <span class="token punctuation">(</span>DownloadManager<span class="token punctuation">)</span> <span class="token function">getSystemService</span><span class="token punctuation">(</span>Context<span class="token punctuation">.</span>DOWNLOAD_SERVICE<span class="token punctuation">)</span><span class="token punctuation">;</span>        mDownloadId <span class="token operator">=</span> dm<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>        Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"start download remote js bundle file"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">initDownloadManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        mDownloadCompleteReceiver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CompleteReceiver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">registerReceiver</span><span class="token punctuation">(</span>mDownloadCompleteReceiver<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">IntentFilter</span><span class="token punctuation">(</span>DownloadManager<span class="token punctuation">.</span>ACTION_DOWNLOAD_COMPLETE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">CompleteReceiver</span> <span class="token keyword">extends</span> <span class="token class-name">BroadcastReceiver</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onReceive</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> Intent intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">long</span> completeDownloadId <span class="token operator">=</span> intent<span class="token punctuation">.</span><span class="token function">getLongExtra</span><span class="token punctuation">(</span>DownloadManager<span class="token punctuation">.</span>EXTRA_DOWNLOAD_ID<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>completeDownloadId <span class="token operator">==</span> mDownloadId<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">onJSBundleLoadedFromServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">onJSBundleLoadedFromServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>JS_BUNDLE_LOCAL_PATH<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>file <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token operator">!</span>file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"js bundle file download error, check URL or network state"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"js bundle file file success, reload js bundle"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span>UpdateReactActivity<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"download bundle complete"</span><span class="token punctuation">,</span> Toast<span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> RIManagerClazz <span class="token operator">=</span> mReactInstanceManager<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Field f <span class="token operator">=</span> RIManagerClazz<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"mJSCConfig"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            f<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            JSCConfig jscConfig <span class="token operator">=</span> <span class="token punctuation">(</span>JSCConfig<span class="token punctuation">)</span>f<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>mReactInstanceManager<span class="token punctuation">)</span><span class="token punctuation">;</span>            Method method <span class="token operator">=</span> RIManagerClazz<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"recreateReactContextInBackground"</span><span class="token punctuation">,</span>                    com<span class="token punctuation">.</span>facebook<span class="token punctuation">.</span>react<span class="token punctuation">.</span>cxxbridge<span class="token punctuation">.</span>JavaScriptExecutor<span class="token punctuation">.</span>Factory<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>                    com<span class="token punctuation">.</span>facebook<span class="token punctuation">.</span>react<span class="token punctuation">.</span>cxxbridge<span class="token punctuation">.</span>JSBundleLoader<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            method<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>mReactInstanceManager<span class="token punctuation">,</span>                    <span class="token keyword">new</span> <span class="token class-name">com<span class="token punctuation">.</span>facebook<span class="token punctuation">.</span>react<span class="token punctuation">.</span>cxxbridge<span class="token punctuation">.</span>JSCJavaScriptExecutor<span class="token punctuation">.</span>Factory</span><span class="token punctuation">(</span>                        jscConfig<span class="token punctuation">.</span><span class="token function">getConfigMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">)</span><span class="token punctuation">,</span>                    com<span class="token punctuation">.</span>facebook<span class="token punctuation">.</span>react<span class="token punctuation">.</span>cxxbridge<span class="token punctuation">.</span>JSBundleLoader<span class="token punctuation">.</span><span class="token function">createFileLoader</span><span class="token punctuation">(</span>                        <span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                        JS_BUNDLE_LOCAL_PATH<span class="token punctuation">)</span>                    <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchMethodException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalAccessException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InvocationTargetException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalArgumentException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchFieldException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">unregisterReceiver</span><span class="token punctuation">(</span>mDownloadCompleteReceiver<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onKeyUp</span><span class="token punctuation">(</span><span class="token keyword">int</span> keyCode<span class="token punctuation">,</span> KeyEvent event<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>keyCode <span class="token operator">==</span> KeyEvent<span class="token punctuation">.</span>KEYCODE_MENU <span class="token operator">&amp;&amp;</span> mReactInstanceManager <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            mReactInstanceManager<span class="token punctuation">.</span><span class="token function">showDevOptionsDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onKeyUp</span><span class="token punctuation">(</span>keyCode<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onBackPressed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mReactInstanceManager <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            mReactInstanceManager<span class="token punctuation">.</span><span class="token function">onBackPressed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onBackPressed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">invokeDefaultOnBackPressed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onBackPressed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onPause</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onPause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onResume</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onResume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>asset资源文件拷贝到sdcard, 当然实际实现时, 资源文件和jsbundle文件可以都应该放到远程服务器.</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>react<span class="token punctuation">.</span>smart<span class="token punctuation">.</span>utils<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>content<span class="token punctuation">.</span>Context<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>content<span class="token punctuation">.</span>res<span class="token punctuation">.</span>AssetManager<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Log<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Created by sky on 16/9/19. */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileAssetUtils</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">copyAssets</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> String src<span class="token punctuation">,</span> String dist<span class="token punctuation">)</span> <span class="token punctuation">{</span>        AssetManager assetManager <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getAssets</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> files <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            files <span class="token operator">=</span> assetManager<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token string">"tag"</span><span class="token punctuation">,</span> <span class="token string">"Failed to get asset file list."</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>String filename <span class="token operator">:</span> files<span class="token punctuation">)</span> <span class="token punctuation">{</span>            InputStream in <span class="token operator">=</span> null<span class="token punctuation">;</span>            OutputStream out <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                in <span class="token operator">=</span> assetManager<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>src <span class="token operator">+</span> File<span class="token punctuation">.</span>separator <span class="token operator">+</span> filename<span class="token punctuation">)</span><span class="token punctuation">;</span>                File outFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>dist <span class="token operator">+</span> File<span class="token punctuation">.</span>separator <span class="token operator">+</span> src<span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">;</span>                out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>outFile<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">copyFile</span><span class="token punctuation">(</span>in<span class="token punctuation">,</span> out<span class="token punctuation">)</span><span class="token punctuation">;</span>                in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                in <span class="token operator">=</span> null<span class="token punctuation">;</span>                out<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                out <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>IOException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token string">"tag"</span><span class="token punctuation">,</span> <span class="token string">"Failed to copy asset file: "</span> <span class="token operator">+</span> filename<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">copyFile</span><span class="token punctuation">(</span>InputStream in<span class="token punctuation">,</span> OutputStream out<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> read<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>read <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> read<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>最后附上github项目地址:<a href="https://github.com/hubcarl/smart-react-native-app" target="_blank" rel="noopener">https://github.com/hubcarl/smart-react-native-app</a>,欢迎follow!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;原文：&lt;a href=&quot;https://hubcarl.github.io/blog/2016/09/15/react-native-update/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://hubcarl.g
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>React Native Android源码解读和交互原理分析</title>
    <link href="https://easyjs.cn/blog/rh45zo/"/>
    <id>https://easyjs.cn/blog/rh45zo/</id>
    <published>2020-05-31T09:43:53.000Z</published>
    <updated>2020-05-31T09:43:53.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>原文：<a href="https://hubcarl.github.io/blog/2016/08/28/react-native-js/" target="_blank" rel="noopener">https://hubcarl.github.io/blog/2016/08/28/react-native-js/</a></p></blockquote><p>首先来看一下一张完整Native与JavaScript交互原理图(来自网络，现找不到原地址了):</p><p><img src="https://raw.githubusercontent.com/hubcarl/hubcarl.github.io/master/_posts/images/react/rn-bridge.png#width=" alt=""></p><p>在 React Native App中，在应用启动时根据 ReactPackage 会自动生成 JavaScriptModuleRegistry和NativeModuleRegistry两份模块配置表，包含系统CoreModulesPackage, 基础模块MainReactPackage以及自定义模块。Java端与JavaScript端持有相同的模块配置表，标识为可识别为Native模块或JavaScript模块都是通过实现相应接口，并将实例添加ReactPackage的CreactModules方法即可。</p><h2 id="一-Native启动React-Application"><a href="#一-Native启动React-Application" class="headerlink" title="一. Native启动React Application"></a>一. Native启动React Application</h2><p><img src="https://raw.githubusercontent.com/hubcarl/hubcarl.github.io/master/_posts/images/react/RN-Native-Start.png#width=" alt=""></p><p>JavaScript模块extends JavascriptModule, JavaScript模块通过java动态代理实现调用Js模块。下例 AppRegistry.java 为在加载完 Jsbundle 后，Native 去启动 React Application 的总入口，appkey 为应用的 ID。映射每个 JavascriptModule 的信息保存在 JavaScriptModuleRegistration 中，统一由 JavaScriptModuleRegistry统一管理。</p><h3 id="1-setupReactContext"><a href="#1-setupReactContext" class="headerlink" title="1. setupReactContext"></a>1. setupReactContext</h3><p>ReactInstanceManagerImpl.java 中 ReactContextInitAsyncTask.setupReactContext() 方法中如下调用：</p><pre class=" language-java"><code class="language-java"><span class="token punctuation">(</span><span class="token punctuation">(</span>AppRegistry<span class="token punctuation">)</span>catalystInstance<span class="token punctuation">.</span><span class="token function">getJSModule</span><span class="token punctuation">(</span>AppRegistry<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">runApplication</span><span class="token punctuation">(</span>appkey<span class="token punctuation">,</span> appParams<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="2-Java动态代理"><a href="#2-Java动态代理" class="headerlink" title="2. Java动态代理"></a>2. Java动态代理</h3><p>JS模块通过java动态代理实现调用JS方法,java动态代理通过实现InvocationHandler接口，然后通过Proxy.newProxyInstance()实现. 方法有三个参数：</p><ul><li><p>类加载器(Class Loader)</p></li><li><p>需要实现的接口数组</p></li><li><p>所有动态代理类的方法调用，都会交由InvocationHandler接口实现类里的invoke()方法去处理。这是动态代理的关键所在。</p></li></ul><pre class=" language-java"><code class="language-java"><span class="token punctuation">(</span>JavaScriptModule<span class="token punctuation">)</span>Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>moduleInterface<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>moduleInterface<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">JavaScriptModuleRegistry<span class="token punctuation">.</span>JavaScriptModuleInvocationHandler</span><span class="token punctuation">(</span>  executorToken<span class="token punctuation">,</span> instance<span class="token punctuation">,</span> registration<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="3-JavaScript模块-继承JavascriptModule实现自定义JavaScript模块。"><a href="#3-JavaScript模块-继承JavascriptModule实现自定义JavaScript模块。" class="headerlink" title="3.JavaScript模块:继承JavascriptModule实现自定义JavaScript模块。"></a>3.JavaScript模块:继承JavascriptModule实现自定义JavaScript模块。</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AppRegistry</span> <span class="token keyword">extends</span> <span class="token class-name">JavaScriptModule</span> <span class="token punctuation">{</span>  <span class="token keyword">void</span> <span class="token function">runApplication</span><span class="token punctuation">(</span>String appKey<span class="token punctuation">,</span> WritableMap appParameters<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">unmountApplicationComponentAtRootTag</span><span class="token punctuation">(</span><span class="token keyword">int</span> rootNodeTag<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span></code></pre><h3 id="4-实现-InvocationHandler接口，实现invoke方法，invoke-调用-callFunction实现js的调用。"><a href="#4-实现-InvocationHandler接口，实现invoke方法，invoke-调用-callFunction实现js的调用。" class="headerlink" title="4.实现 InvocationHandler接口，实现invoke方法，invoke 调用 callFunction实现js的调用。"></a>4.实现 InvocationHandler接口，实现invoke方法，invoke 调用 callFunction实现js的调用。</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">JavaScriptModuleInvocationHandler</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ExecutorToken executorToken <span class="token operator">=</span> <span class="token punctuation">(</span>ExecutorToken<span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>mExecutorToken<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>executorToken <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            FLog<span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span><span class="token string">"React"</span><span class="token punctuation">,</span> <span class="token string">"Dropping JS call, ExecutorToken went away..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            String tracingName <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mModuleRegistration<span class="token punctuation">.</span><span class="token function">getTracingName</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>            WritableNativeArray jsArgs <span class="token operator">=</span> args <span class="token operator">!=</span> null<span class="token operator">?</span>Arguments<span class="token punctuation">.</span><span class="token function">fromJavaArgs</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">new</span> <span class="token class-name">WritableNativeArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>mCatalystInstance<span class="token punctuation">.</span><span class="token function">callFunction</span><span class="token punctuation">(</span>executorToken<span class="token punctuation">,</span>             <span class="token keyword">this</span><span class="token punctuation">.</span>mModuleRegistration<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> jsArgs<span class="token punctuation">,</span> tracingName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="5-callFunction-JNI调用流程详细流程"><a href="#5-callFunction-JNI调用流程详细流程" class="headerlink" title="5.callFunction JNI调用流程详细流程:"></a>5.callFunction JNI调用流程详细流程:</h3><h4 id="1-OnLoad-cpp"><a href="#1-OnLoad-cpp" class="headerlink" title="1.OnLoad.cpp:"></a>1.OnLoad.cpp:</h4><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">callFunction</span><span class="token punctuation">(</span>JNIEnv<span class="token operator">*</span> env<span class="token punctuation">,</span> jobject obj<span class="token punctuation">,</span> JExecutorToken<span class="token operator">::</span>jhybridobject jExecutorToken<span class="token punctuation">,</span> jstring module<span class="token punctuation">,</span> jstring method<span class="token punctuation">,</span></code></pre><h4 id="2-Bridge-cpp"><a href="#2-Bridge-cpp" class="headerlink" title="2.Bridge.cpp"></a>2.Bridge.cpp</h4><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">void</span> Bridge<span class="token operator">::</span><span class="token function">callFunction</span><span class="token punctuation">(</span>ExecutorToken executorToken<span class="token punctuation">,</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> moduleId<span class="token punctuation">,</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> methodId<span class="token punctuation">,</span><span class="token keyword">const</span> folly<span class="token operator">::</span>dynamic<span class="token operator">&amp;</span> arguments<span class="token punctuation">,</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> tracingName<span class="token punctuation">)</span></code></pre><h4 id="3-JSCExecutor-cpp"><a href="#3-JSCExecutor-cpp" class="headerlink" title="3.JSCExecutor.cpp"></a>3.JSCExecutor.cpp</h4><pre class=" language-cpp"><code class="language-cpp"><span class="token number">1</span><span class="token punctuation">.</span> <span class="token keyword">void</span> JSCExecutor<span class="token operator">::</span><span class="token function">callFunction</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> moduleId<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> methodId<span class="token punctuation">,</span> <span class="token keyword">const</span> folly<span class="token operator">::</span>dynamic<span class="token operator">&amp;</span> arguments<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 确保fbBatchedBridge 有定义</span>    <span class="token number">2</span><span class="token punctuation">.</span> <span class="token keyword">bool</span> JSCExecutor<span class="token operator">::</span><span class="token function">ensureBatchedBridgeObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 执行fbBatchedBridge中js方法</span>    <span class="token number">3</span><span class="token punctuation">.</span> <span class="token keyword">void</span> JSCExecutor<span class="token operator">::</span><span class="token function">callFunction</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> moduleId<span class="token punctuation">,</span>     <span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> methodId<span class="token punctuation">,</span> <span class="token keyword">const</span> folly<span class="token operator">::</span>dynamic<span class="token operator">&amp;</span> arguments<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token number">4</span><span class="token punctuation">.</span> 执行js  fbBatchedBridge<span class="token punctuation">.</span>callFunctionReturnFlushedQueue 返回queue队列    <span class="token number">5</span><span class="token punctuation">.</span> 执行Bridge<span class="token punctuation">.</span>cpp <span class="token operator">:</span> <span class="token keyword">void</span> Bridge<span class="token operator">::</span><span class="token function">callNativeModules</span><span class="token punctuation">(</span>JSExecutor<span class="token operator">&amp;</span> executor<span class="token punctuation">,</span>     <span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> callJSON<span class="token punctuation">,</span> <span class="token keyword">bool</span> isEndOfBatch<span class="token punctuation">)</span>    <span class="token number">6</span><span class="token punctuation">.</span> 执行 m_callback<span class="token operator">-</span><span class="token operator">></span><span class="token function">onCallNativeModules</span><span class="token punctuation">(</span><span class="token function">getTokenForExecutor</span><span class="token punctuation">(</span>executor<span class="token punctuation">)</span><span class="token punctuation">,</span> callJSON<span class="token punctuation">,</span> isEndOfBatch<span class="token punctuation">)</span><span class="token punctuation">;</span>        m_callback 为OnLoad<span class="token punctuation">.</span>cpp 中的 <span class="token keyword">class</span> <span class="token class-name">PlatformBridgeCallback</span> <span class="token operator">:</span> <span class="token keyword">public</span> BridgeCallback        相当于执行 PlatformBridgeCallback<span class="token punctuation">.</span>onCallNativeModules    <span class="token number">7</span><span class="token punctuation">.</span> 最后调用 makeJavaCall方法调用java方法    <span class="token number">8</span><span class="token punctuation">.</span> OnLoad<span class="token punctuation">.</span>cpp 中 makeJavaCall 定义<span class="token punctuation">,</span>  c<span class="token operator">++</span>通过CallVoidMethod调用java非静态方法：    gCallbackMethod 定义：    jclass <span class="token class-name">callbackClass</span> <span class="token operator">=</span> env<span class="token operator">-</span><span class="token operator">></span><span class="token function">FindClass</span><span class="token punctuation">(</span><span class="token string">"com/facebook/react/bridge/ReactCallback"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    bridge<span class="token operator">::</span>gCallbackMethod <span class="token operator">=</span> env<span class="token operator">-</span><span class="token operator">></span><span class="token function">GetMethodID</span><span class="token punctuation">(</span>callbackClass<span class="token punctuation">,</span>     <span class="token string">"call"</span><span class="token punctuation">,</span> <span class="token string">"(Lcom/facebook/react/bridge/ExecutorToken;IILcom/facebook/react/bridge/ReadableNativeArray;)V"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">makeJavaCall</span><span class="token punctuation">(</span>JNIEnv<span class="token operator">*</span> env<span class="token punctuation">,</span> ExecutorToken executorToken<span class="token punctuation">,</span>   jobject callback<span class="token punctuation">,</span> <span class="token keyword">const</span> MethodCall<span class="token operator">&amp;</span> call<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">auto</span> newArray <span class="token operator">=</span> ReadableNativeArray<span class="token operator">::</span><span class="token function">newObjectCxxArgs</span><span class="token punctuation">(</span>std<span class="token operator">::</span><span class="token function">move</span><span class="token punctuation">(</span>call<span class="token punctuation">.</span>arguments<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      env<span class="token operator">-</span><span class="token operator">></span><span class="token function">CallVoidMethod</span><span class="token punctuation">(</span>          callback<span class="token punctuation">,</span>          gCallbackMethod<span class="token punctuation">,</span>          <span class="token keyword">static_cast</span><span class="token operator">&lt;</span>JExecutorTokenHolder<span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span>        executorToken<span class="token punctuation">.</span><span class="token function">getPlatformExecutorToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getJobj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          call<span class="token punctuation">.</span>moduleId<span class="token punctuation">,</span>          call<span class="token punctuation">.</span>methodId<span class="token punctuation">,</span>          newArray<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="二-JavaScript启动流程"><a href="#二-JavaScript启动流程" class="headerlink" title="二. JavaScript启动流程"></a>二. JavaScript启动流程</h2><p><img src="https://raw.githubusercontent.com/hubcarl/hubcarl.github.io/master/_posts/images/react/RN-JS-Start.png#width=" alt=""></p><h3 id="JavaScript初始化"><a href="#JavaScript初始化" class="headerlink" title="JavaScript初始化"></a>JavaScript初始化</h3><p>在JSBundle.js文件底部有两个require调用：</p><p>require(191); // require(‘InitializeJavaScriptAppEngine’)</p><pre><code>InitializeJavaScriptAppEngine 初始化，主要包括Map,Set,XHR, Timer, Log,Fetch,WebSocket PolyfillRCTDeviceEventEmitter,RCTNativeAppEventEmitter,PerformanceLogger初始化</code></pre><p>require(0); // require(‘SmartRectNativeApp/debug.android.js’)</p><pre><code>JS启动入口,其中会引用require(&#39;react&#39;) 和 require(&#39;react－native&#39;)ReactNative.AppRegistry.registerComponent(&#39;SmartDebugReactApp&#39;, function () {    return SmartRectNativeApp;});</code></pre><p>下面具体梳理一下require(0)后启动流程</p><h4 id="1-BatchedBridge-MessageQueue-NativeModules初始化"><a href="#1-BatchedBridge-MessageQueue-NativeModules初始化" class="headerlink" title="1. BatchedBridge, MessageQueue, NativeModules初始化"></a>1. BatchedBridge, MessageQueue, NativeModules初始化</h4><p>通过MessageQueue定义RemoteModules对象</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">MessageQueue</span><span class="token punctuation">(</span>configProvider<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">lazyProperty</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">'RemoteModules'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> _configProvider <span class="token operator">=</span><span class="token function">configProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> remoteModuleConfig <span class="token operator">=</span> _configProvider<span class="token punctuation">.</span>remoteModuleConfig<span class="token punctuation">;</span>      <span class="token keyword">var</span> modulesConfig <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_genModulesConfig</span><span class="token punctuation">(</span>remoteModuleConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 初始化所有JS调用Native模块</span>      <span class="token keyword">var</span> modules <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_genModules</span><span class="token punctuation">(</span>modulesConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> modules<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><h4 id="2-Bridge全局配置表"><a href="#2-Bridge全局配置表" class="headerlink" title="2. Bridge全局配置表"></a>2. Bridge全局配置表</h4><p>__fbBatchedBridgeConfig 由Native层注入的全局对象，数据格式如下,包含remoteModuleConfig节点。节点信息包括：moduleName, methodId,  methodName,  args。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> BatchedBridge <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MessageQueue</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> global<span class="token punctuation">.</span>__fbBatchedBridgeConfig<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>    <span class="token string">"remoteModuleConfig"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"FrescoModule"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token string">"moduleID"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token string">"supportsWebWorkers"</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        <span class="token string">"methods"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">"RNIntentModule"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token string">"moduleID"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token string">"supportsWebWorkers"</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        <span class="token string">"methods"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">"openThirdReactActivity"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>          <span class="token string">"methodID"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>            <span class="token string">"type"</span><span class="token punctuation">:</span> <span class="token string">"remote"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token string">"openSecondReactActivity"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>          <span class="token string">"methodID"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>            <span class="token string">"type"</span><span class="token punctuation">:</span> <span class="token string">"remote"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token string">"getDataFromIntent"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>          <span class="token string">"methodID"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>            <span class="token string">"type"</span><span class="token punctuation">:</span> <span class="token string">"remote"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token string">"finishActivity"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>          <span class="token string">"methodID"</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>            <span class="token string">"type"</span><span class="token punctuation">:</span> <span class="token string">"remote"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token string">"backActivity"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>          <span class="token string">"methodID"</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span>            <span class="token string">"type"</span><span class="token punctuation">:</span> <span class="token string">"remote"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token string">"openSecondActivity"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>          <span class="token string">"methodID"</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span>            <span class="token string">"type"</span><span class="token punctuation">:</span> <span class="token string">"remote"</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><h4 id="3-NativeModules实现"><a href="#3-NativeModules实现" class="headerlink" title="3. NativeModules实现"></a>3. NativeModules实现</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token function">define</span><span class="token punctuation">(</span><span class="token number">60</span> <span class="token comment" spellcheck="true">/* NativeModules */</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>global<span class="token punctuation">,</span> require<span class="token punctuation">,</span> module<span class="token punctuation">,</span> exports<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token string">'use strict'</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> BatchedBridge <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token number">61</span> <span class="token comment" spellcheck="true">/* BatchedBridge */</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> RemoteModules <span class="token operator">=</span> BatchedBridge<span class="token punctuation">.</span>RemoteModules<span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">normalizePrefix</span><span class="token punctuation">(</span>moduleName<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> moduleName<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/^(RCT|RK)/</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>RemoteModules<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>moduleName<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> strippedName <span class="token operator">=</span> <span class="token function">normalizePrefix</span><span class="token punctuation">(</span>moduleName<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>RemoteModules<span class="token punctuation">[</span><span class="token string">'RCT'</span> <span class="token operator">+</span> strippedName<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> RemoteModules<span class="token punctuation">[</span><span class="token string">'RK'</span> <span class="token operator">+</span> strippedName<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>          <span class="token string">'Module cannot be registered as both RCT and RK: '</span> <span class="token operator">+</span> moduleName<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>strippedName <span class="token operator">!==</span> moduleName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        RemoteModules<span class="token punctuation">[</span>strippedName<span class="token punctuation">]</span> <span class="token operator">=</span> RemoteModules<span class="token punctuation">[</span>moduleName<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">delete</span> RemoteModules<span class="token punctuation">[</span>moduleName<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> NativeModules <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>RemoteModules<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>moduleName<span class="token punctuation">)</span> <span class="token punctuation">{</span>      Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>NativeModules<span class="token punctuation">,</span> moduleName<span class="token punctuation">,</span> <span class="token punctuation">{</span>        configurable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        enumerable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token keyword">get</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">var</span> module <span class="token operator">=</span> RemoteModules<span class="token punctuation">[</span>moduleName<span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>module <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> module<span class="token punctuation">.</span>moduleID <span class="token operator">===</span> <span class="token string">'number'</span> <span class="token operator">&amp;&amp;</span>           global<span class="token punctuation">.</span>nativeRequireModuleConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> json <span class="token operator">=</span> global<span class="token punctuation">.</span><span class="token function">nativeRequireModuleConfig</span><span class="token punctuation">(</span>moduleName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> config <span class="token operator">=</span> json <span class="token operator">&amp;&amp;</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>            module <span class="token operator">=</span> config <span class="token operator">&amp;&amp;</span> BatchedBridge<span class="token punctuation">.</span><span class="token function">processModuleConfig</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span> module<span class="token punctuation">.</span>moduleID<span class="token punctuation">)</span><span class="token punctuation">;</span>            RemoteModules<span class="token punctuation">[</span>moduleName<span class="token punctuation">]</span> <span class="token operator">=</span> module<span class="token punctuation">;</span>          <span class="token punctuation">}</span>          Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>NativeModules<span class="token punctuation">,</span> moduleName<span class="token punctuation">,</span> <span class="token punctuation">{</span>            configurable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            enumerable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            value<span class="token punctuation">:</span> module          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> module<span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    module<span class="token punctuation">.</span>exports <span class="token operator">=</span> NativeModules<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"NativeModules"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="4-genModules-调用-genModule"><a href="#4-genModules-调用-genModule" class="headerlink" title="4. _genModules 调用 _genModule"></a>4. _genModules 调用 _genModule</h4><pre><code>function _genModules(remoteModules) {  var _this5 = this;  var modules = {};  remoteModules.forEach(function (config, moduleID) {    var info = _this5._genModule(config, moduleID);    if (info) {      modules[info.name] = info.module;    }  });  return modules;}</code></pre><h4 id="5-genModule-调用-genMethod"><a href="#5-genModule-调用-genMethod" class="headerlink" title="5. _genModule 调用 _genMethod"></a>5. _genModule 调用 _genMethod</h4><pre><code>function _genModule(config, moduleID) {    module[methodName] = _this6._genMethod(moduleID, methodID, methodType);    return { name: moduleName, module: module };}</code></pre><h4 id="6-genMethod-调用-nativeCall-返回-Promise或function"><a href="#6-genMethod-调用-nativeCall-返回-Promise或function" class="headerlink" title="6. _genMethod 调用  __nativeCall  返回 Promise或function"></a>6. _genMethod 调用  __nativeCall  返回 Promise或function</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> _genMethod 调用 <span class="token punctuation">(</span>module<span class="token punctuation">,</span> method<span class="token punctuation">,</span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> MethodTypes<span class="token punctuation">.</span>remoteAsync<span class="token punctuation">)</span> <span class="token punctuation">{</span>    fn <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> _len <span class="token operator">=</span> arguments<span class="token punctuation">.</span>length<span class="token punctuation">,</span> args <span class="token operator">=</span> <span class="token function">Array</span><span class="token punctuation">(</span>_len<span class="token punctuation">)</span><span class="token punctuation">,</span> _key <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> _key <span class="token operator">&lt;</span> _len<span class="token punctuation">;</span> _key<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        args<span class="token punctuation">[</span>_key<span class="token punctuation">]</span> <span class="token operator">=</span> arguments<span class="token punctuation">[</span>_key<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>        self<span class="token punctuation">.</span><span class="token function">__nativeCall</span><span class="token punctuation">(</span>          module<span class="token punctuation">,</span>          method<span class="token punctuation">,</span>          args<span class="token punctuation">,</span>          <span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token keyword">function</span> <span class="token punctuation">(</span>errorData<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> error <span class="token operator">=</span> <span class="token function">createErrorFromErrorData</span><span class="token punctuation">(</span>errorData<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> MethodTypes<span class="token punctuation">.</span>syncHook<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> _len2 <span class="token operator">=</span> arguments<span class="token punctuation">.</span>length<span class="token punctuation">,</span> args <span class="token operator">=</span> <span class="token function">Array</span><span class="token punctuation">(</span>_len2<span class="token punctuation">)</span><span class="token punctuation">,</span> _key2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> _key2 <span class="token operator">&lt;</span> _len2<span class="token punctuation">;</span> _key2<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        args<span class="token punctuation">[</span>_key2<span class="token punctuation">]</span> <span class="token operator">=</span> arguments<span class="token punctuation">[</span>_key2<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> global<span class="token punctuation">.</span><span class="token function">nativeCallSyncHook</span><span class="token punctuation">(</span>module<span class="token punctuation">,</span> method<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    fn <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> _len3 <span class="token operator">=</span> arguments<span class="token punctuation">.</span>length<span class="token punctuation">,</span> args <span class="token operator">=</span> <span class="token function">Array</span><span class="token punctuation">(</span>_len3<span class="token punctuation">)</span><span class="token punctuation">,</span> _key3 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> _key3 <span class="token operator">&lt;</span> _len3<span class="token punctuation">;</span> _key3<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        args<span class="token punctuation">[</span>_key3<span class="token punctuation">]</span> <span class="token operator">=</span> arguments<span class="token punctuation">[</span>_key3<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">var</span> lastArg <span class="token operator">=</span> args<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> args<span class="token punctuation">[</span>args<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> secondLastArg <span class="token operator">=</span> args<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">?</span> args<span class="token punctuation">[</span>args<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> hasSuccCB <span class="token operator">=</span> <span class="token keyword">typeof</span> lastArg <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> hasErrorCB <span class="token operator">=</span> <span class="token keyword">typeof</span> secondLastArg <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">;</span>      hasErrorCB <span class="token operator">&amp;&amp;</span> <span class="token function">invariant</span><span class="token punctuation">(</span>        hasSuccCB<span class="token punctuation">,</span>        <span class="token string">'Cannot have a non-function arg after a function arg.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> numCBs <span class="token operator">=</span> hasSuccCB <span class="token operator">+</span> hasErrorCB<span class="token punctuation">;</span>      <span class="token keyword">var</span> onSucc <span class="token operator">=</span> hasSuccCB <span class="token operator">?</span> lastArg <span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> onFail <span class="token operator">=</span> hasErrorCB <span class="token operator">?</span> secondLastArg <span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>      args <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> args<span class="token punctuation">.</span>length <span class="token operator">-</span> numCBs<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> self<span class="token punctuation">.</span><span class="token function">__nativeCall</span><span class="token punctuation">(</span>module<span class="token punctuation">,</span> method<span class="token punctuation">,</span> args<span class="token punctuation">,</span> onFail<span class="token punctuation">,</span> onSucc<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  fn<span class="token punctuation">.</span>type <span class="token operator">=</span> type<span class="token punctuation">;</span>  <span class="token keyword">return</span> fn<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="7-nativeCall实现"><a href="#7-nativeCall实现" class="headerlink" title="7. __nativeCall实现"></a>7. __nativeCall实现</h4><pre class=" language-cpp"><code class="language-cpp">function <span class="token function">__nativeCall</span><span class="token punctuation">(</span>module<span class="token punctuation">,</span> method<span class="token punctuation">,</span> params<span class="token punctuation">,</span> onFail<span class="token punctuation">,</span> onSucc<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>_queue<span class="token punctuation">[</span>MODULE_IDS<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>module<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>_queue<span class="token punctuation">[</span>METHOD_IDS<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>_queue<span class="token punctuation">[</span>PARAMS<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>  var now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>global<span class="token punctuation">.</span>nativeFlushQueueImmediate <span class="token operator">&amp;&amp;</span>  now <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_lastFlush <span class="token operator">>=</span> MIN_TIME_BETWEEN_FLUSHES_MS<span class="token punctuation">)</span> <span class="token punctuation">{</span>      global<span class="token punctuation">.</span><span class="token function">nativeFlushQueueImmediate</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_queue<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>_queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_callID<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>_lastFlush <span class="token operator">=</span> now<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="8-JSCExecutor-cpp-通过installGlobalFunction-定义-nativeFlushQueueImmediate方法"><a href="#8-JSCExecutor-cpp-通过installGlobalFunction-定义-nativeFlushQueueImmediate方法" class="headerlink" title="8. JSCExecutor.cpp 通过installGlobalFunction 定义 nativeFlushQueueImmediate方法"></a>8. JSCExecutor.cpp 通过installGlobalFunction 定义 nativeFlushQueueImmediate方法</h4><pre class=" language-cpp"><code class="language-cpp">m_context <span class="token operator">=</span> <span class="token function">JSGlobalContextCreateInGroup</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s_globalContextRefToJSCExecutor<span class="token punctuation">[</span>m_context<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span><span class="token function">installGlobalFunction</span><span class="token punctuation">(</span>m_context<span class="token punctuation">,</span> <span class="token string">"nativeFlushQueueImmediate"</span><span class="token punctuation">,</span> nativeFlushQueueImmediate<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">installGlobalFunction</span><span class="token punctuation">(</span>m_context<span class="token punctuation">,</span> <span class="token string">"nativePerformanceNow"</span><span class="token punctuation">,</span> nativePerformanceNow<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">installGlobalFunction</span><span class="token punctuation">(</span>m_context<span class="token punctuation">,</span> <span class="token string">"nativeStartWorker"</span><span class="token punctuation">,</span> nativeStartWorker<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">installGlobalFunction</span><span class="token punctuation">(</span>m_context<span class="token punctuation">,</span> <span class="token string">"nativePostMessageToWorker"</span><span class="token punctuation">,</span> nativePostMessageToWorker<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">installGlobalFunction</span><span class="token punctuation">(</span>m_context<span class="token punctuation">,</span> <span class="token string">"nativeTerminateWorker"</span><span class="token punctuation">,</span> nativeTerminateWorker<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">installGlobalFunction</span><span class="token punctuation">(</span>m_context<span class="token punctuation">,</span> <span class="token string">"nativeInjectHMRUpdate"</span><span class="token punctuation">,</span> nativeInjectHMRUpdate<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="9-nativeFlushQueueImmediate-获取-JS队列数据执行Native调用："><a href="#9-nativeFlushQueueImmediate-获取-JS队列数据执行Native调用：" class="headerlink" title="9. nativeFlushQueueImmediate 获取 JS队列数据执行Native调用："></a>9. nativeFlushQueueImmediate 获取 JS队列数据执行Native调用：</h4><pre class=" language-cpp"><code class="language-cpp">JSValueRef JSCExecutor<span class="token operator">::</span><span class="token function">nativeFlushQueueImmediate</span><span class="token punctuation">(</span>    JSContextRef ctx<span class="token punctuation">,</span>    JSObjectRef function<span class="token punctuation">,</span>    JSObjectRef thisObject<span class="token punctuation">,</span>    size_t argumentCount<span class="token punctuation">,</span>    <span class="token keyword">const</span> JSValueRef arguments<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    JSValueRef <span class="token operator">*</span>exception<span class="token punctuation">)</span> <span class="token punctuation">{</span>std<span class="token operator">::</span>string resStr <span class="token operator">=</span> <span class="token function">Value</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>executor<span class="token operator">-</span><span class="token operator">></span><span class="token function">flushQueueImmediate</span><span class="token punctuation">(</span>resStr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token function">JSValueMakeUndefined</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="10-flushQueueImmediate获取JS队列执行队列数据调用Native接口："><a href="#10-flushQueueImmediate获取JS队列执行队列数据调用Native接口：" class="headerlink" title="10. flushQueueImmediate获取JS队列执行队列数据调用Native接口："></a>10. flushQueueImmediate获取JS队列执行队列数据调用Native接口：</h4><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">void</span> JSCExecutor<span class="token operator">::</span><span class="token function">flushQueueImmediate</span><span class="token punctuation">(</span>std<span class="token operator">::</span>string queueJSON<span class="token punctuation">)</span> <span class="token punctuation">{</span>  m_bridge<span class="token operator">-</span><span class="token operator">></span><span class="token function">callNativeModules</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">,</span> queueJSON<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="11-callNativeModules-调用Native-java方法"><a href="#11-callNativeModules-调用Native-java方法" class="headerlink" title="11. callNativeModules 调用Native java方法"></a>11. callNativeModules 调用Native java方法</h4><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">BridgeCallback</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>  <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">BridgeCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">onCallNativeModules</span><span class="token punctuation">(</span>      ExecutorToken executorToken<span class="token punctuation">,</span>      <span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> callJSON<span class="token punctuation">,</span>      <span class="token keyword">bool</span> isEndOfBatch<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">onExecutorUnregistered</span><span class="token punctuation">(</span>ExecutorToken executorToken<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> Bridge<span class="token operator">::</span><span class="token function">callNativeModules</span><span class="token punctuation">(</span>JSExecutor<span class="token operator">&amp;</span> executor<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> callJSON<span class="token punctuation">,</span> <span class="token keyword">bool</span> isEndOfBatch<span class="token punctuation">)</span> <span class="token punctuation">{</span>  m_callback<span class="token operator">-</span><span class="token operator">></span><span class="token function">onCallNativeModules</span><span class="token punctuation">(</span><span class="token function">getTokenForExecutor</span><span class="token punctuation">(</span>executor<span class="token punctuation">)</span><span class="token punctuation">,</span> callJSON<span class="token punctuation">,</span> isEndOfBatch<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>BridgeCallback<span class="token operator">::</span>m_callback 为OnLoad<span class="token punctuation">.</span>cpp 中的 <span class="token keyword">class</span> <span class="token class-name">PlatformBridgeCallback</span> <span class="token operator">:</span> <span class="token keyword">public</span> BridgeCallback<span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">onCallNativeModules</span><span class="token punctuation">(</span>    ExecutorToken executorToken<span class="token punctuation">,</span>    <span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> callJSON<span class="token punctuation">,</span>    <span class="token keyword">bool</span> isEndOfBatch<span class="token punctuation">)</span> override <span class="token punctuation">{</span>  <span class="token function">executeCallbackOnCallbackQueueThread</span><span class="token punctuation">(</span><span class="token punctuation">[</span>executorToken<span class="token punctuation">,</span> callJSON<span class="token punctuation">,</span> isEndOfBatch<span class="token punctuation">]</span> <span class="token punctuation">(</span>ResolvedWeakReference<span class="token operator">&amp;</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>    JNIEnv<span class="token operator">*</span> env <span class="token operator">=</span> Environment<span class="token operator">::</span><span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> call <span class="token operator">:</span> react<span class="token operator">::</span><span class="token function">parseMethodCalls</span><span class="token punctuation">(</span>callJSON<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">makeJavaCall</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> executorToken<span class="token punctuation">,</span> callback<span class="token punctuation">,</span> call<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>env<span class="token operator">-</span><span class="token operator">></span><span class="token function">ExceptionCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>isEndOfBatch<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">signalBatchComplete</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>相当于执行 PlatformBridgeCallback.onCallNativeModules，最后调用 makeJavaCall方法调用java方法</p><p>OnLoad.cpp 中 makeJavaCall 定义,  c++通过CallVoidMethod调用java非静态方法：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">makeJavaCall</span><span class="token punctuation">(</span>JNIEnv<span class="token operator">*</span> env<span class="token punctuation">,</span> ExecutorToken executorToken<span class="token punctuation">,</span> jobject callback<span class="token punctuation">,</span> <span class="token keyword">const</span> MethodCall<span class="token operator">&amp;</span> call<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">auto</span> newArray <span class="token operator">=</span> ReadableNativeArray<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">newObjectCxxArgs</span><span class="token punctuation">(</span>std<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">move</span><span class="token punctuation">(</span>call<span class="token punctuation">.</span>arguments<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  env<span class="token operator">-></span><span class="token function">CallVoidMethod</span><span class="token punctuation">(</span>      callback<span class="token punctuation">,</span>      gCallbackMethod<span class="token punctuation">,</span>      static_cast<span class="token operator">&lt;</span>JExecutorTokenHolder<span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span>executorToken<span class="token punctuation">.</span><span class="token function">getPlatformExecutorToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">getJobj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      call<span class="token punctuation">.</span>moduleId<span class="token punctuation">,</span>      call<span class="token punctuation">.</span>methodId<span class="token punctuation">,</span>      newArray<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="三-JavaScript调用Native回调和返回值"><a href="#三-JavaScript调用Native回调和返回值" class="headerlink" title="三. JavaScript调用Native回调和返回值"></a>三. JavaScript调用Native回调和返回值</h2><p><img src="https://raw.githubusercontent.com/hubcarl/hubcarl.github.io/master/_posts/images/react/rn-js-native.png#width=" alt=""></p><p>从编写自定义插件中，我们知道了JS如何调用Native方法，但 @ReactMethod 注解的方法的返回值只能是void，现在JS端想从Native获取一些配置信息或者知道调用端是否成功的一些返回值信息，该如何实现呢？</p><p>JavaScript调用Native获取Native返回值是通过异步Callback实现的. 在JS调用Native时，会判断方法的最后两个参数，如果是function，就会把函数放到callback数值中, key为自增的callbackId，同时把callbackId传递给Native。Native执行完以后，通过调用JS方法 __invokeCallback 进行回调。在react-native中定是通过Callback和Promise的接口，用来处理JavaScript调用Java方法的回调，Callback会作为ReactMethod注解方法的一个参数，Native调用JS就是通过这个Callback实现的，具体实现会在下面讲到。</p><p>首先，我们看一下Callback和Promise具体实现，然后根据代码来剖析实现原理。</p><h3 id="Callback实现"><a href="#Callback实现" class="headerlink" title="Callback实现"></a>Callback实现</h3><h4 id="1-java端实现一个需要获取执行结果的setCache和一个获取缓存接口getCache"><a href="#1-java端实现一个需要获取执行结果的setCache和一个获取缓存接口getCache" class="headerlink" title="1. java端实现一个需要获取执行结果的setCache和一个获取缓存接口getCache"></a>1. java端实现一个需要获取执行结果的setCache和一个获取缓存接口getCache</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ReactMethod</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCache</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String value<span class="token punctuation">,</span> Callback successCallback<span class="token punctuation">,</span> Callback errorCallback<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>      sharedPreference <span class="token operator">=</span> <span class="token function">getCurrentActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSharedPreferences</span><span class="token punctuation">(</span><span class="token string">"rn_cache"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      sharedPreference<span class="token punctuation">.</span><span class="token function">edit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putString</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      successCallback<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token string">"save success"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      errorCallback<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@ReactMethod</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getCache</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Callback callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>  callback<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>sharedPreference<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="2-JS定义两个方法，一个设置缓存，一个获取缓存。在JavaScript中，调用这个带有Callback参数的方法如下："><a href="#2-JS定义两个方法，一个设置缓存，一个获取缓存。在JavaScript中，调用这个带有Callback参数的方法如下：" class="headerlink" title="2. JS定义两个方法，一个设置缓存，一个获取缓存。在JavaScript中，调用这个带有Callback参数的方法如下："></a>2. JS定义两个方法，一个设置缓存，一个获取缓存。在JavaScript中，调用这个带有Callback参数的方法如下：</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token function">_setCacheClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  NativeModules<span class="token punctuation">.</span>IntentPackage<span class="token punctuation">.</span><span class="token function">setCache</span><span class="token punctuation">(</span><span class="token string">'ReactNative'</span><span class="token punctuation">,</span><span class="token string">'我是来自React Native缓存消息'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>      NativeModules<span class="token punctuation">.</span>ToastAndroid<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>      NativeModules<span class="token punctuation">.</span>ToastAndroid<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span>error<span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">_getCacheClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     NativeModules<span class="token punctuation">.</span>IntentPackage<span class="token punctuation">.</span><span class="token function">getCache</span><span class="token punctuation">(</span><span class="token string">'ReactNative'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>          NativeModules<span class="token punctuation">.</span>ToastAndroid<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="Promise实现"><a href="#Promise实现" class="headerlink" title="Promise实现"></a>Promise实现</h3><h4 id="1-同样java端实现一个需要获取执行结果的setCache和一个获取缓存接口getCache，Callback参数改为Promise"><a href="#1-同样java端实现一个需要获取执行结果的setCache和一个获取缓存接口getCache，Callback参数改为Promise" class="headerlink" title="1. 同样java端实现一个需要获取执行结果的setCache和一个获取缓存接口getCache，Callback参数改为Promise"></a>1. 同样java端实现一个需要获取执行结果的setCache和一个获取缓存接口getCache，Callback参数改为Promise</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ReactMethod</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCachePromise</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String value<span class="token punctuation">,</span> Promise promise<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>      sharedPreference <span class="token operator">=</span> <span class="token function">getCurrentActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSharedPreferences</span><span class="token punctuation">(</span><span class="token string">"rn_cache"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      sharedPreference<span class="token punctuation">.</span><span class="token function">edit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putString</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"save success"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@ReactMethod</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getCachePromise</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Promise promise<span class="token punctuation">)</span> <span class="token punctuation">{</span>  promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>sharedPreference<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="2-同样JS定义两个方法，一个设置缓存，一个获取缓存。在JavaScript中，调用这个带有Callback参数的方法如下："><a href="#2-同样JS定义两个方法，一个设置缓存，一个获取缓存。在JavaScript中，调用这个带有Callback参数的方法如下：" class="headerlink" title="2. 同样JS定义两个方法，一个设置缓存，一个获取缓存。在JavaScript中，调用这个带有Callback参数的方法如下："></a>2. 同样JS定义两个方法，一个设置缓存，一个获取缓存。在JavaScript中，调用这个带有Callback参数的方法如下：</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token function">_setCachePromiseClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    NativeModules<span class="token punctuation">.</span>IntentPackage<span class="token punctuation">.</span><span class="token function">setCache</span><span class="token punctuation">(</span><span class="token string">'ReactNative'</span><span class="token punctuation">,</span><span class="token string">'我是来自React Native缓存消息'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>msg<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        NativeModules<span class="token punctuation">.</span>ToastAndroid<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>error<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>      NativeModules<span class="token punctuation">.</span>ToastAndroid<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span>error<span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token function">_getCachePromiseClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       NativeModules<span class="token punctuation">.</span>IntentPackage<span class="token punctuation">.</span><span class="token function">getCache</span><span class="token punctuation">(</span><span class="token string">'ReactNative'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>       NativeModules<span class="token punctuation">.</span>ToastAndroid<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="JavaScript调用Native-Callback实现原理"><a href="#JavaScript调用Native-Callback实现原理" class="headerlink" title="JavaScript调用Native Callback实现原理"></a>JavaScript调用Native Callback实现原理</h3><h4 id="1-NativeModulesReactCallback-初始化"><a href="#1-NativeModulesReactCallback-初始化" class="headerlink" title="1.NativeModulesReactCallback 初始化"></a>1.NativeModulesReactCallback 初始化</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> ReactBridge <span class="token function">initializeBridge</span><span class="token punctuation">(</span>JavaScriptExecutor jsExecutor<span class="token punctuation">)</span> <span class="token punctuation">{</span>  bridge <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReactBridge</span><span class="token punctuation">(</span>          jsExecutor<span class="token punctuation">,</span>          <span class="token keyword">new</span> <span class="token class-name">NativeModulesReactCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          mReactQueueConfiguration<span class="token punctuation">.</span><span class="token function">getNativeModulesQueueThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> bridge<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token function">ReactBridge</span><span class="token punctuation">(</span>      JavaScriptExecutor jsExecutor<span class="token punctuation">,</span>      ReactCallback callback<span class="token punctuation">,</span>      MessageQueueThread nativeModulesQueueThread<span class="token punctuation">)</span> <span class="token punctuation">{</span>    mJSExecutor <span class="token operator">=</span> jsExecutor<span class="token punctuation">;</span>    mCallback <span class="token operator">=</span> callback<span class="token punctuation">;</span>    mNativeModulesQueueThread <span class="token operator">=</span> nativeModulesQueueThread<span class="token punctuation">;</span>    <span class="token function">initialize</span><span class="token punctuation">(</span>jsExecutor<span class="token punctuation">,</span> callback<span class="token punctuation">,</span> mNativeModulesQueueThread<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="2-ReactCallback源码实现："><a href="#2-ReactCallback源码实现：" class="headerlink" title="2.ReactCallback源码实现："></a>2.ReactCallback源码实现：</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@DoNotStrip</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ReactCallback</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@DoNotStrip</span>  <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span>ExecutorToken executorToken<span class="token punctuation">,</span> <span class="token keyword">int</span> moduleId<span class="token punctuation">,</span> <span class="token keyword">int</span> methodId<span class="token punctuation">,</span> ReadableNativeArray parameters<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">NativeModulesReactCallback</span> <span class="token keyword">implements</span> <span class="token class-name">ReactCallback</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span>ExecutorToken executorToken<span class="token punctuation">,</span> <span class="token keyword">int</span> moduleId<span class="token punctuation">,</span> <span class="token keyword">int</span> methodId<span class="token punctuation">,</span> ReadableNativeArray parameters<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mJSToJavaCallsTeardownLock<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// NativeModuleRegistry调用call</span>         nativeModuleRegistry<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>CatalystInstanceImpl<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> executorToken<span class="token punctuation">,</span> moduleId<span class="token punctuation">,</span> methodId<span class="token punctuation">,</span> parameters<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="3-NativeModuleRegistry源码实现："><a href="#3-NativeModuleRegistry源码实现：" class="headerlink" title="3.NativeModuleRegistry源码实现："></a>3.NativeModuleRegistry源码实现：</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NativeModuleRegistry</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MethodRegistration</span> <span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token function">MethodRegistration</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> String tracingName<span class="token punctuation">,</span> NativeModule<span class="token punctuation">.</span>NativeMethod method<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>tracingName <span class="token operator">=</span> tracingName<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>method <span class="token operator">=</span> method<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> String name<span class="token punctuation">;</span>      <span class="token keyword">public</span> String tracingName<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// Native 模块必须实现的接口NativeModule</span>      <span class="token keyword">public</span> NativeModule<span class="token punctuation">.</span>NativeMethod method<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ModuleDefinition</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">final</span> String name<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">final</span> NativeModule target<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">final</span> ArrayList<span class="token operator">&lt;</span>MethodRegistration<span class="token operator">></span> methods<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ModuleDefinition</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> String name<span class="token punctuation">,</span> NativeModule target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>methods <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>MethodRegistration<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// target.getMethods() 收集 @ReactMehtod 注解的方法</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> NativeModule<span class="token punctuation">.</span>NativeMethod<span class="token operator">></span> entry <span class="token operator">:</span> target<span class="token punctuation">.</span><span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>methods<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>            <span class="token keyword">new</span> <span class="token class-name">MethodRegistration</span><span class="token punctuation">(</span>              entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"NativeCall__"</span> <span class="token operator">+</span> target<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"_"</span> <span class="token operator">+</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span>            CatalystInstance catalystInstance<span class="token punctuation">,</span>            ExecutorToken executorToken<span class="token punctuation">,</span>            <span class="token keyword">int</span> methodId<span class="token punctuation">,</span>            ReadableNativeArray parameters<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// this.methods.get(methodId).method == NativeModule.NativeMethod</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>methods<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>methodId<span class="token punctuation">)</span><span class="token punctuation">.</span>method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>catalystInstance<span class="token punctuation">,</span> executorToken<span class="token punctuation">,</span> parameters<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="4-我们再来看一下Native自定义模块IntentModule实现"><a href="#4-我们再来看一下Native自定义模块IntentModule实现" class="headerlink" title="4.我们再来看一下Native自定义模块IntentModule实现"></a>4.我们再来看一下Native自定义模块IntentModule实现</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">BaseJavaModule</span> <span class="token keyword">implements</span> <span class="token class-name">NativeModule</span> <span class="token punctuation">{</span>  <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">private</span> ArgumentExtractor<span class="token operator">&lt;</span>Callback<span class="token operator">></span> ARGUMENT_EXTRACTOR_CALLBACK <span class="token operator">=</span>      <span class="token keyword">new</span> <span class="token class-name">ArgumentExtractor</span><span class="token operator">&lt;</span>Callback<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token annotation punctuation">@Nullable</span> Callback <span class="token function">extractArgument</span><span class="token punctuation">(</span>            CatalystInstance catalystInstance<span class="token punctuation">,</span>             ExecutorToken executorToken<span class="token punctuation">,</span>             ReadableNativeArray jsArguments<span class="token punctuation">,</span>             <span class="token keyword">int</span> atIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>jsArguments<span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>atIndex<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> id <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> jsArguments<span class="token punctuation">.</span><span class="token function">getDouble</span><span class="token punctuation">(</span>atIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//CallbackImpl 实现 Callback接口</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CallbackImpl</span><span class="token punctuation">(</span>catalystInstance<span class="token punctuation">,</span> executorToken<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">private</span> ArgumentExtractor<span class="token operator">&lt;</span>Promise<span class="token operator">></span> ARGUMENT_EXTRACTOR_PROMISE <span class="token operator">=</span>      <span class="token keyword">new</span> <span class="token class-name">ArgumentExtractor</span><span class="token operator">&lt;</span>Promise<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getJSArgumentsNeeded</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> Promise <span class="token function">extractArgument</span><span class="token punctuation">(</span>            CatalystInstance catalystInstance<span class="token punctuation">,</span>             ExecutorToken executorToken<span class="token punctuation">,</span>             ReadableNativeArray jsArguments<span class="token punctuation">,</span>             <span class="token keyword">int</span> atIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>          Callback resolve <span class="token operator">=</span> ARGUMENT_EXTRACTOR_CALLBACK              <span class="token punctuation">.</span><span class="token function">extractArgument</span><span class="token punctuation">(</span>catalystInstance<span class="token punctuation">,</span> executorToken<span class="token punctuation">,</span> jsArguments<span class="token punctuation">,</span> atIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>          Callback reject <span class="token operator">=</span> ARGUMENT_EXTRACTOR_CALLBACK              <span class="token punctuation">.</span><span class="token function">extractArgument</span><span class="token punctuation">(</span>catalystInstance<span class="token punctuation">,</span> executorToken<span class="token punctuation">,</span> jsArguments<span class="token punctuation">,</span> atIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PromiseImpl</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token annotation punctuation">@Nullable</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> NativeMethod<span class="token operator">></span> mMethods<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token annotation punctuation">@Nullable</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> SyncNativeHook<span class="token operator">></span> mHooks<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// getMethods实现</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">final</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> NativeMethod<span class="token operator">></span> <span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Method<span class="token punctuation">[</span><span class="token punctuation">]</span> targetMethods <span class="token operator">=</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">for</span> <span class="token punctuation">(</span>Method targetMethod <span class="token operator">:</span> targetMethods<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>targetMethod<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>ReactMethod<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>         String methodName <span class="token operator">=</span> targetMethod<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         mMethods<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>methodName<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">JavaMethod</span><span class="token punctuation">(</span>targetMethod<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>targetMethod<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>ReactSyncHook<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>         String methodName <span class="token operator">=</span> targetMethod<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         mHooks<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>methodName<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SyncJavaHook</span><span class="token punctuation">(</span>targetMethod<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>     <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">assertNotNull</span><span class="token punctuation">(</span>mMethods<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JavaMethod</span> <span class="token keyword">implements</span> <span class="token class-name">NativeMethod</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Method mMethod<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">JavaMethod</span><span class="token punctuation">(</span>Method method<span class="token punctuation">)</span> <span class="token punctuation">{</span>      mMethod <span class="token operator">=</span> method<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">invoke</span><span class="token punctuation">(</span>CatalystInstance catalystInstance<span class="token punctuation">,</span>     ExecutorToken executorToken<span class="token punctuation">,</span> ReadableNativeArray parameters<span class="token punctuation">)</span> <span class="token punctuation">{</span>      mMethod<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>BaseJavaModule<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> mArguments<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">ReactContextBaseJavaModule</span> <span class="token keyword">extends</span> <span class="token class-name">BaseJavaModule</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IntentModule</span> <span class="token keyword">extends</span> <span class="token class-name">ReactContextBaseJavaModule</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h4 id="5-Callback-实现"><a href="#5-Callback-实现" class="headerlink" title="5.Callback 实现"></a>5.Callback 实现</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">initialize</span><span class="token punctuation">(</span>      JavaScriptExecutor jsExecutor<span class="token punctuation">,</span>      ReactCallback callback<span class="token punctuation">,</span>      MessageQueueThread nativeModulesQueueThread<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">CallbackImpl</span> <span class="token keyword">implements</span> <span class="token class-name">Callback</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> CatalystInstance mCatalystInstance<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> ExecutorToken mExecutorToken<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> mCallbackId<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token function">CallbackImpl</span><span class="token punctuation">(</span>CatalystInstancebridge <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReactBridge</span><span class="token punctuation">(</span>          jsExecutor<span class="token punctuation">,</span>          <span class="token keyword">new</span> <span class="token class-name">NativeModulesReactCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          mReactQueueConfiguration<span class="token punctuation">.</span><span class="token function">getNativeModulesQueueThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> bridge<span class="token punctuation">,</span>           ExecutorToken executorToken<span class="token punctuation">,</span> <span class="token keyword">int</span> callbackId<span class="token punctuation">)</span> <span class="token punctuation">{</span>    mCatalystInstance <span class="token operator">=</span> bridge<span class="token punctuation">;</span>    mExecutorToken <span class="token operator">=</span> executorToken<span class="token punctuation">;</span>    mCallbackId <span class="token operator">=</span> callbackId<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">invoke</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    mCatalystInstance<span class="token punctuation">.</span><span class="token function">invokeCallback</span><span class="token punctuation">(</span>mExecutorToken<span class="token punctuation">,</span> mCallbackId<span class="token punctuation">,</span>     Arguments<span class="token punctuation">.</span><span class="token function">fromJavaArgs</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="6-CatalystInstanceImpl类中invokeCallback调用"><a href="#6-CatalystInstanceImpl类中invokeCallback调用" class="headerlink" title="6.CatalystInstanceImpl类中invokeCallback调用"></a>6.CatalystInstanceImpl类中invokeCallback调用</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">invokeCallback</span><span class="token punctuation">(</span>ExecutorToken executorToken<span class="token punctuation">,</span> <span class="token keyword">int</span> callbackID<span class="token punctuation">,</span> NativeArray arguments<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>mIsBeingDestroyed<span class="token punctuation">)</span> <span class="token punctuation">{</span>  FLog<span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span>ReactConstants<span class="token punctuation">.</span>TAG<span class="token punctuation">,</span> <span class="token string">"Invoking JS callback after bridge has been destroyed."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mJavaToJSCallsTeardownLock<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>mDestroyed<span class="token punctuation">)</span> <span class="token punctuation">{</span>    FLog<span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span>ReactConstants<span class="token punctuation">.</span>TAG<span class="token punctuation">,</span> <span class="token string">"Invoking JS callback after bridge has been destroyed."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">incrementPendingJSCalls</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Assertions<span class="token punctuation">.</span><span class="token function">assertNotNull</span><span class="token punctuation">(</span>mBridge<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invokeCallback</span><span class="token punctuation">(</span>executorToken<span class="token punctuation">,</span> callbackID<span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="7-ReactBridge-java中invokeCallback调用"><a href="#7-ReactBridge-java中invokeCallback调用" class="headerlink" title="7.ReactBridge.java中invokeCallback调用"></a>7.ReactBridge.java中invokeCallback调用</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">invokeCallback</span><span class="token punctuation">(</span>ExecutorToken executorToken<span class="token punctuation">,</span> <span class="token keyword">int</span> callbackID<span class="token punctuation">,</span> NativeArray arguments<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="8-OnLoad-cpp"><a href="#8-OnLoad-cpp" class="headerlink" title="8.OnLoad.cpp"></a>8.OnLoad.cpp</h4><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">invokeCallback</span><span class="token punctuation">(</span>JNIEnv<span class="token operator">*</span> env<span class="token punctuation">,</span> jobject obj<span class="token punctuation">,</span> JExecutorToken<span class="token operator">::</span>jhybridobject jExecutorToken<span class="token punctuation">,</span> jint callbackId<span class="token punctuation">,</span>                           NativeArray<span class="token operator">::</span>jhybridobject args<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">auto</span> bridge <span class="token operator">=</span> extractRefPtr<span class="token operator">&lt;</span>CountableBridge<span class="token operator">></span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">auto</span> arguments <span class="token operator">=</span> <span class="token function">cthis</span><span class="token punctuation">(</span><span class="token function">wrap_alias</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    bridge<span class="token operator">-</span><span class="token operator">></span><span class="token function">invokeCallback</span><span class="token punctuation">(</span>      <span class="token function">cthis</span><span class="token punctuation">(</span><span class="token function">wrap_alias</span><span class="token punctuation">(</span>jExecutorToken<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getExecutorToken</span><span class="token punctuation">(</span><span class="token function">wrap_alias</span><span class="token punctuation">(</span>jExecutorToken<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span> callbackId<span class="token punctuation">,</span>      std<span class="token operator">::</span><span class="token function">move</span><span class="token punctuation">(</span>arguments<span class="token operator">-</span><span class="token operator">></span>array<span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">translatePendingCppExceptionToJavaException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="9-Bridge-cpp实现"><a href="#9-Bridge-cpp实现" class="headerlink" title="9.Bridge.cpp实现"></a>9.Bridge.cpp实现</h4><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">void</span> Bridge<span class="token operator">::</span><span class="token function">invokeCallback</span><span class="token punctuation">(</span>ExecutorToken executorToken<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">double</span> callbackId<span class="token punctuation">,</span> <span class="token keyword">const</span> folly<span class="token operator">::</span>dynamic<span class="token operator">&amp;</span> arguments<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token macro property">#<span class="token directive keyword">ifdef</span> WITH_FBSYSTRACE</span>  <span class="token keyword">int</span> systraceCookie <span class="token operator">=</span> m_systraceCookie<span class="token operator">++</span><span class="token punctuation">;</span>  FbSystraceAsyncFlow<span class="token operator">::</span><span class="token function">begin</span><span class="token punctuation">(</span>      TRACE_TAG_REACT_CXX_BRIDGE<span class="token punctuation">,</span>      <span class="token string">"&lt;callback>"</span><span class="token punctuation">,</span>      systraceCookie<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token macro property">#<span class="token directive keyword">endif</span></span>  <span class="token macro property">#<span class="token directive keyword">ifdef</span> WITH_FBSYSTRACE</span>  <span class="token function">runOnExecutorQueue</span><span class="token punctuation">(</span>executorToken<span class="token punctuation">,</span>   <span class="token punctuation">[</span>callbackId<span class="token punctuation">,</span> arguments<span class="token punctuation">,</span> systraceCookie<span class="token punctuation">]</span> <span class="token punctuation">(</span>JSExecutor<span class="token operator">*</span> executor<span class="token punctuation">)</span> <span class="token punctuation">{</span>    FbSystraceAsyncFlow<span class="token operator">::</span><span class="token function">end</span><span class="token punctuation">(</span>        TRACE_TAG_REACT_CXX_BRIDGE<span class="token punctuation">,</span>        <span class="token string">"&lt;callback>"</span><span class="token punctuation">,</span>        systraceCookie<span class="token punctuation">)</span><span class="token punctuation">;</span>    FbSystraceSection <span class="token function">s</span><span class="token punctuation">(</span>TRACE_TAG_REACT_CXX_BRIDGE<span class="token punctuation">,</span> <span class="token string">"Bridge.invokeCallback"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token macro property">#<span class="token directive keyword">else</span></span>  <span class="token function">runOnExecutorQueue</span><span class="token punctuation">(</span>executorToken<span class="token punctuation">,</span> <span class="token punctuation">[</span>callbackId<span class="token punctuation">,</span> arguments<span class="token punctuation">]</span> <span class="token punctuation">(</span>JSExecutor<span class="token operator">*</span> executor<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token macro property">#<span class="token directive keyword">endif</span></span>    executor<span class="token operator">-</span><span class="token operator">></span><span class="token function">invokeCallback</span><span class="token punctuation">(</span>callbackId<span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="10-JSCExecutor-cpp-中invokeCallback实现"><a href="#10-JSCExecutor-cpp-中invokeCallback实现" class="headerlink" title="10.JSCExecutor.cpp 中invokeCallback实现"></a>10.JSCExecutor.cpp 中invokeCallback实现</h4><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">void</span> JSCExecutor<span class="token operator">::</span><span class="token function">invokeCallback</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">double</span> callbackId<span class="token punctuation">,</span> <span class="token keyword">const</span> folly<span class="token operator">::</span>dynamic<span class="token operator">&amp;</span> arguments<span class="token punctuation">)</span> <span class="token punctuation">{</span>  String argsString <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>folly<span class="token operator">::</span><span class="token function">toJson</span><span class="token punctuation">(</span>std<span class="token operator">::</span><span class="token function">move</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  JSValueRef args<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>      <span class="token function">JSValueMakeNumber</span><span class="token punctuation">(</span>m_context<span class="token punctuation">,</span> callbackId<span class="token punctuation">)</span><span class="token punctuation">,</span>      Value<span class="token operator">::</span><span class="token function">fromJSON</span><span class="token punctuation">(</span>m_context<span class="token punctuation">,</span> argsString<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// m_invokeCallbackObj = </span>  <span class="token comment" spellcheck="true">// folly::make_unique&lt;Object>(</span>  <span class="token comment" spellcheck="true">// m_batchedBridge->getProperty("invokeCallbackAndReturnFlushedQueue").asObject());</span>  <span class="token comment" spellcheck="true">// 执行回调,返回待执行的队列</span>  <span class="token keyword">auto</span> result <span class="token operator">=</span> m_invokeCallbackObj<span class="token operator">-</span><span class="token operator">></span><span class="token function">callAsFunction</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 调用java方法</span>  m_bridge<span class="token operator">-</span><span class="token operator">></span><span class="token function">callNativeModules</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="11-JS端invokeCallbackAndReturnFlushedQueue实现"><a href="#11-JS端invokeCallbackAndReturnFlushedQueue实现" class="headerlink" title="11.JS端invokeCallbackAndReturnFlushedQueue实现"></a>11.JS端invokeCallbackAndReturnFlushedQueue实现</h4><pre class=" language-cpp"><code class="language-cpp">function <span class="token function">invokeCallbackAndReturnFlushedQueue</span><span class="token punctuation">(</span>cbID<span class="token punctuation">,</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>  var _this3 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token function">guard</span><span class="token punctuation">(</span><span class="token function">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 执行回调</span>    _this3<span class="token punctuation">.</span><span class="token function">__invokeCallback</span><span class="token punctuation">(</span>cbID<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    _this3<span class="token punctuation">.</span><span class="token function">__callImmediates</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//  返回JS调用Native的队列</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">flushedQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;原文：&lt;a href=&quot;https://hubcarl.github.io/blog/2016/08/28/react-native-js/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://hubcarl.githu
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Egg SSR Webpack 内存编译热更新实现</title>
    <link href="https://easyjs.cn/blog/ruv09m/"/>
    <id>https://easyjs.cn/blog/ruv09m/</id>
    <published>2020-05-31T09:43:53.000Z</published>
    <updated>2020-05-31T09:43:53.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id=""><a href="#" class="headerlink" title=""></a></h3><h2 id="1-背景"><a href="#1-背景" class="headerlink" title="1. 背景"></a>1. 背景</h2><p>在用 Node.js + Webpack 构建的方式进行开发时, 我们希望能实现修改代码能实时刷新页面UI的效果. 这个特性 Webpack本身是支持的, 而且基于koa也有现成的 koa-webpack-hot-middleware 和 koa-webpack-dev-middleware 封装好的组件支持.</p><p>不过这里如果需要支持Node.js服务器端修改代码自动重启webpack自动编译功能该如何实现呢, 主要存在以下几个问题:</p><ul><li>如何解决 Node.js 服务器端代码修改应用重启避免 Webpack 重新编译.<br /></li><li>如何访问 js, css, image 等静态资源.<br /></li><li>服务端渲染时, Node 层如何读取 Webpack 内存编译的内容<br /></li><li>如何处理本地开发 Webpack 热更新内存存储读取和线上应用本机文件读取逻辑分离.<br /></li></ul><h2 id="2-构建热更新实现"><a href="#2-构建热更新实现" class="headerlink" title="2.构建热更新实现"></a>2.构建热更新实现</h2><blockquote><p>前端渲染和服务端渲染构建热更新实现</p></blockquote><p>在koa项目中, 通过 koa-webpack-dev-middleware 和 koa-webpack-hot-middleware 可以实现 Webpack 编译内存存储和热更新功能, 代码如下:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> compiler <span class="token operator">=</span> <span class="token function">webpack</span><span class="token punctuation">(</span>webpackConfig<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> devMiddleware <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa-webpack-dev-middleware'</span><span class="token punctuation">)</span><span class="token punctuation">(</span>compiler<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> hotMiddleware <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa-webpack-hot-middleware'</span><span class="token punctuation">)</span><span class="token punctuation">(</span>compiler<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>devMiddleware<span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>hotMiddleware<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>如果按照上面实现, 可以满足修改修改客户端代码实现webpack自动变编译和UI界面热更新的功能.</p><p>但如果是修改 Node.js 服务器端代码重启后就会发现webpack会重新编译, 这不是我们要的效果.</p><p>原因是因为 middleware 是依赖 app 的生命周期, 当 app 销毁时, 对应 Webpack compiler 实例也就没有了, 重启时会重新执行middleware 初始化工作.</p><p>那有没有办法保持 Webpack 编译实例呢? 针对这个我们可以通过 Egg 框架已经内置了 worke r和 agent 机制来实现 Webpack内存编译功能.</p><ul><li>worker 和 agent 通信机制: <a href="https://eggjs.org/zh-cn/core/cluster-and-ipc.html" target="_blank" rel="noopener">https://eggjs.org/zh-cn/core/cluster-and-ipc.html</a><br /></li><li>实现 egg 项目服务器代码修改项目自动重启的功能可以使用 egg-development 插件.<br /></li></ul><h2 id="3-Egg-框架中-Webpack-构建"><a href="#3-Egg-框架中-Webpack-构建" class="headerlink" title="3. Egg 框架中 Webpack 构建"></a>3. Egg 框架中 Webpack 构建</h2><h3 id="3-1-解决思路"><a href="#3-1-解决思路" class="headerlink" title="3.1 解决思路"></a>3.1 解决思路</h3><ul><li>我们利用本地开发修改 Node 层代码修复重启时, 只会重启 Worker 进程, 不会重启 Agent 进程, 我们可以在 Agent 里面启动 Webpack 编译服务解决 Webpack compiler 实例问题.<br /></li><li>因为 Egg App 进程 和 Agent 进程是两个进程, 当 url 访问时, 我们通过 Worker 发送消息给 Agent 进程, 获取服务端渲染的文件内容, 然后 Agent 再发送消息给 Worker 解决文件读取问题.<br /></li><li>本地开发 Webpack 热更新内存存储读取和线上应用本机文件读取逻辑分离功能, 我们通过本地开发模式时, 通过读取Webpack 内存内容覆盖本地文件读取的逻辑, 这样在开发模式和发布模式可以无缝对接.<br /></li></ul><h3 id="3-2-本地开发模式"><a href="#3-2-本地开发模式" class="headerlink" title="3.2 本地开发模式"></a>3.2 本地开发模式</h3><h4 id="3-2-1-Egg项目启动"><a href="#3-2-1-Egg项目启动" class="headerlink" title="3.2.1 Egg项目启动"></a>3.2.1 Egg项目启动</h4><p><img src="https://cdn.yuque.com/yuque/0/2018/png/116733/1528521824273-8fc185c1-8124-4422-919e-33341ebff8c3.png#align=left&display=inline&height=594&originHeight=600&originWidth=836&status=done&width=827" alt=""></p><ul><li>首先执行<code>node index.js</code> 或者 <code>npm run dev</code> 启动 Egg 应用<br /></li><li>在 Egg Agent 里面启动 koa 服务, 同时在koa服务里面启动 Webpack 编译服务<br /></li><li>挂载 Webpack 内存文件读取方法覆盖本地文件读取的逻辑<br /></li></ul><pre class=" language-javascript"><code class="language-javascript">app<span class="token punctuation">.</span>vue<span class="token punctuation">.</span>renderBundle <span class="token operator">=</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> context<span class="token punctuation">,</span> options<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> filePath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">isAbsolute</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">?</span> name <span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>view<span class="token punctuation">.</span>root<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> promise <span class="token operator">=</span> app<span class="token punctuation">.</span>webpack<span class="token punctuation">.</span>fileSystem<span class="token punctuation">.</span><span class="token function">readWebpackMemoryFile</span><span class="token punctuation">(</span>filePath<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">co</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> content <span class="token operator">=</span> <span class="token keyword">yield</span> promise<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>content<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`read webpack memory file[</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>filePath<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">]      content is empty, please check if the file exists`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> renderBundle<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>vue<span class="token punctuation">)</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> context<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><ul><li>Worker 监听 Webpack 编译状态, 检测 Webpack 编译是否完成, 如果未完成, 显示 Webpack 编译 Loading, 如果编译完成, 自动打开浏览器<br /></li><li>Webpack 编译完成, Agent 发送消息给 Worker,  Worker 检测到编译完成, 自动打开浏览器, Egg 服务正式可用<br /></li></ul><h4 id="3-2-2-本地开发服务端渲染页面访问"><a href="#3-2-2-本地开发服务端渲染页面访问" class="headerlink" title="3.2.2 本地开发服务端渲染页面访问"></a>3.2.2 本地开发服务端渲染页面访问</h4><p><img src="https://cdn.yuque.com/yuque/0/2018/png/116733/1528521836714-be7dd0fe-f89d-4a50-af97-902f1d0fe50f.png#align=left&display=inline&height=548&originHeight=663&originWidth=1000&status=done&width=827" alt=""></p><ul><li><p>浏览器输入URL请求地址, 然后Egg接收到请求, 然后进入Controller<br /></p></li><li><p>Node层获取数据后(Node通过http/rpc方式调用Java后端API数据接口), 进入模板render流程<br /></p></li><li><p>进入render流程后, 通过worker进程通过调用 <code>app.messenger.sendToAgent</code> 发送文件名给Agent进程, 同时通过 <code>app.messenger.on</code> 启动监听监听agent发送过来的消<br /></p></li><li><p>Agent进程获取到文件名后, 从Webpack编译内存里面获取文件内容, 然后Agent 通过 <code>agent.messenger.sendToApp</code> 把文件内容发送给Worker进程<br /></p></li><li><p>Worker进程获取到内容以后, 进行Vue编译HTML, 编译成HTML后, 进入jss/css资源依赖流程<br /></p></li><li><p>如果启动代理模式(见easywebpack的setProxy),  HTML直接注入相对路径的JS/CSS, 如下:</p><p>   页面可以直接使用 <code>/public/client/js/vendor.js</code> 相对路径,  <code>/public/client/js/vendor.js</code> 由后端框架代理转发到webpack编译服务, 然后返回内容给后端框架, 这里涉及两个应用通信. 如下:<br /></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/public/client/css/home/android/home.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre></li><li><br />```javascript<script type="text/javascript" src="/public/client/js/vendor.js"></script><script type="text/javascript" src="/public/client/js/home.js"></script>```</li><li><p>如果非代理模式,  HTML直接注入必须是绝对路径的 JS/CSS , 如下:<br /></p><blockquote><p>页面必须使用 <code>http://127.0.0.1:9001/public/client/js/vendor.js</code> 绝对路径</p></blockquote></li><li><br />```html<link rel="stylesheet" href="http://127.0.0.1:9001/public/client/css/home/android/home.css">```</li><li><br />```javascript<script type="text/javascript" src="http://127.0.0.1:9001/public/client/js/vendor.js"></script><script type="text/javascript" src="http://127.0.0.1:9001/public/client/js/home.js"></script>```</li><li><p>其中 <a href="http://127.0.0.1:9001/" target="_blank" rel="noopener">http://127.0.0.1:9001</a> 是 Agent里面启动的Webpack编译服务地址, 与Egg应用地址是两回事</p></li><li><p>最后, 模板渲染完成, 服务器输出HTML内容给浏览器.<br /></p></li></ul><h3 id="4-发布模式构建流程和运行模式"><a href="#4-发布模式构建流程和运行模式" class="headerlink" title="4. 发布模式构建流程和运行模式"></a>4. 发布模式构建流程和运行模式</h3><ul><li>easywebpack 通过本地构建或者ci直接构建好服务端和客户端渲染文件到磁盘, 命令是 <code>easy build prod</code><br /></li><li>Egg render 直接读取本地文件, 然后渲染成 HTML.<br /></li><li>根据 <code>manfifest.json</code> 文件注入 jss/css 资源依赖注入.<br /></li><li>模板渲染完成, 服务器输出HTML内容给浏览器.<br /></li></ul><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ul><li>Egg + Vue：<a href="/egg-vue/build">/egg-vue/build</a></li><li>Egg + React ： <a href="/egg-react/build">/egg-react/build</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;h2 id=&quot;1-背景&quot;&gt;&lt;a href=&quot;#1-背景&quot; class=&quot;headerlink&quot; title=&quot;1. 背景&quot;&gt;&lt;/a&gt;1. 背景&lt;/h2&gt;&lt;p&gt;在
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Babel 构建优化</title>
    <link href="https://easyjs.cn/blog/sg8avg/"/>
    <id>https://easyjs.cn/blog/sg8avg/</id>
    <published>2020-05-31T09:43:53.000Z</published>
    <updated>2020-05-31T09:43:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>在进行 Egg + Vue 进行 SSR 模式开发时，运行 <code>npm run dev</code>  后你会看到如下界面， 启动了两个 Webpack 构建实例：Node 模式 和 Web 模式。SSR 运行需要 Webapck 单独构建 <code>target: node</code>   和 <code>target: web</code>  主要的差异在于 Webpack需要处理 require 机制以及磨平 Node 和 浏览器运行环境的差异。</p><p><img src="https://cdn.nlark.com/yuque/0/2018/png/116733/1536128449742-0024eb69-d2c7-4e47-8426-ff2cc85396d5.png#align=left&display=inline&height=83&originHeight=97&originWidth=962&status=done&width=827" alt=""></p><p>在 <code>easywebpack</code> 4.6.0 以下 SSR 版本构建方案实现时，Node 和 Web 模式采用的是一份 <code>.babelrc</code>  配置，这样导致构建的后代码全部变成 es5。 但 Node 现在LTS 版本已经是 8 了，而且 10 也在开发，不久将会发布。这样导致 Node 端构建的代码没有用到 ES6 的特性，我们期望根据 Node 版本构建指定 ES 模式代码，这样可以带来两个好处：</p><h2 id="easywebpack-4-6-0-以下-babelrc-配置"><a href="#easywebpack-4-6-0-以下-babelrc-配置" class="headerlink" title="easywebpack 4.6.0 以下.babelrc  配置"></a>easywebpack 4.6.0 以下<code>.babelrc</code>  配置</h2><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"presets"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"env"</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token property">"modules"</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"plugins"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"transform-object-rest-spread"</span><span class="token punctuation">,</span>    <span class="token string">"syntax-dynamic-import"</span><span class="token punctuation">,</span>    <span class="token string">"transform-object-assign"</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"comments"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span></code></pre><ul><li>Node 端运行的 ES6 模块更好的执行效率<br /></li><li>Node 端编译成 ES6，可以减小构建好的 JSBundle 文件大小和编译转换时间，同时带来更好的文件读取效率和执行效率。<br /></li></ul><h2 id="easywebpack-4-7-0-支持-Node-和-Web-指定-ES-模式构建"><a href="#easywebpack-4-7-0-支持-Node-和-Web-指定-ES-模式构建" class="headerlink" title="easywebpack 4.7.0+ 支持 Node 和 Web 指定 ES 模式构建"></a>easywebpack 4.7.0+ 支持 Node 和 Web 指定 ES 模式构建</h2><blockquote><p>注意： 升级 babel 7 后，不支持如下 env 方式配置</p></blockquote><p><strong>关键措施：</strong> <a href="https://www.babeljs.cn/docs/usage/babelrc/" target="_blank" rel="noopener">bable 本身支持通过 process.env.BABEL_ENV  加载 .babelrc  配置文件</a>:</p><p><img src="https://cdn.nlark.com/yuque/0/2018/png/116733/1536129170471-43b9b60e-a7da-47c3-8ad7-ef1ff7e56c22.png#align=left&display=inline&height=295&originHeight=311&originWidth=871&status=done&width=827" alt=""></p><p><strong>如果.babelrc   配置了 <code>env.node</code>  或者 <code>env.web</code>  节点配置，easywebpack 底层将自动设置  **<a href="https://www.babeljs.cn/docs/usage/babelrc/" target="_blank" rel="noopener">process.env.BABEL_ENV</a></strong> 变量， 启动 BABEL ENV 编译机制。easywebpack 底层支持  <strong><a href="https://www.babeljs.cn/docs/usage/babelrc/" target="_blank" rel="noopener">process.env.BABEL_ENV</a></strong> 支持  node 和 web 的 env  .babelrc   节点配置。 另外关键的 target 配置：**</p><ul><li><code>target.node</code> :  Node 环境编译模式，可以是指定版本，比如配置：8.9.3，也可以配置当前运行的node版本：current。<br /></li><li><code>target.browsers</code> : Web 浏览器编译模式，可以配置浏览器的版本等<br /></li></ul><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"env"</span><span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token property">"node"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"presets"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"env"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        <span class="token property">"modules"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        <span class="token property">"targets"</span><span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"node"</span><span class="token operator">:</span> <span class="token string">"current"</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token property">"plugins"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token string">"transform-object-rest-spread"</span><span class="token punctuation">,</span>        <span class="token string">"syntax-dynamic-import"</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"web"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"presets"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"env"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        <span class="token property">"modules"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        <span class="token property">"targets"</span><span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"browsers"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"last 2 versions"</span><span class="token punctuation">,</span> <span class="token string">"safari >= 7"</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token property">"plugins"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token string">"transform-object-rest-spread"</span><span class="token punctuation">,</span>        <span class="token string">"syntax-dynamic-import"</span><span class="token punctuation">,</span>        <span class="token string">"transform-object-assign"</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"comments"</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">}</span></code></pre><h2 id="构建效率和大小"><a href="#构建效率和大小" class="headerlink" title="构建效率和大小"></a>构建效率和大小</h2><p>合理的使用 BABEL 编译模式，能够极大提高构建速度和JS 文件大小。 通过测试，启用 BABEL_ENV 模式和合理的配置 targets.browsers 参数，对于大型的页面，能够显著提升构建速度。下面通过 <code>easy build prod</code>  针对 <a href="https://github.com/hubcarl/egg-vue-webpack-boilerplate" target="_blank" rel="noopener">https://github.com/hubcarl/egg-vue-webpack-boilerplate</a> 测试的效果，页面比较简单，效果不明显。</p><table><thead><tr><th><strong>模式</strong></th><th><strong>构建大小(app/app.js)</strong></th></tr></thead><tbody><tr><td>不启用BABEL按需编译</td><td>15.6 KiB</td></tr><tr><td>启用BABEL按需编译</td><td>15.2 KiB</td></tr><tr><td></td><td></td></tr></tbody></table><h2 id="Babel-7-升级"><a href="#Babel-7-升级" class="headerlink" title="Babel 7 升级"></a>Babel 7 升级</h2><p><a href="/easywebpack/babel7">/easywebpack/babel7</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在进行 Egg + Vue 进行 SSR 模式开发时，运行 &lt;code&gt;npm run dev&lt;/code&gt;  后你会看到如下界面， 启动了两个 Webpack 构建实例：Node 模式 和 Web 模式。SSR 运行需要 Webapck 单独构建 &lt;code&gt;target
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Hybrid系列-Cordova android框架详解</title>
    <link href="https://easyjs.cn/blog/sxys82/"/>
    <id>https://easyjs.cn/blog/sxys82/</id>
    <published>2020-05-31T09:43:53.000Z</published>
    <updated>2020-05-31T09:43:53.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>原文：<a href="https://hubcarl.github.io/blog/2015/04/11/hybrid-cordova/" target="_blank" rel="noopener">https://hubcarl.github.io/blog/2015/04/11/hybrid-cordova/</a></p></blockquote><h2 id="一、Cordova-核心java类说明"><a href="#一、Cordova-核心java类说明" class="headerlink" title="一、Cordova 核心java类说明"></a>一、Cordova 核心java类说明</h2><p>CordovaActivity：Cordova Activity入口，已实现PluginManager、WebView的相关初始化工作, 只需继承CordovaActivity实现自己的业务需求。</p><p>PluginManager： 插件管理器</p><p>ExposedJsApi ：javascript调用Native， 通过插件管理器PluginManager 根据service找到具体实现类。</p><p>NativeToJsMessageQueue：Native调用javascript，主要包括三种方式：loadUrl 、 轮询、反射WebViewCore执行js.</p><h2 id="二、-Cordova框架类图"><a href="#二、-Cordova框架类图" class="headerlink" title="二、 Cordova框架类图"></a>二、 Cordova框架类图</h2><p><img src="http://images.cnitblog.com/blog/53807/201412/301240508259041.png#align=left&display=inline&height=726&originHeight=1042&originWidth=1070&status=done&width=746" alt=""></p><h2 id="三、Cordova框架启动"><a href="#三、Cordova框架启动" class="headerlink" title="三、Cordova框架启动"></a>三、Cordova框架启动</h2><p>当实现了DroidGap或者CordovaInterface接口的Activity的onCreate方法中调用DroidGap的loadUrl方法即启动了Cordova框架。</p><p>Cordova提供了一个Class（DroidGap extends CordovaActivity）和一个interface（CordovaInterface）来让Android开发者开发Cordova。</p><p>一般情况下实现DroidGap即可，因为DroidGap类已经做了很多准备工作，可以说DroidGap类是Cordova框架的一个重要部分；如果在必要的情况下实现CordovaInterface接口，那么这个类中很多DroidGap的功能需要自己去实现。继承了DroidGap或者CordovaInterface的Activity就是一个独立的Cordova模块，独立的Cordova模块指的是每个实现了DroidGap或者CordovaInterface接口的Activity都对应一套独立的WebView，Plugin，PluginManager，没有共享的。</p><p>在初始化完CordovaWebView后调用CordovaWebView.loadUrl()。此时完成Cordova的启动。</p><h3 id="1-Cordova关联对象初始化"><a href="#1-Cordova关联对象初始化" class="headerlink" title="1.Cordova关联对象初始化"></a>1.Cordova关联对象初始化</h3><p>在实例化CordovaWebView的时候, CordovaWebView对象会去创建一个属于当前CordovaWebView对象的插件管理器PluginManager对象，一个消息队列NativeToJsMessageQueue对象，一个JavascriptInterface对象ExposedJsApi，并将ExposedJsApi对象添加到CordovaWebView中，JavascriptInterface名字为：_cordovaNative。</p><h3 id="2-Cordova的JavascriptInterface"><a href="#2-Cordova的JavascriptInterface" class="headerlink" title="2. Cordova的JavascriptInterface"></a>2. Cordova的JavascriptInterface</h3><p>在创建ExposedJsApi时需要CordovaWebView的PluginManager对象和NativeToJsMessageQueue对象。因为所有的JS端与Android native代码交互都是通过ExposedJsApi对象的exec方法。在exec方法中执行PluginManager的exec方法，PluginManager去查找具体的Plugin并实例化然后再执行Plugin的execute方法，并根据同步标识判断是同步返回给JS消息还是异步。由NativeToJsMessageQueue统一管理返回给JS的消息。</p><h3 id="3-何时加载Plugin，如何加载"><a href="#3-何时加载Plugin，如何加载" class="headerlink" title="3. 何时加载Plugin，如何加载"></a>3. 何时加载Plugin，如何加载</h3><p>Cordova在启动每个Activity的时候都会将配置文件中的所有plugin加载到PluginManager。那么是什么时候将这些plugin加载到PluginManager的呢？在b中说了最后会调用CordovaWebView.loadUrl()，对，就在这个时候会去初始化PluginManager并加载plugin。PluginManager在加载plugin的时候并不是马上实例化plugin对象，而是只是将plugin的Class名字保存到一个hashmap中，用service名字作为key值。<br>当JS端通过JavascriptInterface接口的ExposedJsApi对象请求Android时，PluginManager会从hashmap中查找到plugin，如果该plugin还未实例化，利用java反射机制实例化该plugin，并执行plugin的execute方法。</p><h3 id="4．Cordova的数据返回"><a href="#4．Cordova的数据返回" class="headerlink" title="4．Cordova的数据返回"></a>4．Cordova的数据返回</h3><p>Cordova中通过exec()函数请求android插件，数据的返回可同步也可以异步于exec()函数的请求。在开发android插件的时候可以重写public boolean isSynch(String action)方法来决定是同步还是异步。Cordova在android端使用了一个队列(NativeToJsMessageQueue)来专门管理返回给JS的数据。</p><p>1）同步</p><p>Cordova在执行完exec()后，android会马上返回数据，但不一定就是该次请求的数据，可能是前面某次请求的数据；因为当exec()请求的插件是允许同步返回数据的情况下，Cordova也是从NativeToJsMessageQueue队列头pop头数据并返回。然后再根据callbackID反向查找某个JS请求，并将数据返回给该请求的success函数。</p><p>2）异步</p><p>Cordova在执行完exec()后并不会同步得到一个返回数据。Cordova在执行exec()的同时启动了一个XMLHttpRequest对象方式或者prompt()函数方式的循环函数来不停的去获取NativeToJsMessageQueue队列中的数据，并根据callbackID反向查找到相对应的JS请求，并将该数据交给success函数。</p><p>Cordova对本地的HTML文件(file:// 开头的URL)或者手机设置有代理的情况下使用XMLHttpRequest方式获取返回数据，其他则使用prompt()函数方式获取返回数据。</p><h3 id="5、webView-sendJavascript-发送到js队列，onNativeToJsMessageAvailable-负责执行js"><a href="#5、webView-sendJavascript-发送到js队列，onNativeToJsMessageAvailable-负责执行js" class="headerlink" title="5、webView.sendJavascript 发送到js队列，onNativeToJsMessageAvailable 负责执行js."></a>5、webView.sendJavascript 发送到js队列，onNativeToJsMessageAvailable 负责执行js.</h3><p>Native 调用 JS 执行方式有三种实现 LoadUrlBridgeMode、 OnlineEventsBridgeMode、PrivateApiBridgeMode</p><ul><li>1、webView.sendJavascript 发送js方法到JS队列</li></ul><ul><li>2、onJsPrompt 方法拦截，获取调用方式</li></ul><blockquote><p>如果是gap_bridge_mode，则执行 appView.exposedJsApi.setNativeToJsBridgeMode(Integer.parseInt(message));<br>如果是gap_poll, 则执行 appView.exposedJsApi.retrieveJsMessages(“1”.equals(message));</p></blockquote><ul><li>3、调用setBridgeMode 方法调用onNativeToJsMessageAvailable 执行javascript调用</li></ul><h2 id="四、Native调用javascript-方式：NativeToJsMessageQueue"><a href="#四、Native调用javascript-方式：NativeToJsMessageQueue" class="headerlink" title="四、Native调用javascript 方式：NativeToJsMessageQueue"></a>四、Native调用javascript 方式：NativeToJsMessageQueue</h2><h3 id="1、loadUrl-javascript-调用方式"><a href="#1、loadUrl-javascript-调用方式" class="headerlink" title="1、loadUrl javascript 调用方式"></a>1、loadUrl javascript 调用方式</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">LoadUrlBridgeMode</span> <span class="token keyword">extends</span> <span class="token class-name">BridgeMode</span><span class="token keyword">if</span> <span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"file://"</span><span class="token punctuation">)</span> <span class="token operator">||</span> url<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"javascript:"</span><span class="token punctuation">)</span> <span class="token operator">||</span> Config<span class="token punctuation">.</span><span class="token function">isUrlWhiteListed</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h3 id="2、Navitive事件通知javascript轮询获取Native数据"><a href="#2、Navitive事件通知javascript轮询获取Native数据" class="headerlink" title="2、Navitive事件通知javascript轮询获取Native数据"></a>2、Navitive事件通知javascript轮询获取Native数据</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">OnlineEventsBridgeMode</span> <span class="token keyword">extends</span> <span class="token class-name">BridgeMode</span></code></pre><h3 id="3、通过Java反射获取webview-的sendMessage-方法执行js，-支持-Android-3-2-4之上-包含"><a href="#3、通过Java反射获取webview-的sendMessage-方法执行js，-支持-Android-3-2-4之上-包含" class="headerlink" title="3、通过Java反射获取webview 的sendMessage 方法执行js， 支持 Android 3.2.4之上(包含)"></a>3、通过Java反射获取webview 的sendMessage 方法执行js， 支持 Android 3.2.4之上(包含)</h3><p>—可以解决loadUrl 隐藏键盘的问题：当你的焦点在输入，如果这通过loadUrl调用js，会导致键盘隐藏</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">PrivateApiBridgeMode</span> <span class="token keyword">extends</span> <span class="token class-name">BridgeMode</span>Field f <span class="token operator">=</span> webViewClass<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"mProvider"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>f<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>webViewObject <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>webView<span class="token punctuation">)</span><span class="token punctuation">;</span>webViewClass <span class="token operator">=</span> webViewObject<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Field f <span class="token operator">=</span> webViewClass<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"mWebViewCore"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>f<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>webViewCore <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>webViewObject<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>webViewCore <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>   sendMessageMethod <span class="token operator">=</span> webViewCore<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"sendMessage"</span><span class="token punctuation">,</span> Message<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   sendMessageMethod<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> Message execJsMessage <span class="token operator">=</span> Message<span class="token punctuation">.</span><span class="token function">obtain</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> EXECUTE_JS<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span> sendMessageMethod<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>webViewCore<span class="token punctuation">,</span> execJsMessage<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="4、Native注册javascript接口-cordovaNative"><a href="#4、Native注册javascript接口-cordovaNative" class="headerlink" title="4、Native注册javascript接口 _cordovaNative"></a>4、Native注册javascript接口 _cordovaNative</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">boolean</span> isHoneycomb <span class="token operator">=</span> <span class="token punctuation">(</span>SDK_INT <span class="token operator">>=</span> Build<span class="token punctuation">.</span>VERSION_CODES<span class="token punctuation">.</span>HONEYCOMB <span class="token operator">&amp;&amp;</span> SDK_INT <span class="token operator">&lt;=</span> Build<span class="token punctuation">.</span>VERSION_CODES<span class="token punctuation">.</span>HONEYCOMB_MR2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Bug being that Java Strings do not get converted to JS strings automatically.</span><span class="token comment" spellcheck="true">// This isn't hard to work-around on the JS side, but it's easier to just use the prompt bridge instead.</span><span class="token keyword">if</span> <span class="token punctuation">(</span>isHoneycomb <span class="token operator">||</span> <span class="token punctuation">(</span>SDK_INT <span class="token operator">&lt;</span> Build<span class="token punctuation">.</span>VERSION_CODES<span class="token punctuation">.</span>GINGERBREAD<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Disabled addJavascriptInterface() bridge since Android version is old."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>SDK_INT <span class="token operator">&lt;</span> Build<span class="token punctuation">.</span>VERSION_CODES<span class="token punctuation">.</span>HONEYCOMB <span class="token operator">&amp;&amp;</span> Build<span class="token punctuation">.</span>MANUFACTURER<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"unknown"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// addJavascriptInterface crashes on the 2.3 emulator.</span>Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Disabled addJavascriptInterface() bridge callback due to a bug on the 2.3 emulator"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addJavascriptInterface</span><span class="token punctuation">(</span>exposedJsApi<span class="token punctuation">,</span> <span class="token string">"_cordovaNative"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;原文：&lt;a href=&quot;https://hubcarl.github.io/blog/2015/04/11/hybrid-cordova/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://hubcarl.github
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Git 使用技巧</title>
    <link href="https://easyjs.cn/blog/vfhw62/"/>
    <id>https://easyjs.cn/blog/vfhw62/</id>
    <published>2020-05-31T09:43:53.000Z</published>
    <updated>2020-05-31T09:43:53.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>原文： <a href="https://hubcarl.github.io/blog/2017/09/23/git/" target="_blank" rel="noopener">https://hubcarl.github.io/blog/2017/09/23/git/</a></p></blockquote><h3 id="Git保存用户名密码"><a href="#Git保存用户名密码" class="headerlink" title="Git保存用户名密码"></a>Git保存用户名密码</h3><pre><code>git config credential.helper store</code></pre><h3 id="Git分支批量清理"><a href="#Git分支批量清理" class="headerlink" title="Git分支批量清理"></a>Git分支批量清理</h3><h3 id="本地分支"><a href="#本地分支" class="headerlink" title="本地分支"></a>本地分支</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> branch <span class="token operator">|</span> <span class="token function">grep</span> -E feature\/<span class="token punctuation">(</span>1\.<span class="token operator">|</span>activity<span class="token operator">|</span>btn_s<span class="token operator">|</span>refresh<span class="token operator">|</span>share<span class="token operator">|</span>3\.1<span class="token punctuation">)</span><span class="token operator">|</span><span class="token function">xargs</span> <span class="token function">git</span> branch -D<span class="token function">git</span> branch <span class="token operator">|</span> <span class="token function">grep</span> -E develop\/<span class="token punctuation">(</span>test<span class="token operator">|</span>script_inline<span class="token operator">|</span>egg3<span class="token operator">|</span>3\.1<span class="token punctuation">)</span><span class="token operator">|</span><span class="token function">xargs</span> <span class="token function">git</span> branch -D<span class="token function">git</span> branch <span class="token operator">|</span> <span class="token function">grep</span> -E release\/<span class="token operator">|</span><span class="token function">xargs</span> <span class="token function">git</span> branch -D// 删除除master的本地分支<span class="token function">git</span> branch <span class="token operator">|</span> <span class="token function">grep</span> -v <span class="token string">'master'</span><span class="token operator">|</span><span class="token function">xargs</span> <span class="token function">git</span> branch -D// -v 取反<span class="token function">git</span> branch <span class="token operator">|</span> <span class="token function">grep</span> -v <span class="token string">'master\|feature\/benchmark\|feature\/async-component'</span>// 取反删除<span class="token function">git</span> branch <span class="token operator">|</span> <span class="token function">grep</span> -v <span class="token string">'master\|feature\/benchmark\|feature\/async-component'</span><span class="token operator">|</span><span class="token function">xargs</span> <span class="token function">git</span> branch -D</code></pre><h3 id="远程分支"><a href="#远程分支" class="headerlink" title="远程分支"></a>远程分支</h3><pre class=" language-bash"><code class="language-bash">// 查找取反显示<span class="token function">git</span> branch -r<span class="token operator">|</span> <span class="token function">grep</span> -v <span class="token string">'master\|feature\/benchmark\|feature\/async-component'</span><span class="token function">git</span> branch -r <span class="token operator">|</span> <span class="token function">grep</span> -v <span class="token string">'master\|feature\/benchmark\|feature\/async-component'</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{print <span class="token variable">$1</span>}'</span>// 查找取反<span class="token function">git</span> branch -r<span class="token operator">|</span> <span class="token function">grep</span> -v <span class="token string">'master\|feature\/benchmark\|feature\/async-component\|develop\/stearmrender'</span>// 查找<span class="token function">git</span> branch -r<span class="token operator">|</span> <span class="token function">grep</span> -E <span class="token string">'master|feature\/benchmark|feature\/async-component|develop\/stearmrender'</span>// 筛选远程分支<span class="token function">git</span> branch -r<span class="token operator">|</span> <span class="token function">awk</span> -F <span class="token string">'[/]'</span> <span class="token string">'/release|hotfix/ {printf "%s/%s\n",<span class="token variable">$2</span>,<span class="token variable">$3</span>}'</span> // 删除远程分支<span class="token function">git</span> branch -r<span class="token operator">|</span> <span class="token function">awk</span> -F <span class="token string">'[/]'</span> <span class="token string">'/release|hotfix/ {printf "%s/%s\n",<span class="token variable">$2</span>,<span class="token variable">$3</span>}'</span><span class="token operator">|</span><span class="token function">xargs</span> -i <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token function">git</span> push origin :<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token function">git</span> branch -r <span class="token operator">|</span><span class="token function">awk</span> -F <span class="token string">'[/]'</span> <span class="token string">'/(master|feature\/benchmark|feature\/async-component)/{printf "%s/%s/%s\n", <span class="token variable">$2</span>,<span class="token variable">$3</span>,<span class="token variable">$4</span>}'</span> <span class="token function">git</span> branch -r <span class="token operator">|</span><span class="token function">awk</span> -F <span class="token string">'[/]'</span> <span class="token string">'/(master|feature\/benchmark|feature\/async-component)/{printf "%s/%s/%s\n", <span class="token variable">$2</span>,<span class="token variable">$3</span>,<span class="token variable">$4</span>}'</span> <span class="token operator">|</span><span class="token function">xargs</span> -I <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token function">git</span> push origin :<span class="token punctuation">{</span><span class="token punctuation">}</span>// 终极取反筛选查找<span class="token function">git</span> branch -r<span class="token operator">|</span> <span class="token function">grep</span> -v <span class="token string">'master\|feature\/benchmark\|feature\/develop\/stearmrender'</span><span class="token operator">|</span><span class="token function">awk</span> -F <span class="token string">'[/]'</span> <span class="token string">'/\// {printf "%s/%s\n", <span class="token variable">$2</span>,<span class="token variable">$3</span>}'</span>// 终极取反筛选查找删除<span class="token function">git</span> branch -r<span class="token operator">|</span> <span class="token function">grep</span> -v <span class="token string">'master\|feature\/benchmark\|feature\/|develop\/stearmrender'</span><span class="token operator">|</span><span class="token function">awk</span> -F <span class="token string">'[/]'</span> <span class="token string">'/\// {printf "%s/%s\n", <span class="token variable">$2</span>,<span class="token variable">$3</span>}'</span> <span class="token operator">|</span><span class="token function">xargs</span> -I <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token function">git</span> push origin :<span class="token punctuation">{</span><span class="token punctuation">}</span>// 分支格式： feature/test，  删除远程除master的分支<span class="token function">git</span> branch -r<span class="token operator">|</span> <span class="token function">grep</span> -v <span class="token string">'master'</span><span class="token operator">|</span><span class="token function">awk</span> -F <span class="token string">'[/]'</span> <span class="token string">'/\// {printf "%s/%s\n", <span class="token variable">$2</span>,<span class="token variable">$3</span>}'</span> <span class="token operator">|</span><span class="token function">xargs</span> -I <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token function">git</span> push origin :<span class="token punctuation">{</span><span class="token punctuation">}</span>// 分支格式： feature/test/test，  删除远程除master的分支<span class="token function">git</span> branch -r<span class="token operator">|</span> <span class="token function">grep</span> -v <span class="token string">'master'</span><span class="token operator">|</span><span class="token function">awk</span> -F <span class="token string">'[/]'</span> <span class="token string">'/\// {printf "%s/%s/%s\n", <span class="token variable">$2</span>,<span class="token variable">$3</span>,<span class="token variable">$4</span>}'</span> <span class="token operator">|</span> <span class="token function">xargs</span> -I <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token function">git</span> push origin :<span class="token punctuation">{</span><span class="token punctuation">}</span>// 分支格式： feature/test/test/test，  删除远程除master的分支<span class="token function">git</span> branch -r<span class="token operator">|</span> <span class="token function">grep</span> -v <span class="token string">'master'</span><span class="token operator">|</span><span class="token function">awk</span> -F <span class="token string">'[/]'</span> <span class="token string">'/\// {printf "%s/%s/%s/%s\n", <span class="token variable">$2</span>,<span class="token variable">$3</span>,<span class="token variable">$4</span>,<span class="token variable">$5</span>}'</span> <span class="token operator">|</span><span class="token function">xargs</span> -I <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token function">git</span> push origin :<span class="token punctuation">{</span><span class="token punctuation">}</span>// 运行git fetch -p 同步最新远程分支</code></pre><h3 id="curl"><a href="#curl" class="headerlink" title="curl"></a>curl</h3><p>curl -Lo /dev/null -skw “time_connect: %{time_connect}<br>s\ntime_namelookup: %{time_namelookup}<br>s\ntime_pretransfer: %{time_pretransfer}<br>s\ntime_starttransfer: %{time_starttransfer}<br>s\ntime_redirect: %{time_redirect}<br>s\nspeed_download: %{speed_download} B/s\ntime_total: %{time_total} s\n\n”</p><h3 id="git-commit-规范"><a href="#git-commit-规范" class="headerlink" title="git commit 规范"></a>git commit 规范</h3><p>（1）type</p><p>提交 commit 的类型，包括以下几种</p><ul><li><p>feat: 新功能</p></li><li><p>fix: 修复问题</p></li><li><p>docs: 修改文档</p></li><li><p>style: 修改代码格式，不影响代码逻辑</p></li><li><p>refactor: 重构代码，理论上不影响现有功能</p></li><li><p>perf: 提升性能</p></li><li><p>test: 增加修改测试用例</p></li><li><p>chore: 修改工具相关（包括但不限于文档、代码生成等）</p></li><li><p>deps: 升级依赖</p></li></ul><p>（2）scope<br />修改文件的范围（包括但不限于 doc, middleware, proxy, core, config, plugin）</p><p>（3）subject<br />用一句话清楚的描述这次提交做了什么</p><h3 id="changelog"><a href="#changelog" class="headerlink" title="changelog"></a>changelog</h3><ul><li>git-extras</li></ul><pre class=" language-bash"><code class="language-bash">brew <span class="token function">install</span> git-extrasgit-extras 命令生成 changelog 和 release 自动打 tag <span class="token operator">&amp;</span> push <span class="token operator">&amp;</span> trigger hook$ <span class="token function">git</span> changelog <span class="token comment" spellcheck="true"># 需要修改 </span>Histroy.md 和 package.json 的版本号，如需要发布 1.0.0 $ <span class="token function">git</span> release 1.0.0提交规范实例：git commit -m  <span class="token string">'fix(<span class="token variable">$guild</span>): solve bugs'</span></code></pre><ul><li>conventional-changelog-cli</li></ul><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span> <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"changelog"</span><span class="token operator">:</span> <span class="token string">"conventional-changelog -p angular -i CHANGELOG.md -s"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre><h3 id="如果一个包发布在-NPM-TNPM-中，可以快速修改其package-json版本号。会自动触发一个-git-提交。"><a href="#如果一个包发布在-NPM-TNPM-中，可以快速修改其package-json版本号。会自动触发一个-git-提交。" class="headerlink" title="如果一个包发布在 NPM / TNPM 中，可以快速修改其package.json版本号。会自动触发一个 git 提交。"></a>如果一个包发布在 NPM / TNPM 中，可以快速修改其package.json版本号。会自动触发一个 git 提交。</h3><ul><li><p>递增一个修订号 npm version patch</p></li><li><p>递增一个次版本号 npm version minor</p></li><li><p>递增一个主版本号 npm version major</p></li></ul><h3 id="merge-request"><a href="#merge-request" class="headerlink" title="merge request"></a>merge request</h3><p><strong>合并commit message</strong></p><p>git rebase -i HEAD~3</p><ul><li><p>pick</p></li><li><p>edit</p></li><li><p>squash</p></li></ul><p><a href="https://git-scm.com/book/zh/v1/Git-%E5%B7%A5%E5%85%B7-%E9%87%8D%E5%86%99%E5%8E%86%E5%8F%B2" target="_blank" rel="noopener">https://git-scm.com/book/zh/v1/Git-%E5%B7%A5%E5%85%B7-%E9%87%8D%E5%86%99%E5%8E%86%E5%8F%B2</a></p><p><strong>修复问题发布一个npm版本</strong></p><ol><li><p>checkout new branch</p></li><li><p>修改代码，提交 git commit -m  ‘fix($guild): solve bugs’</p></li><li><p>git changelog  需要修改 <a href="http://Histroy.md" target="_blank" rel="noopener">Histroy.md</a> 和 package.json 的版本号，如需要发布 1.0.0</p></li><li><p>npm version patch 升级一个小版本</p></li><li><p>git release 1.0.0  (自动打 tag &amp; push &amp; trigger hook)</p></li><li><p>npm publish 发布一个版本</p></li></ol><h5 id="撤销commit"><a href="#撤销commit" class="headerlink" title="撤销commit"></a>撤销commit</h5><ul><li>git reset –soft HEAD^1  撤销 最新 1次 commit，代码保留</li><li>git reset –hard HEAD^1 删除改动代码，撤销 commit 和 add ， 这样就恢复到了上一次的commit状态。</li></ul><h5 id="修改-commit信息"><a href="#修改-commit信息" class="headerlink" title="修改 commit信息"></a>修改 commit信息</h5><ul><li>git commit –amend</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;原文： &lt;a href=&quot;https://hubcarl.github.io/blog/2017/09/23/git/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://hubcarl.github.io/blog/2
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Egg + Webpack 自定义前端渲染</title>
    <link href="https://easyjs.cn/blog/tmiwa7/"/>
    <id>https://easyjs.cn/blog/tmiwa7/</id>
    <published>2020-05-31T09:43:53.000Z</published>
    <updated>2020-05-31T09:43:53.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在 <a href="/egg-react/web">前端渲染模式</a> 和 <a href="/egg-react/web">asset 渲染模式</a> 章节讲到了基于 React 的前端渲染模式，但都依赖  <a href="https://github.com/easy-team/egg-view-react-ssr" target="_blank" rel="noopener">egg-view-react-ssr</a> 插件，那如何基于已有 egg 模板引擎 (<a href="https://github.com/eggjs/egg-view-nunjucks" target="_blank" rel="noopener">egg-view-nunjucks</a> 或 <a href="https://github.com/eggjs/egg-view-ejs" target="_blank" rel="noopener">egg-view-ejs</a>) + Webpack 完全自定义前端方案呢？</p><h2 id="关键问题"><a href="#关键问题" class="headerlink" title="关键问题"></a>关键问题</h2><ul><li>本地开发 Webpack 与 Egg 集成，可以直接使用 <a href="/blog/wumyiw">egg-webpack</a>， 该插件可以独立使用, 当然你可以实现。</li><li>通过 <a href="https://github.com/eggjs/egg-view-nunjucks" target="_blank" rel="noopener">egg-view-nunjucks</a> 或 <a href="https://github.com/eggjs/egg-view-ejs" target="_blank" rel="noopener">egg-view-ejs</a> 插件进行数据绑定</li><li>通过 <code>html-webpack-plugin</code>  插件生成 HTML 文件，并自动注入 JS/CSS 依赖</li><li>本地开发时，需要通过 <code>write-file-webpack-plugin</code>  插件把 Webpack HTML 文件写到本地。Webpack 默认是在内存里面，无法直接读取。</li></ul><h2 id="如何实现"><a href="#如何实现" class="headerlink" title="如何实现"></a>如何实现</h2><blockquote><p>这里以 <a href="https://github.com/eggjs/egg-view-nunjucks" target="_blank" rel="noopener">egg-view-nunjucks</a> 为例，其它模板引擎类似。</p></blockquote><ul><li>安装 <a href="https://github.com/eggjs/egg-view-nunjucks" target="_blank" rel="noopener">egg-view-nunjucks</a> 插件依赖</li></ul><p><code>npm install egg-view-nunjucks --save</code> <br /><code>npm install egg-webpack --save-dev</code></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ${root}/package.json</span><span class="token punctuation">{</span>   <span class="token string">"dependencies"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>     <span class="token string">"egg-webpack"</span><span class="token punctuation">:</span> <span class="token string">"^4.0.0"</span><span class="token punctuation">,</span>     <span class="token string">"egg-view-nunjucks"</span><span class="token punctuation">:</span> <span class="token string">"^2.2.0"</span><span class="token punctuation">,</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>开启 <a href="https://github.com/eggjs/egg-view-nunjucks" target="_blank" rel="noopener">egg-view-nunjucks</a> 插件配置<br /></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ${root}/config/plugin.local.js</span>exports<span class="token punctuation">.</span>nunjucks <span class="token operator">=</span> <span class="token punctuation">{</span>  enable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token keyword">package</span><span class="token punctuation">:</span> <span class="token string">'egg-webpack'</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ${root}/config/plugin.js</span>exports<span class="token punctuation">.</span>nunjucks <span class="token operator">=</span> <span class="token punctuation">{</span>  enable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token keyword">package</span><span class="token punctuation">:</span> <span class="token string">'egg-view-nunjucks'</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><ul><li>配置 layout.tpl  模板<br /></li></ul><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>en<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>{{title}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>keywords<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>description<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>content-type<span class="token punctuation">'</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>text/html;charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>viewport<span class="token punctuation">'</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>initial-scale<span class="token punctuation">=</span>1, maximum-scale<span class="token punctuation">=</span>1, user-scalable<span class="token punctuation">=</span>no, minimal-ui<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>shortcut icon<span class="token punctuation">'</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>/favicon.ico<span class="token punctuation">'</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>image/x-icon<span class="token punctuation">'</span></span> <span class="token punctuation">/></span></span>  <span class="token comment" spellcheck="true">&lt;!-- html-webpack-plugin 自动注入 css --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>app<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    window<span class="token punctuation">.</span>__INITIAL_STATE__ <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- html-webpack-plugin 自动注入 js --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><ul><li>配置默认渲染引擎</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ${root}/config/local.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> app <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> exports <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  exports<span class="token punctuation">.</span>webpack <span class="token operator">=</span> <span class="token punctuation">{</span>    webpackConfigList<span class="token punctuation">:</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'easywebpack-react'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getWebpackConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> exports<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// ${root}/config/default.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> app <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> exports <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  exports<span class="token punctuation">.</span>view <span class="token operator">=</span> <span class="token punctuation">{</span>    defaultViewEngine<span class="token punctuation">:</span> <span class="token string">'nunjucks'</span><span class="token punctuation">,</span>    mapping<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token string">'.tpl'</span><span class="token punctuation">:</span> <span class="token string">'nunjucks'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> exports<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>render默认调用，使用 nunjucks 模板引擎<br /></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> egg <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'egg'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">AppController</span> <span class="token keyword">extends</span> <span class="token class-name">egg<span class="token punctuation">.</span>Controller</span> <span class="token punctuation">{</span>  <span class="token keyword">async</span> <span class="token function">home</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">await</span> ctx<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'layout.tpl'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> title<span class="token punctuation">:</span> <span class="token string">'自定义渲染'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>webpack.config.js 配置 <blockquote><p>该配置基于 easywebpack 配置，如果要用原生 webpack 请参考：<a href="/blog/wumyiw">/blog/wumyiw</a></p></blockquote></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> WriteFilePlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'write-file-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  egg<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  target<span class="token punctuation">:</span> <span class="token string">'web'</span><span class="token punctuation">,</span>  entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>    app<span class="token punctuation">:</span> <span class="token string">'app/web/page/app/app.js'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      filename<span class="token punctuation">:</span> <span class="token string">'../app/view/layout.tpl'</span><span class="token punctuation">,</span>      template<span class="token punctuation">:</span> <span class="token string">'./app/web/view/layout.tpl'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">WriteFilePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      test<span class="token punctuation">:</span> <span class="token regex">/\.tpl$/</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="依赖插件"><a href="#依赖插件" class="headerlink" title="依赖插件"></a>依赖插件</h2><ul><li><a href="/blog/wumyiw">egg-webpack</a></li><li><a href="https://github.com/eggjs/egg-view-nunjucks" target="_blank" rel="noopener">egg-view-nunjucks</a> </li><li><a href="https://github.com/gajus/write-file-webpack-plugin" target="_blank" rel="noopener">write-file-webpack-plugin</a></li><li><a href="https://github.com/jantimon/html-webpack-plugin" target="_blank" rel="noopener">html-webpack-plugin</a></li></ul><h2 id="骨架项目"><a href="#骨架项目" class="headerlink" title="骨架项目"></a>骨架项目</h2><p><a href="https://github.com/easy-team/egg-react-webpack-boilerplate/tree/feature/green/html" target="_blank" rel="noopener">https://github.com/easy-team/egg-react-webpack-boilerplate/tree/feature/green/html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;在 &lt;a href=&quot;/egg-react/web&quot;&gt;前端渲染模式&lt;/a&gt; 和 &lt;a href=&quot;/egg-react/web&quot;&gt;asset
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Hybrid系列-phonegap android框架详解</title>
    <link href="https://easyjs.cn/blog/uhmdkg/"/>
    <id>https://easyjs.cn/blog/uhmdkg/</id>
    <published>2020-05-31T09:43:53.000Z</published>
    <updated>2020-05-31T09:43:53.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>原文：<a href="https://hubcarl.github.io/blog/2015/04/19/hybrid-phonegap/" target="_blank" rel="noopener">https://hubcarl.github.io/blog/2015/04/19/hybrid-phonegap/</a></p></blockquote><p>首先, 来看一下phonegap 初始化流程以及Native 与 JS 交互流程图。</p><p><img src="http://images.cnitblog.com/blog/53807/201501/111706565315930.png#width=" alt=""></p><p>说明：socket server模式下, phonegap.js 源码实现的采用1 毫秒执行一次XHR请求,  当Native  JS 队列里面有JS语句数据时，才是真正的1毫秒调用一下;  当没有数据, scoket server 会阻塞10毫秒, 也就是XHR 要等10秒钟才能收到结果,并进行下一次的轮询。</p><h3 id="1、Activity继承-DroidGap-extends-PhonegapActivity"><a href="#1、Activity继承-DroidGap-extends-PhonegapActivity" class="headerlink" title="1、Activity继承 DroidGap (extends PhonegapActivity)"></a>1、Activity继承 DroidGap (extends PhonegapActivity)</h3><p>从phonegap.xml 中加载白名单配置 和 log配置</p><h3 id="2、loadUrl-（每个Activity-都初始化一次）"><a href="#2、loadUrl-（每个Activity-都初始化一次）" class="headerlink" title="2、loadUrl （每个Activity 都初始化一次）"></a>2、loadUrl （每个Activity 都初始化一次）</h3><p>》》初始化webview</p><p>》》初始化callbackServer</p><p>》》插件管理器PluginManager</p><h3 id="3、加载插件配置"><a href="#3、加载插件配置" class="headerlink" title="3、加载插件配置:"></a>3、加载插件配置:</h3><p>》》读取 plugins.xml 配置，用map存储起来。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>plugins<span class="token operator">></span><span class="token operator">&lt;</span>plugin name<span class="token operator">=</span><span class="token string">"Camera"</span> value<span class="token operator">=</span><span class="token string">"com.phonegap.CameraLauncher"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>plugin name<span class="token operator">=</span><span class="token string">"Contacts"</span> value<span class="token operator">=</span><span class="token string">"com.phonegap.ContactManager"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>plugin name<span class="token operator">=</span><span class="token string">"Crypto"</span> value<span class="token operator">=</span><span class="token string">"com.phonegap.CryptoHandler"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>plugin name<span class="token operator">=</span><span class="token string">"File"</span> value<span class="token operator">=</span><span class="token string">"com.phonegap.FileUtils"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>plugin name<span class="token operator">=</span><span class="token string">"Network Status"</span> value<span class="token operator">=</span><span class="token string">"com.phonegap.NetworkManager"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>plugins<span class="token operator">></span></code></pre><p>说明：</p><pre class=" language-js"><code class="language-js">name 是别名，javascript调用时通过别名来调用。value：java具体实现类<span class="token function">web页面调用</span><span class="token punctuation">(</span>例如查找联想人<span class="token punctuation">)</span>PhoneGap<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>successCB<span class="token punctuation">,</span> errorCB<span class="token punctuation">,</span> <span class="token string">"Contacts"</span><span class="token punctuation">,</span> <span class="token string">"search"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>fields<span class="token punctuation">,</span> options<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="4、插件实现"><a href="#4、插件实现" class="headerlink" title="4、插件实现"></a>4、插件实现</h3><p>》》编程java类，继承Plugin类(Plugin 实现了IPlugin接口)，并实现execute方法。<br />例如联系人管理插件：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ContactManager</span> <span class="token keyword">extends</span> <span class="token class-name">Plugin</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * action : 用来指定一个具体动作  search 表示搜索联系人     * args： 方法参数     * callbackId：js与java指定一个标识，     */</span>    <span class="token keyword">public</span> PluginResult <span class="token function">execute</span><span class="token punctuation">(</span>String action<span class="token punctuation">,</span> JSONArray args<span class="token punctuation">,</span> String callbackId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"search"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                JSONArray res <span class="token operator">=</span> contactAccessor<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span><span class="token function">getJSONArray</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> args<span class="token punctuation">.</span><span class="token function">optJSONObject</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PluginResult</span><span class="token punctuation">(</span>status<span class="token punctuation">,</span> res<span class="token punctuation">,</span> <span class="token string">"navigator.contacts.cast"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"save"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                String id <span class="token operator">=</span> contactAccessor<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span><span class="token function">getJSONObject</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                  JSONObject res <span class="token operator">=</span> contactAccessor<span class="token punctuation">.</span><span class="token function">getContactById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>                                      <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                         <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PluginResult</span><span class="token punctuation">(</span>status<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>                                     <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"remove"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>contactAccessor<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PluginResult</span><span class="token punctuation">(</span>status<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// If we get to this point an error has occurred</span>                JSONObject r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSONObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    r<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"code"</span><span class="token punctuation">,</span> UNKNOWN_ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PluginResult</span><span class="token punctuation">(</span>PluginResult<span class="token punctuation">.</span>Status<span class="token punctuation">.</span>ERROR<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">JSONException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>LOG_TAG<span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PluginResult</span><span class="token punctuation">(</span>PluginResult<span class="token punctuation">.</span>Status<span class="token punctuation">.</span>JSON_EXCEPTION<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="5、polling和server初始化"><a href="#5、polling和server初始化" class="headerlink" title="5、polling和server初始化"></a>5、polling和server初始化</h3><p>android DroidGap 初始化时，如果loadUrl的url不是以file://开头时，polling = true, 否则是socket server方式</p><p>代码见CallbackServer.java 类init方法:</p><pre class=" language-js"><code class="language-js"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>String url<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>url <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>url<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"file://"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>usePolling <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>       <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">stopServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>android<span class="token punctuation">.</span>net<span class="token punctuation">.</span>Proxy<span class="token punctuation">.</span><span class="token function">getDefaultHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>usePolling <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">stopServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>usePolling <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">startServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="6、phonegap-js-关键代码说明"><a href="#6、phonegap-js-关键代码说明" class="headerlink" title="6、phonegap.js  关键代码说明"></a>6、phonegap.js  关键代码说明</h3><p>phonegap.js在启动时，首先会通过prompt(“usePolling”, “gap_callbackServer:”)获取调用方式:<br> XHR 轮询 OR prompt 轮询,  如果是XHR的话, 会启动XHR调用获取http server端口 和token。</p><p>方法PhoneGap.Channel.join 启动 js server 或者polling调用 </p><p>UsePolling 默认为false。 通过 var polling = prompt(“usePolling”, “gap_callbackServer:”) 获取调用方式。</p><pre class=" language-js"><code class="language-js">PhoneGap<span class="token punctuation">.</span>Channel<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Start listening for XHR callbacks</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>PhoneGap<span class="token punctuation">.</span>UsePolling<span class="token punctuation">)</span> <span class="token punctuation">{</span>        PhoneGap<span class="token punctuation">.</span><span class="token function">JSCallbackPolling</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'PhoneGap.Channel.join>>>>>>>>>>>>>>>>>>>>>>>>>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span>br<span class="token operator">></span>              <span class="token operator">&lt;</span>span style<span class="token operator">=</span><span class="token string">"color: #ff6600;"</span><span class="token operator">></span> <span class="token comment" spellcheck="true">//phonegap js 首次启动获取js调用Native方式&lt;/span></span>        <span class="token keyword">var</span> polling <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">"usePolling"</span><span class="token punctuation">,</span> <span class="token string">"gap_callbackServer:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        PhoneGap<span class="token punctuation">.</span>UsePolling <span class="token operator">=</span> polling<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>polling <span class="token operator">==</span> <span class="token string">"true"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          PhoneGap<span class="token punctuation">.</span>UsePolling <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>          <span class="token operator">&lt;</span>span style<span class="token operator">=</span><span class="token string">"color: #ff6600;"</span><span class="token operator">></span>PhoneGap<span class="token punctuation">.</span><span class="token function">JSCallbackPolling</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>          PhoneGap<span class="token punctuation">.</span>UsePolling <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>         <span class="token operator">&lt;</span>span style<span class="token operator">=</span><span class="token string">"color: #ff6600;"</span><span class="token operator">></span> PhoneGap<span class="token punctuation">.</span><span class="token function">JSCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>XHR轮询：PhoneGap.JSCallback方法</p><p>通过XHR 与java端 socket进行通信，每一毫秒执行一次JSCallback，从android socket获取javascript执行结果代码，最后通过eval动态执行javascript</p><p>XHR调用, 通过prompt 获取socket端口 和 token（uuid）</p><pre class=" language-js"><code class="language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span>PhoneGap<span class="token punctuation">.</span>JSCallbackPort <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   PhoneGap<span class="token punctuation">.</span>JSCallbackPort <span class="token operator">=</span> <span class="token operator">&lt;</span>span style<span class="token operator">=</span><span class="token string">"color: #ff6600;"</span><span class="token operator">></span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">"getPort"</span><span class="token punctuation">,</span> <span class="token string">"gap_callbackServer:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'PhoneGap.JSCallback getPort>>>>>>>>>>>>>>>>>>>>>>>>>:'</span> <span class="token operator">+</span> PhoneGap<span class="token punctuation">.</span>JSCallbackPort<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>PhoneGap<span class="token punctuation">.</span>JSCallbackToken <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>　　PhoneGap<span class="token punctuation">.</span>JSCallbackToken <span class="token operator">=</span><span class="token operator">&lt;</span>span style<span class="token operator">=</span><span class="token string">"color: #ff6600;"</span><span class="token operator">></span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">"getToken"</span><span class="token punctuation">,</span> <span class="token string">"gap_callbackServer:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>　　console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'PhoneGap.JSCallback getToken>>>>>>>>>>>>>>>>>>>>>>>>>:'</span> <span class="token operator">+</span> PhoneGap<span class="token punctuation">.</span>JSCallbackToken<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>xmlhttp<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span> <span class="token string">"http://127.0.0.1:"</span> <span class="token operator">+</span> PhoneGap<span class="token punctuation">.</span>JSCallbackPort <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> PhoneGap<span class="token punctuation">.</span>JSCallbackToken<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xmlhttp<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>XHR返回结果代码片段</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> msg <span class="token operator">=</span> <span class="token function">decodeURIComponent</span><span class="token punctuation">(</span>xmlhttp<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> t <span class="token operator">=</span> <span class="token function">eval</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// If we're getting an error here, seeing the message will help in debugging</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"JSCallback: Message from Server: "</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"JSCallback Error: "</span> <span class="token operator">+</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>span style<span class="token operator">=</span><span class="token string">"color: #ff6600;"</span><span class="token operator">></span><span class="token function">setTimeout</span><span class="token punctuation">(</span>PhoneGap<span class="token punctuation">.</span>JSCallback<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token punctuation">}</span><span class="token template-string"><span class="token string">``</span></span><span class="token template-string"><span class="token string">`　　prompt轮询： PhoneGap.JSCallbackPolling方法`</span></span><span class="token template-string"><span class="token string">``</span></span>jsPhoneGap<span class="token punctuation">.</span>JSCallbackPolling <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Exit if shutting down app</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>PhoneGap<span class="token punctuation">.</span>shuttingDown<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// If polling flag was changed, stop using polling from now on</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>PhoneGap<span class="token punctuation">.</span>UsePolling<span class="token punctuation">)</span> <span class="token punctuation">{</span>      PhoneGap<span class="token punctuation">.</span><span class="token function">JSCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> msg <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"gap_poll:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>          <span class="token keyword">var</span> t <span class="token operator">=</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">""</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"JSCallbackPolling: Message from Server: "</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"JSCallbackPolling Error: "</span> <span class="token operator">+</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">&lt;</span>span style<span class="token operator">=</span><span class="token string">"color: #ff6600;"</span><span class="token operator">></span><span class="token function">setTimeout</span><span class="token punctuation">(</span>PhoneGap<span class="token punctuation">.</span>JSCallbackPolling<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token function">setTimeout</span><span class="token punctuation">(</span>PhoneGap<span class="token punctuation">.</span>JSCallbackPolling<span class="token punctuation">,</span> PhoneGap<span class="token punctuation">.</span>JSCallbackPollingPeriod<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="7、总结"><a href="#7、总结" class="headerlink" title="7、总结"></a>7、总结</h3><h4 id="1、phonegap-android-插件管理器PluginManager初始化时-是每个Activity都要初始化一次-数据都缓存一次-导致同一份数据缓存多次。–-暂不清楚为啥这样实现？-难道是phonegap-框架是为单webview-实现的，如果有知道原因的请告知一下。"><a href="#1、phonegap-android-插件管理器PluginManager初始化时-是每个Activity都要初始化一次-数据都缓存一次-导致同一份数据缓存多次。–-暂不清楚为啥这样实现？-难道是phonegap-框架是为单webview-实现的，如果有知道原因的请告知一下。" class="headerlink" title="1、phonegap android 插件管理器PluginManager初始化时, 是每个Activity都要初始化一次, 数据都缓存一次, 导致同一份数据缓存多次。– 暂不清楚为啥这样实现？ 难道是phonegap 框架是为单webview 实现的，如果有知道原因的请告知一下。"></a>1、phonegap android 插件管理器PluginManager初始化时, 是每个Activity都要初始化一次, 数据都缓存一次, 导致同一份数据缓存多次。– 暂不清楚为啥这样实现？ 难道是phonegap 框架是为单webview 实现的，如果有知道原因的请告知一下。</h4><h4 id="2、同第1点一样-Socket-Server-每个Activity都会初始化一下-如果loadUrl-的url类型不同-会不会导致scoket-server状体错乱-待验证！"><a href="#2、同第1点一样-Socket-Server-每个Activity都会初始化一下-如果loadUrl-的url类型不同-会不会导致scoket-server状体错乱-待验证！" class="headerlink" title="2、同第1点一样, Socket Server 每个Activity都会初始化一下, 如果loadUrl 的url类型不同,会不会导致scoket server状体错乱, 待验证！"></a>2、同第1点一样, Socket Server 每个Activity都会初始化一下, 如果loadUrl 的url类型不同,会不会导致scoket server状体错乱, 待验证！</h4><h4 id="3、phonegap-采用-prompt-和-XHR-轮询机制，一是会导致手机耗电情况严重，-二是了解到prompt-调用是会阻塞js执行的-这样导致影响到页面加载速度。"><a href="#3、phonegap-采用-prompt-和-XHR-轮询机制，一是会导致手机耗电情况严重，-二是了解到prompt-调用是会阻塞js执行的-这样导致影响到页面加载速度。" class="headerlink" title="3、phonegap 采用 prompt 和 XHR 轮询机制，一是会导致手机耗电情况严重， 二是了解到prompt 调用是会阻塞js执行的, 这样导致影响到页面加载速度。"></a>3、phonegap 采用 prompt 和 XHR 轮询机制，一是会导致手机耗电情况严重， 二是了解到prompt 调用是会阻塞js执行的, 这样导致影响到页面加载速度。</h4><p>phonegap 已经改名cordova, 在最新版本cordova 框架里面已经去掉了socket server模式, 详细请查看：<a href="http://www.cnblogs.com/hubcarl/p/4202784.html" target="_blank" rel="noopener">http://www.cnblogs.com/hubcarl/p/4202784.html</a></p><pre><code></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;原文：&lt;a href=&quot;https://hubcarl.github.io/blog/2015/04/19/hybrid-phonegap/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://hubcarl.githu
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Egg 项目集成 Webpack 热更新</title>
    <link href="https://easyjs.cn/blog/wumyiw/"/>
    <id>https://easyjs.cn/blog/wumyiw/</id>
    <published>2020-05-31T09:43:53.000Z</published>
    <updated>2020-05-31T09:43:53.000Z</updated>
    
    <content type="html"><![CDATA[<p><br />在 <a href="/egg-react">Egg + React 工程化解决方案</a> 和 <a href="/egg-vue">Egg + Vue 工程化解决方案</a> 方案使用了 <a href="https://github.com/easy-team/egg-webpack" target="_blank" rel="noopener">egg-webpack</a> 实现了 Egg + easywebpack 热更新统一处理。其实 egg-webpack 是可以单独使用的，不耦合 easywebpack 构建配置。下面以 Egg + React + Webpack 为例。</p><h2 id="egg-wepback-介绍"><a href="#egg-wepback-介绍" class="headerlink" title="egg-wepback 介绍"></a>egg-wepback 介绍</h2><h4 id="集成服务"><a href="#集成服务" class="headerlink" title="集成服务"></a>集成服务</h4><ul><li>koa-webpack-hot-middleware<br /></li><li>koa-webpack-dev-middleware<br /></li><li>koa-history-api-fallback: <a href="https://webpack.js.org/configuration/dev-server/#devserver-historyapifallback" target="_blank" rel="noopener">https://webpack.js.org/configuration/dev-server/#devserver-historyapifallback</a><br /></li><li>http-proxy: <a href="https://webpack.js.org/configuration/dev-server/#devserver-proxy" target="_blank" rel="noopener">https://webpack.js.org/configuration/dev-server/#devserver-proxy</a><br /></li><li>webpack<br /></li></ul><h4 id="特性支持"><a href="#特性支持" class="headerlink" title="特性支持"></a>特性支持</h4><ul><li>在 Agent 里面单独启动 Webpack 服务解决 Node 重启 Webpack 实例丢失导致重新编译问题</li><li>提供 <code>app.webpack</code>  钩子从内存读取文件内容，解决本地开发 Server Side Render 文件渲染内容读取问题</li><li>支持多个 Webpack 实例独立同时编译服务(支持多进程编译)，自动获取可用端口号，自动注入热更新配置</li><li>Egg 主应用静态资源访问自动代理到独立的 Webpack 编译 HTTP 服务</li></ul><br /><h2 id="egg-wepback-插件使用"><a href="#egg-wepback-插件使用" class="headerlink" title="egg-wepback 插件使用"></a>egg-wepback 插件使用</h2><ul><li>安装插件</li></ul><pre class=" language-javascript"><code class="language-javascript">npm install egg<span class="token operator">-</span>webpack <span class="token operator">--</span>save</code></pre><ul><li>开启插件</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// config/plugin.local.js</span>exports<span class="token punctuation">.</span>webpack <span class="token operator">=</span> <span class="token punctuation">{</span>  enable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token keyword">package</span><span class="token punctuation">:</span> <span class="token string">'egg-webpack'</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><ul><li>插件配置</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// config/config.local.js</span>exports<span class="token punctuation">.</span>webpack <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 这里的 webpack.config.js 为原生 Webpack 配置即可</span>  webpackConfigList<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../webpack.config.js'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="编写-Webpack-配置"><a href="#编写-Webpack-配置" class="headerlink" title="编写 Webpack 配置"></a>编写 Webpack 配置</h2><ul><li>安装 react-hot-loader 插件</li></ul><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> react-hot-loader --save-dev<span class="token function">npm</span> <span class="token function">install</span> webpack progress-bar-webpack-plugin webpack-manifest-plugin --save-dev<span class="token function">npm</span> <span class="token function">install</span> @babel/core @babel/preset-env @babel/preset-react babel-loader --save-dev</code></pre><ul><li>编写 webpack.config.js  配置</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ${root}/webpack.config.js</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> ProgressBar <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'progress-bar-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> ManifestPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack-manifest-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> isDev <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  mode<span class="token punctuation">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV<span class="token punctuation">,</span>  entry<span class="token punctuation">:</span> isDev <span class="token operator">?</span> <span class="token punctuation">{</span> app<span class="token punctuation">:</span> <span class="token string">'./app/web/index.js'</span> <span class="token punctuation">}</span> <span class="token punctuation">:</span> <span class="token punctuation">{</span>    app<span class="token punctuation">:</span><span class="token punctuation">[</span>      <span class="token string">'react-hot-loader/babel'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// egg-webpack 默认端口为 9000</span>      <span class="token string">'webpack-hot-middleware/client?path=http://127.0.0.1:9000/__webpack_hmr&amp;noInfo=false&amp;reload=false&amp;quiet=false'</span><span class="token punctuation">,</span>      <span class="token string">'./app/web/index.js'</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  resolve<span class="token punctuation">:</span> <span class="token punctuation">{</span>    extensions<span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">'.jsx'</span><span class="token punctuation">,</span> <span class="token string">'.js'</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'app/public'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    filename<span class="token punctuation">:</span> isDev <span class="token operator">?</span> <span class="token string">'[name].[hash].js'</span> <span class="token punctuation">:</span> <span class="token string">'[name].js'</span><span class="token punctuation">,</span>    publicPath<span class="token punctuation">:</span> <span class="token string">'/public/'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.js?$/</span><span class="token punctuation">,</span>        use<span class="token punctuation">:</span> <span class="token string">'babel-loader'</span><span class="token punctuation">,</span>        exclude<span class="token punctuation">:</span> <span class="token regex">/node_modules/</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.css$/</span><span class="token punctuation">,</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">'style-loader'</span><span class="token punctuation">,</span> <span class="token string">'css-loader'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.(png|jpg|gif|svg)$/</span><span class="token punctuation">,</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">{</span>            loader<span class="token punctuation">:</span> <span class="token string">'file-loader'</span><span class="token punctuation">,</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  plugins<span class="token punctuation">:</span><span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>HotModuleReplacementPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">ProgressBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="前端页面开启热更新"><a href="#前端页面开启热更新" class="headerlink" title="前端页面开启热更新"></a>前端页面开启热更新</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token string">'use strict'</span><span class="token punctuation">;</span><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> AppContainer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-hot-loader'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'./app.css'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"title"</span><span class="token operator">></span><span class="token operator">&lt;</span>h1<span class="token operator">></span>React App<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>module<span class="token punctuation">.</span>hot <span class="token operator">?</span> <span class="token operator">&lt;</span>AppContainer<span class="token operator">></span><span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>AppContainer<span class="token operator">></span> <span class="token punctuation">:</span> <span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'app'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>module<span class="token punctuation">.</span>hot<span class="token punctuation">)</span> <span class="token punctuation">{</span>  module<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="页面渲染"><a href="#页面渲染" class="headerlink" title="页面渲染"></a>页面渲染</h2><p>通过 egg-view-nunjucks 模板引擎进行  layout 模板渲染，同时根据 webpack 生成 manifest.json 获取静态资源的实际路径。<br /></p><ul><li>配置 nunjucks 引擎</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ${root}/config/plugin.js</span>exports<span class="token punctuation">.</span>nunjucks <span class="token operator">=</span> <span class="token punctuation">{</span>  enable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token keyword">package</span><span class="token punctuation">:</span> <span class="token string">'egg-view-nunjucks'</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// {app_root}/config/config.default.js</span>exports<span class="token punctuation">.</span>view <span class="token operator">=</span> <span class="token punctuation">{</span>  defaultViewEngine<span class="token punctuation">:</span> <span class="token string">'nunjucks'</span><span class="token punctuation">,</span>  mapping<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">'.tpl'</span><span class="token punctuation">:</span> <span class="token string">'nunjucks'</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><ul><li>定义 {app_root}/app/view/layout.tpl 文件</li></ul><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>en<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>{{title}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>keywords<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>description<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>content-type<span class="token punctuation">'</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>text/html;charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>viewport<span class="token punctuation">'</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>initial-scale<span class="token punctuation">=</span>1, maximum-scale<span class="token punctuation">=</span>1, user-scalable<span class="token punctuation">=</span>no, minimal-ui<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>shortcut icon<span class="token punctuation">'</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>/favicon.ico<span class="token punctuation">'</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>image/x-icon<span class="token punctuation">'</span></span> <span class="token punctuation">/></span></span>  {% for item in asset.css %}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>{{item}}<span class="token punctuation">'</span></span> <span class="token punctuation">/></span></span>  {% endfor %}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>app<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    window<span class="token punctuation">.</span>__INITIAL_STATE__ <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> asset<span class="token punctuation">.</span>state <span class="token operator">|</span> safe <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  {% for item in asset.js %}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{item}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  {% endfor %}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><ul><li>页面渲染逻辑实现</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> egg <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'egg'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> manifest <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../public/manifest.json'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">AppController</span> <span class="token keyword">extends</span> <span class="token class-name">egg<span class="token punctuation">.</span>Controller</span> <span class="token punctuation">{</span>  <span class="token keyword">async</span> <span class="token function">home</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> js <span class="token operator">=</span> <span class="token punctuation">[</span>manifest<span class="token punctuation">[</span><span class="token string">'app.js'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> css <span class="token operator">=</span> <span class="token punctuation">[</span>manifest<span class="token punctuation">[</span><span class="token string">'app.css'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">await</span> ctx<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'layout.tpl'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>       title<span class="token punctuation">:</span> <span class="token string">'Egg Webpack Hot Reload'</span><span class="token punctuation">,</span>      state<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      asset<span class="token punctuation">:</span> <span class="token punctuation">{</span> js<span class="token punctuation">,</span> css <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>最后就可以 npm run dev （egg-bin dev) 一键启动开发，不用分别单独启动前端应用和 Node 应用，同时解决 Node 重启 Webpack 实例丢失导致重新编译问题。</p><h2 id="Server-Side-Render-文件内容读取"><a href="#Server-Side-Render-文件内容读取" class="headerlink" title="Server Side Render 文件内容读取"></a>Server Side Render 文件内容读取</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token string">'usestrict'</span><span class="token punctuation">;</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> egg <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'egg'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> vueServerRenderer <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'vue-server-renderer'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">IndexController</span> <span class="token keyword">extends</span> <span class="token class-name">egg<span class="token punctuation">.</span>Controller</span> <span class="token punctuation">{</span>  <span class="token keyword">async</span> <span class="token function">index</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> app <span class="token punctuation">}</span> <span class="token operator">=</span> ctx<span class="token punctuation">;</span>    <span class="token keyword">const</span> filepath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>view<span class="token punctuation">.</span>root<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'app.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// server render mode, the webpack config target:node</span>    <span class="token keyword">const</span> strJSBundle <span class="token operator">=</span> <span class="token keyword">await</span> app<span class="token punctuation">.</span>webpack<span class="token punctuation">.</span>fileSystem<span class="token punctuation">.</span><span class="token function">readWebpackMemoryFile</span><span class="token punctuation">(</span>filepath<span class="token punctuation">)</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token keyword">await</span> vueServerRenderer<span class="token punctuation">.</span><span class="token function">createBundleRenderer</span><span class="token punctuation">(</span>strJSBundle<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">renderToString</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="更多实践"><a href="#更多实践" class="headerlink" title="更多实践"></a>更多实践</h2><ul><li><a href="/egg-react/build">Egg + Webpack 构建流程</a></li><li><a href="/egg-react/html">Egg + Webpack 自定义前端渲染方案</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;br /&gt;在 &lt;a href=&quot;/egg-react&quot;&gt;Egg + React 工程化解决方案&lt;/a&gt; 和 &lt;a href=&quot;/egg-vue&quot;&gt;Egg + Vue 工程化解决方案&lt;/a&gt; 方案使用了 &lt;a href=&quot;https://github.com/easy-te
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Egg + Vue/Nunjucks 服务端渲染性能测试</title>
    <link href="https://easyjs.cn/blog/xriz8a/"/>
    <id>https://easyjs.cn/blog/xriz8a/</id>
    <published>2020-05-31T09:43:53.000Z</published>
    <updated>2020-05-31T09:43:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>知乎专栏：<a href="https://zhuanlan.zhihu.com/p/30683070" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/30683070</a><br /><br><br />在用Vue做服务端渲染时，大家对Vue服务端渲染的性能持怀疑态度，业界也有一些尝试，不过完整的产品项目和数据分析比较少。结合线上和本地压测，我们对 Vue 和 Nunjucks 针对模板渲染Render时间，CPU占用，内存占用进行全面的对比测试。<br /></p><h2 id="渲染性能对比"><a href="#渲染性能对比" class="headerlink" title="渲染性能对比"></a>渲染性能对比</h2><p>通过实现相同的模板功能，分别针对无缓存和有缓存进行了对比测试. 测试方法，通过<code>ab</code>压测工具对页面进行测试，Node层收集页面render渲染时间, 然后进行汇总统计分析。<br /><br><br /><strong>Nunjucks 测试模板</strong><br />**</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>h5GameList<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>            {% for item in h5GameList.data.list %}            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{item.downloadUrl}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{item.name}}-{{item.resume}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            {% endfor %}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>recommendList<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>        {% for item in recommendList.data %}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{item.downloadUrl}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{item.recommendBriefResume}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>{{item.recommendResume}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        {% endfor %}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>bestList<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>        {% for item in bestList.data.list %}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{item.downloadUrl}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{item.resume}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>{{item.packageName}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        {% endfor %}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>bookingList<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>        {% for item in bookingList.data %}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{item.logoUrl}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{item.name}}-{{item.categoryName}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>{{item.resume}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        {% endfor %}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p><strong>Vue测试模板</strong><br />**</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>h5GameList<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span>  <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item in h5GameList.data.list<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item.downloadUrl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{item.name}}-{{item.resume}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>recommendList<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item in recommendList.data<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item.downloadUrl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{item.recommendBriefResume}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>{{item.recommendResume}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>bestList<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item in bestList.data.list<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item.downloadUrl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{item.resume}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>{{item.packageName}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>bookingList<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item in bookingList.data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item.logoUrl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{item.name}}-{{item.categoryName}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>{{item.resume}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre><h2 id="测试脚本一："><a href="#测试脚本一：" class="headerlink" title="测试脚本一："></a>测试脚本一：</h2><p><code>ab -c 50 -n 1000 http://ip:port/perf/nunjucks/</code><br /><code>ab -c 50 -n 1000 http://ip:port/perf/vue/</code></p><p>其中 -n 表示请求数，-c 表示并发数<br /><img src="/medias/easyjs/blog/blog-xriz8a-7475145.png" alt=""></p><h2 id="测试脚本二："><a href="#测试脚本二：" class="headerlink" title="测试脚本二："></a>测试脚本二：</h2><p><code>ab -c 50 -n 5000 http://ip:port/perf/nunjucks/</code><br /><code>ab -c 50 -n 5000 http://ip:port/perf/vue/</code></p><p><img src="/medias/easyjs/blog/blog-xriz8a-5299825.png" alt=""></p><p>从上面统计来看可以得出如下结论：</p><ul><li>无缓存情况：nunjucks 平均时间比 vue 渲染要快1ms， 差距没想象的大。</li><li>有缓存情况：nunjucks 平均时间是 vue 的3倍左右，但也都是毫秒级别的差异。在整理数据时，nunjucks的render时间都是0-1ms，而vue则要1-3ms。分析一下可知道，nunjucks是基于字符串正则编译的，可以做到预编译缓存，而vue目前的实现方式是通过webpack构建的jsbundle文件(查看构建文件可以看到每个元素和组件都是通过javascript动态创建组合的)，然后整个script丢给Node.js 原生vm模块(独立的沙箱运行空间)动态执行script。 目前Vue官方提供了基于Webpack构建Vue字符串的方案，宣传性能会有比较大的提升。这种方案前一段时间做个实践，每一个页面都需要独立构建一个manifest和vue-ssr-server-bundle.json 文件， 比较适合单页面应用，多页面应用构建有冲突，需要自己实现支持，待实践。从线上应用实践来看， render 时间在整个耗时链条里面是非常小的，性能问题大头部分在于网络( DNS,网络连接，网络传输)，接口耗时两部分。</li><li>vm对比测试<pre class=" language-javascript"><code class="language-javascript">global<span class="token punctuation">.</span>num <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span> </code></pre></li></ul><p>const vm = require(‘vm’);<br>const code = ‘var ret = num * num * num;’;<br>const sandbox = { num : 1000};<br>const benchmark = (msg, fun) =&gt; {<br>  const start = new Date;<br>  for (let i = 0; i &lt; 10000; i++) {<br>    fun();<br>  }<br>  const end = new Date;<br>  console.log(msg + ‘: ‘ + (end - start) + ‘ms’);<br>};<br>const ctx = vm.createContext(sandbox); </p><p>// runInThisContext 用于创建一个独立的沙箱运行空间，code内的代码可以访问外部的global对象，但是不能访问其他变量<br>benchmark(‘vm.runInThisContext’, () =&gt; {<br>  vm.runInThisContext(code);<br>}); </p><p>// runInContext 创建一个独立的沙箱运行空间，sandBox将做为global的变量传入code内，但不存在global变量<br>benchmark(‘vm.runInContext’, () =&gt; {<br>  vm.runInContext(code, ctx);<br>}); </p><p>// 与runInContext 一样, 这里可以直接传sandbox<br>benchmark(‘vm.runInNewContext’, () =&gt; {<br>  vm.runInNewContext(code, sandbox);<br>}); </p><p>const script = vm.createScript(code); </p><p>benchmark(‘script.runInThisContext’, () =&gt; {<br>  script.runInThisContext();<br>});<br>benchmark(‘script.runInNewContext’, () =&gt; {<br>  script.runInNewContext(sandbox);<br>});<br>benchmark(‘script.runInContext’, () =&gt; {<br>  script.runInContext(ctx);<br>});<br>benchmark(‘fn’, () =&gt; {<br>  new Function(‘num’, code)();<br>}); </p><p>/*<br> vm.runInThisContext: 15ms<br> vm.runInContext: 71ms<br> vm.runInNewContext: 70ms<br> script.runInThisContext: 7ms<br> script.runInNewContext: 59ms<br> script.runInContext: 57ms<br> fn: 9ms </p><p> script方式都比vm方式快<br> */</p><pre><code>## 线上应用性能数据首页内容有5-6屏内容，一次性渲染，部分组件动态加载。下图是 Vue 服务端渲染 Render时间：&lt;br /&gt;![](/medias/easyjs/blog/blog-xriz8a-4815332.png)从首页render-avg的统计来看，== 模板的编译时间非常的短，平均在24ms-27ms之间==，还有优化的空间。&lt;br /&gt;首页访问链路时间&lt;br /&gt;![](/medias/easyjs/blog/blog-xriz8a-6520397.png)从整个链路时间来看rt(首屏时间) 可以看到， 平均首屏时间小于1s， 而render时间平均在30ms，在整个链路上面，**render的时间可以说是可以忽略的**，至少从上面图来看，**性能问题大头部分在于网络，接口耗时两部分**。## CPU和内存占用前提条件：- Mac 环境- Nunjucks 和 Vue 渲染都开启缓存- Vue 服务端渲染关闭 _runInNewContext_- 为保证测试的统计准确性，只启动一个工作worker，下面分析只统计 worker进程CPU和内存，排除了 Egg master 和 agent 进程。**Nunjucks CPU和内存占用**- 采集样本：`ab -c 100 -n 50000 http://ip:port/perf/nunjucks/`</code></pre><p>This is ApacheBench, Version 2.3 &lt;$Revision: 1663405 $&gt;<br>Copyright 1996 Adam Twiss, Zeus Technology Ltd, <a href="http://www.zeustech.net/" target="_blank" rel="noopener">http://www.zeustech.net/</a><br>Licensed to The Apache Software Foundation, <a href="http://www.apache.org/" target="_blank" rel="noopener">http://www.apache.org/</a><br>Benchmarking 100.84.250.56 (be patient)<br>Completed 5000 requests<br>Completed 10000 requests<br>Completed 15000 requests<br>Completed 20000 requests<br>Completed 25000 requests<br>Completed 30000 requests<br>Completed 35000 requests<br>Completed 40000 requests<br>Completed 45000 requests<br>Completed 50000 requests<br>Finished 50000 requests<br>Server Software:<br>Server Hostname:        100.84.250.56<br>Server Port:            7001<br>Document Path:          /perf/nunjucks/<br>Document Length:        13899 bytes<br>Concurrency Level:      100<br>Time taken for tests:   173.686 seconds<br>Complete requests:      50000<br>Failed requests:        48138<br>   (Connect: 0, Receive: 0, Length: 48138, Exceptions: 0)<br>Total transferred:      709284995 bytes<br>HTML transferred:       694684887 bytes<br>Requests per second:    287.88 [#/sec] (mean)<br>Time per request:       347.372 [ms] (mean)<br>Time per request:       3.474 [ms] (mean, across all concurrent requests)<br>Transfer rate:          3988.00 [Kbytes/sec] received<br>Connection Times (ms)<br>              min  mean[+/-sd] median   max<br>Connect:        0   10  38.1      2    3410<br>Processing:    22  336 313.5    241    3416<br>Waiting:       22  333 302.2    241    3398<br>Total:         56  347 311.6    247    3432<br>Percentage of the requests served within a certain time (ms)<br>  50%    247<br>  66%    280<br>  75%    332<br>  80%    367<br>  90%    645<br>  95%    877<br>  98%   1195<br>  99%   1460<br> 100%   3432 (longest request)</p><pre><code>![](/medias/easyjs/blog/blog-xriz8a-8067980.png)&lt;br /&gt;**Vue CPU和内存占用**&lt;br /&gt;**- 采集样本：`ab -c 100 -n 50000 http://ip:port/perf/vue/`</code></pre><p>This is ApacheBench, Version 2.3 &lt;$Revision: 1663405 $&gt;<br>Copyright 1996 Adam Twiss, Zeus Technology Ltd, <a href="http://www.zeustech.net/" target="_blank" rel="noopener">http://www.zeustech.net/</a><br>Licensed to The Apache Software Foundation, <a href="http://www.apache.org/" target="_blank" rel="noopener">http://www.apache.org/</a><br>Benchmarking 100.84.250.56 (be patient)<br>Completed 5000 requests<br>Completed 10000 requests<br>Completed 15000 requests<br>Completed 20000 requests<br>Completed 25000 requests<br>Completed 30000 requests<br>Completed 35000 requests<br>Completed 40000 requests<br>Completed 45000 requests<br>Completed 50000 requests<br>Finished 50000 requests<br>Server Software:<br>Server Hostname:        100.84.250.56<br>Server Port:            7001<br>Document Path:          /perf/vue/<br>Document Length:        13840 bytes<br>Concurrency Level:      100<br>Time taken for tests:   193.524 seconds<br>Complete requests:      50000<br>Failed requests:        48989<br>   (Connect: 0, Receive: 0, Length: 48989, Exceptions: 0)<br>Total transferred:      707135621 bytes<br>HTML transferred:       692535158 bytes<br>Requests per second:    258.37 [#/sec] (mean)<br>Time per request:       387.048 [ms] (mean)<br>Time per request:       3.870 [ms] (mean, across all concurrent requests)<br>Transfer rate:          3568.35 [Kbytes/sec] received<br>Connection Times (ms)<br>              min  mean[+/-sd] median   max<br>Connect:        0   10  27.3      2    1384<br>Processing:    22  377 223.9    285    2236<br>Waiting:       22  373 217.7    285    2235<br>Total:         42  386 219.5    290    2239<br>Percentage of the requests served within a certain time (ms)<br>  50%    290<br>  66%    335<br>  75%    409<br>  80%    481<br>  90%    697<br>  95%    841<br>  98%   1030<br>  99%   1126<br> 100%   2239 (longest request)dou</p><pre><code>![](/medias/easyjs/blog/blog-xriz8a-2015451.png)两个图对比发现如下信息：- 压测前 egg 应用启动后，worker 进程内存稳定在 60MB， cpu 使用都小于1％，保证前提条件一致- 压测启动后，nunjucks 和 vue CPU使用迅速飙升到90％，曲线基本保持一样，没有很明显高低之分- 压测启动后，nunjucks 和 vue 内存也是迅速上升，整个压测期间，nunjucks 平均内存使用为 150 MB左右，vue 平均内存使用为 160 MB, vue 内存占用比较稳定。从这个数据可以看出， Vue 服务端渲染 内存占用略微比 nunjucks 高一些。- 压测结束好后，nunjucks 和 vue 的 CPU 使用 迅速降为小于 1%， 内存使用迅速降为 60 MB， 都恢复为压测前的状态，这也表面 nunjucks 和 vue 压测期间没有出现内存泄漏的情况。## Nunjucks与Vue对比分析**首先我们来看看 ab 执行结果的几个关键参数含义：**- Concurrency Level 并发请求数- Time taken for tests 整个测试持续的时间- Complete requests 完成的请求数- Failed requests 失败的请求数(指内容**大小**不一样,其实是成功的)- HTML transferred HTML内容传输量- Requests per second 每秒处理的请求数，**mean表示平均值**- Time per request 用户平均请求等待时间- Time per request(mean, across all concurrent requests) 服务器平均请求处理时间- Percentage Time 处理时间区间分布，我们关注80%－90%的区间。下面是 ab -c 100 -n 50000 针对 nunjucks 和 vue 数据对比：&lt;br /&gt;![](/medias/easyjs/blog/blog-xriz8a-7039687.png)&lt;br /&gt;从上图 ab 对比数据可以得出以下结论：- HTML transferred 内容传输量数据非常接近，保证了对比测试的客观性。- 50000个请求，vue 整体处理时间比 nunjucks 慢 20s， 平均每个相当于慢 0.4 ms，这个于 上面 render 数据对比是吻合的。- nunjucks 每秒处理的请求数比 vue 略微多 30 个， 用户平均请求等待时间少 0.4 ms- 从 percentage time 时间我们发现 nunjucks 和 vue 每个区间都是非常接近。总体上，nunjucks 和 vue 在 模板渲染，CPU使用，内存占用没有很明显的差异，各指标基本接近。 其中 nunjucks 在模板渲染方面略微快一点点(个位数毫秒级)， 内存占用方面 vue 比 nunjucks 占用略微多一点，但都在可接受范围内。## CPU和内存工具在进行 CPU 和 内存 监控统计分析时，也没有找到简单好用的火焰图工具。Alinode 平台统计粒度太大，数据也不是时时可以拿到，也不好使。找到一些成熟的工具比如 perf 和 FlameGraph 都比较复杂，而且一些资料都是 linux 上面的， 配置相当繁琐，只好放弃。另外找到 Mac 的一个小工具 iStat Menus 能显示电脑磁盘CPU，内存等占用情况不错，图也很小且不适合做具体分析，作为电脑监控工具还不错。最终也没有找到合适简单工具，只好简单撸一个，顺便玩了一把 [socket.io](https://link.zhihu.com/?target=http%3A//socket.io)和图表工具。上面 CPU 和 内存 统计是通过 Egg [egg-socket.io](https://link.zhihu.com/?target=https%3A//github.com/eggjs/egg-socket.io) 和 [egg-schedule](https://link.zhihu.com/?target=https%3A//github.com/eggjs/egg-schedule) 插件， [current-processes](https://link.zhihu.com/?target=https%3A//github.com/branneman/current-processes)， [socket.io.js](https://link.zhihu.com/?target=https%3A//github.com/socketio/socket.io-client) 以及图片库 Ignite UI 实现的。- Egg Node端 [egg-socket.io](https://link.zhihu.com/?target=https%3A//github.com/eggjs/egg-socket.io)和[egg-schedule](https://link.zhihu.com/?target=https%3A//github.com/eggjs/egg-schedule)[current-processes ](https://link.zhihu.com/?target=https%3A//github.com/branneman/current-processes)结合```javascript&#39;use strict&#39;;const ps = require(&#39;current-processes&#39;);const os = require(&#39;os&#39;);const totalMem = os.totalmem(); // bytes to MBmodule.exports = app =&gt; {  exports.schedule = {    interval: &#39;3s&#39;,    type: &#39;worker&#39;  };  exports.task = function* (ctx) {    ps.get((err, processes) =&gt; {      const proArr = processes.filter(pro =&gt; {        return pro.name === &#39;node&#39;;      }).sort((a, b) =&gt; {        return a.pid - b.pid;      });      proArr.shift();      proArr.shift();      const cpu_mem_info = proArr.map(pro =&gt; {        return {          pid: pro.pid,          cpuPercent: pro.cpu,          totalMemory: totalMem,          usedMemory: pro.mem.private, // RSS实际内存占用大小          memoryPercent: pro.mem.usage * 100, // 进程占用内存百分比          virtualMemory: pro.mem.virtual, // 虚拟内存占用大小        };      });      ctx.app.io.emit(&#39;monitor-memory-cpu&#39;, cpu_mem_info);    });  };  return exports;};</code></pre><ul><li>客户端实现 socket 监听 monitor-memory-cpu 事件， 每 3s 中获取到一次 Node 数据，然后绘制图表。 图片绘制请参考例子：<a href="https://link.zhihu.com/?target=https%3A//www.igniteui.com/spline-charts/spline-area">igniteui.com/spline-charts/spline-area</a><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> socket <span class="token operator">=</span> io<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">"http://localhost:7001"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>socket<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"monitor-memory-cpu"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>  data<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>info <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    info<span class="token punctuation">.</span>displayCPU <span class="token operator">=</span> info<span class="token punctuation">.</span>cpuPercent<span class="token punctuation">;</span>    info<span class="token punctuation">.</span>displayMem <span class="token operator">=</span> info<span class="token punctuation">.</span>usedMemory<span class="token punctuation">;</span>    info<span class="token punctuation">.</span>displayTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocaleTimeString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cpuData<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#cpuChart"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">igDataChart</span><span class="token punctuation">(</span><span class="token string">"notifyInsertItem"</span><span class="token punctuation">,</span> cpuData<span class="token punctuation">,</span> cpuData<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> info<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#memoryChart"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">igDataChart</span><span class="token punctuation">(</span><span class="token string">"notifyInsertItem"</span><span class="token punctuation">,</span> cpuData<span class="token punctuation">,</span> cpuData<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> info<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;知乎专栏：&lt;a href=&quot;https://zhuanlan.zhihu.com/p/30683070&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuanlan.zhihu.com/p/30683070&lt;/a&gt;&lt;br /&gt;&lt;br&gt;&lt;b
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>资源依赖</title>
    <link href="https://easyjs.cn/easywebpack/deps/"/>
    <id>https://easyjs.cn/easywebpack/deps/</id>
    <published>2020-05-31T09:43:53.000Z</published>
    <updated>2020-05-31T09:43:53.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="easywebpack-静态资源-manifest-文件"><a href="#easywebpack-静态资源-manifest-文件" class="headerlink" title="easywebpack 静态资源 manifest 文件"></a>easywebpack 静态资源 manifest 文件</h2><p>easywebpack 3.5.0 新增自定义插件 webpack-manifest-resource-plugin 替换 webpack-manifest-plugin。 之前的 manifest 依赖关系是在 Egg 运行期间解析的，现在改为构建期组装好资源依赖关系。新生成的 manifest 可以在纯前端项目使用，比如 PWA 场景。</p><ul><li>webpack-manifest-plugin</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ${app_root}/config/manifest.json</span><span class="token punctuation">{</span>    <span class="token string">"app/app.js"</span><span class="token punctuation">:</span> <span class="token string">"/public/js/app/app.2cf6dfd1.js"</span><span class="token punctuation">,</span>    <span class="token string">"app/app.css"</span><span class="token punctuation">:</span> <span class="token string">"/public/css/app/app.cda9bc64.css"</span><span class="token punctuation">,</span>    <span class="token string">"common.js"</span><span class="token punctuation">:</span> <span class="token string">"/public/js/common.b59f7169.js"</span><span class="token punctuation">,</span>    <span class="token string">"common.css"</span><span class="token punctuation">:</span> <span class="token string">"/public/css/common.cda9bc64.css"</span><span class="token punctuation">}</span></code></pre><ul><li>webpack-manifest-resource-plugin</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ${app_root}/config/manifest.json</span><span class="token punctuation">{</span>    <span class="token string">"app/app.js"</span><span class="token punctuation">:</span> <span class="token string">"/public/js/app/app.2cf6dfd1.js"</span><span class="token punctuation">,</span>    <span class="token string">"app/app.css"</span><span class="token punctuation">:</span> <span class="token string">"/public/css/app/app.cda9bc64.css"</span><span class="token punctuation">,</span>    <span class="token string">"common.js"</span><span class="token punctuation">:</span> <span class="token string">"/public/js/common.b59f7169.js"</span><span class="token punctuation">,</span>    <span class="token string">"common.css"</span><span class="token punctuation">:</span> <span class="token string">"/public/css/common.cda9bc64.css"</span><span class="token punctuation">,</span>    <span class="token string">"deps"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">"app/app.js"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">"js"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token string">"/public/js/vendor.337ab787.js"</span><span class="token punctuation">,</span>            <span class="token string">"/public/js/common.b59f7169.js"</span><span class="token punctuation">,</span>            <span class="token string">"/public/js/app/app.2cf6dfd1.js"</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string">"css"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token string">"/public/css/common.cda9bc64.css"</span><span class="token punctuation">,</span>            <span class="token string">"/public/css/app/app.cda9bc64.css"</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>manifest CDN 支持，请见 <a href="/easywebpack/cdn">/easywebpack/cdn</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;easywebpack-静态资源-manifest-文件&quot;&gt;&lt;a href=&quot;#easywebpack-静态资源-manifest-文件&quot; class=&quot;headerlink&quot; title=&quot;easywebpack 静态资源 manifest 文件&quot;&gt;&lt;/a&gt;ea
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>热更新</title>
    <link href="https://easyjs.cn/easywebpack/hot/"/>
    <id>https://easyjs.cn/easywebpack/hot/</id>
    <published>2020-05-31T09:43:53.000Z</published>
    <updated>2020-05-31T09:43:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>easywebpack 是通过 <a href="https://www.npmjs.com/package/koa-webpack-hot-middleware" target="_blank" rel="noopener">koa-webpack-hot-middleware</a> 和 koa-webpack-dev-middleware 插件实现<a href="">热更新机制</a>。具体实现封装成独立 <a href="https://github.com/easy-team/webpack-tool/blob/master/lib/tool.js">webpack-tool</a> 插件，该插件除了集成在 easywebpack 里面，同时也可以单独使用。下面详细说明 easywebpack 实现流程。</p><h2 id="实战项目热更新实现"><a href="#实战项目热更新实现" class="headerlink" title="实战项目热更新实现"></a>实战项目热更新实现</h2><h3 id="React-项目热更新实现"><a href="#React-项目热更新实现" class="headerlink" title="React 项目热更新实现"></a>React 项目热更新实现</h3><ul><li>${root}/.babelrc 文件配置<blockquote><p>项目需要安装 npm install react-hot-loader –save-dev 依赖</p></blockquote></li></ul><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span> <span class="token property">"env"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"development"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"plugins"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token string">"react-hot-loader/babel"</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>webpack entry 入口代码  <code>app.js</code> </li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token string">'use strict'</span><span class="token punctuation">;</span><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Provider <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-redux'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> AppContainer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-hot-loader'</span><span class="token punctuation">;</span><span class="token keyword">import</span> createStore <span class="token keyword">from</span> <span class="token string">'./store'</span><span class="token punctuation">;</span><span class="token keyword">import</span> Routes <span class="token keyword">from</span> <span class="token string">'./router'</span><span class="token keyword">import</span> <span class="token string">'./app.css'</span><span class="token punctuation">;</span><span class="token keyword">const</span> App <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> EASY_ENV_IS_DEV <span class="token operator">?</span> <span class="token operator">&lt;</span>AppContainer<span class="token operator">></span><span class="token operator">&lt;</span>Routes <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>AppContainer<span class="token operator">></span> <span class="token punctuation">:</span> <span class="token operator">&lt;</span>Routes <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> Entry <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>div<span class="token operator">></span>  <span class="token operator">&lt;</span>Provider store<span class="token operator">=</span><span class="token punctuation">{</span> <span class="token function">createStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token operator">></span>    <span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>Provider<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Entry <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'app'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>EASY_ENV_IS_DEV <span class="token operator">&amp;&amp;</span> module<span class="token punctuation">.</span>hot<span class="token punctuation">)</span> <span class="token punctuation">{</span>  module<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>实例项目</li></ul><p><a href="https://github.com/easy-team/easywebpack-awesome/tree/master/boilerplate/react" target="_blank" rel="noopener">https://github.com/easy-team/easywebpack-awesome/tree/master/boilerplate/react</a><br /><a href="https://github.com/keenwon/Egg-Webpack-Starter" target="_blank" rel="noopener">https://github.com/keenwon/Egg-Webpack-Starter</a></p><h3 id="Vue-项目热更新实现"><a href="#Vue-项目热更新实现" class="headerlink" title="Vue 项目热更新实现"></a>Vue 项目热更新实现</h3><blockquote><p>vue 项目无需额外配置，直接使用 Webpack 热更新配置 和 启动 koa webpack 编译服务即可</p></blockquote><p><a href="https://github.com/easy-team/easywebpack-awesome/tree/master/boilerplate/vue" target="_blank" rel="noopener">https://github.com/easy-team/easywebpack-awesome/tree/master/boilerplate/vue</a></p><h2 id="easywebpack-配置说明"><a href="#easywebpack-配置说明" class="headerlink" title="easywebpack 配置说明"></a>easywebpack 配置说明</h2><ul><li>vue ssr 本地开发时, css 是 js 内敛的,  无需开启;  如果采用 css 分离模式，请显示开启该配置。</li><li>react ssr 开发模式 css 时,  css 是分离出来的，默认开启。</li></ul><h2 id="Webpack-热更新原理实现"><a href="#Webpack-热更新原理实现" class="headerlink" title="Webpack 热更新原理实现"></a>Webpack 热更新原理实现</h2><blockquote><p><strong>在具体项目开发时，不需要自己实现热更新配置和启动服务，这些都已经集成到 easywebpack 体系里面。</strong></p></blockquote><h3 id="Webpack-热更新配置"><a href="#Webpack-热更新配置" class="headerlink" title="Webpack 热更新配置"></a>Webpack 热更新配置</h3><p>**<br /><img src="https://cdn.nlark.com/yuque/0/2019/png/116733/1550202614764-4d0add71-9256-4a06-a7bc-0f386880f0c5.png#align=left&display=inline&height=277&name=image.png&originHeight=277&originWidth=904&size=66914&status=done&width=904" alt="image.png"></p><h2 id=""><a href="#" class="headerlink" title=""></a></h2><p>转化为 webpack 配置</p><pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>    app<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token string">"webpack-hot-middleware/client?path=http://127.0.0.1:9000/__webpack_hmr&amp;noInfo=false&amp;reload=true"</span><span class="token punctuation">,</span>      <span class="token string">"src/index.js"</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>HotModuleReplacementPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h3 id="启动-koa-webpack-编译服务"><a href="#启动-koa-webpack-编译服务" class="headerlink" title="启动 koa webpack 编译服务"></a>启动 koa webpack 编译服务</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> webpackConfig <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./webpack.config'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> compiler <span class="token operator">=</span> <span class="token function">webpack</span><span class="token punctuation">(</span>webpackConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"webpack-dev-middleware"</span><span class="token punctuation">)</span><span class="token punctuation">(</span>compiler<span class="token punctuation">,</span> <span class="token punctuation">{</span>    noInfo<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> publicPath<span class="token punctuation">:</span> webpackConfig<span class="token punctuation">.</span>output<span class="token punctuation">.</span>publicPath<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"koa-webpack-hot-middleware"</span><span class="token punctuation">)</span><span class="token punctuation">(</span>compiler<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="相关文档"><a href="#相关文档" class="headerlink" title="相关文档"></a>相关文档</h2><ul><li><a href="/easywebpack/ed847g">easywebpack devServer实现</a></li><li><a href="https://zhuanlan.zhihu.com/p/30623057" target="_blank" rel="noopener">Webpack 热更新实现原理分析</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;easywebpack 是通过 &lt;a href=&quot;https://www.npmjs.com/package/koa-webpack-hot-middleware&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;koa-webpack-hot-middlew
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>HTML 工程方案</title>
    <link href="https://easyjs.cn/easywebpack/html_project/"/>
    <id>https://easyjs.cn/easywebpack/html_project/</id>
    <published>2020-05-31T09:43:53.000Z</published>
    <updated>2020-05-31T09:43:53.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/easy-team/easywebpack-html" target="_blank" rel="noopener">easywebpack-html</a>  纯静态页面构建解决方案</p><ul><li>支持纯静态页面构建<br /></li><li>支持 nunjucks 模版方式构建<br /></li></ul><h2 id="如何利用-easywebpack-cli工具快速获得一个骨架项目"><a href="#如何利用-easywebpack-cli工具快速获得一个骨架项目" class="headerlink" title="如何利用 easywebpack-cli工具快速获得一个骨架项目"></a>如何利用 <a href="https://github.com/easy-team/easywebpack-cli" target="_blank" rel="noopener">easywebpack-cli</a>工具快速获得一个骨架项目</h2><p><br />使用<a href="https://github.com/easy-team/easywebpack-cli" target="_blank" rel="noopener">easy-cli</a>你将得到一个具备以下能力的骨架项目:</p><ul><li>基于<a href="https://nunjucks.bootcss.com/" target="_blank" rel="noopener">Nunjucks</a>模版引擎的模版项目。<br /><ul><li>Why? 借助模版引擎，通过把模版拆成更小的碎片，你可以做到静态页面模版的模块化。<br /></li></ul></li><li>Jquery依赖。<br /></li><li>基于<code>CMD</code>的脚本依赖注入方式。<br /></li><li>自选sass/less等css预处理器。<br /></li><li>多目录结构且资源分治的打包能力。<br /></li></ul><h3 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a>Step 1</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i easywebpack-cli -g</code></pre><h3 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a>Step 2</h3><pre class=" language-bash"><code class="language-bash">easy init</code></pre><h3 id="Step-3"><a href="#Step-3" class="headerlink" title="Step 3"></a>Step 3</h3><p>按照指引选择/输入对应内容</p><h3 id="Step-4"><a href="#Step-4" class="headerlink" title="Step 4"></a>Step 4</h3><p>进入骨架项目目录</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> start</code></pre><p><strong>Enjoy It Easily~</strong></p><p><img src="https://cdn.nlark.com/yuque/0/2018/png/113623/1542798819487-6178c782-6dda-4017-aad5-83a250a75922.png#align=left&display=inline&height=336&originHeight=1278&originWidth=2842&search=&status=done&width=747" alt=""></p><h3 id="Step-5"><a href="#Step-5" class="headerlink" title="Step 5"></a>Step 5</h3><p>构建生产环境内容。<br /></p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> build</code></pre><p><img src="https://cdn.nlark.com/yuque/0/2018/png/113623/1542802774860-0100f512-760a-4969-bc87-540032461be4.png#align=left&display=inline&height=260&originHeight=260&originWidth=334&search=&status=done&width=334" alt=""></p><h3 id="配置编写"><a href="#配置编写" class="headerlink" title="配置编写"></a>配置编写</h3><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h4 id="基于-Webpack-原始配置构建"><a href="#基于-Webpack-原始配置构建" class="headerlink" title="基于 Webpack 原始配置构建"></a>基于 Webpack 原始配置构建</h4><blockquote><p>你可以在<a href="https://github.com/easy-team/easywebpack-cli" target="_blank" rel="noopener">easy-cli</a>生成的骨架项目中看到这样的配置内容。</p></blockquote><p>基础配置含义可以参考，通用的<a href="/frontend/config">基础配置介绍</a>。</p><p>（注：有时我们需要获得webpack的原生能力。我们可以借助<a href="/frontend/oy1dub#2853zo">额外配置</a>的方式直接和webpack沟通。）</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  framework<span class="token punctuation">:</span> <span class="token string">'html'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 指定用 easywebpack-html 解决方案, 请在项目中安装该依赖</span>  entry<span class="token punctuation">:</span> <span class="token string">'src/**/*.js'</span><span class="token punctuation">,</span>  externals<span class="token punctuation">:</span> <span class="token punctuation">{</span>    jquery<span class="token punctuation">:</span> <span class="token string">'window.$'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span> scss<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        nunjucks<span class="token punctuation">:</span> <span class="token punctuation">{</span>        options<span class="token punctuation">:</span> <span class="token punctuation">{</span>          searchPaths<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'./widget'</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 配置查找模板路径</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="配置说明"><a href="#配置说明" class="headerlink" title="配置说明"></a>配置说明</h3><h4 id="template：-html-公共模板文件路径-默认-src-view-layout-html"><a href="#template：-html-公共模板文件路径-默认-src-view-layout-html" class="headerlink" title="template：  html 公共模板文件路径, 默认 src/view/layout.html"></a>template：  html 公共模板文件路径, 默认 <code>src/view/layout.html</code></h4><pre class=" language-json"><code class="language-json">template<span class="token operator">:</span> 'src/view/layout.html'</code></pre><ul><li>表示构建HTML的公共模版文件。<br /></li><li>如果页面目录下面有 entry  的同名的 html 文件，将自动使用目录下的 html 作为 HTML 模板，不再使用统一的公共模版。</li></ul><h3 id="运行开发"><a href="#运行开发" class="headerlink" title="运行开发"></a>运行开发</h3><pre class=" language-bash"><code class="language-bash">easy dev</code></pre><h3 id="打包编译"><a href="#打包编译" class="headerlink" title="打包编译"></a>打包编译</h3><pre class=" language-bash"><code class="language-bash">easy build</code></pre><h2 id="基于-Webpack-原始配置构建-1"><a href="#基于-Webpack-原始配置构建-1" class="headerlink" title="基于 Webpack 原始配置构建"></a>基于 Webpack 原始配置构建</h2><h4 id="Webpack-原始配置编写"><a href="#Webpack-原始配置编写" class="headerlink" title="Webpack 原始配置编写"></a>Webpack 原始配置编写</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// webpack.config.js</span><span class="token keyword">const</span> easywebpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'easywebpack-html'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> webpack <span class="token operator">=</span> easywebpack<span class="token punctuation">.</span>webpack<span class="token punctuation">;</span><span class="token keyword">const</span> merge <span class="token operator">=</span> easywebpack<span class="token punctuation">.</span>merge<span class="token punctuation">;</span><span class="token keyword">const</span> env <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>BUILD_ENV<span class="token punctuation">;</span><span class="token keyword">const</span> baseWebpackConfig <span class="token operator">=</span> easywebpack<span class="token punctuation">.</span><span class="token function">getWebpackConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    env<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 根据环境变量生成对应配置，可以在 npm script 里面配置，支持dev, test, prod 模式</span>    entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>      home<span class="token punctuation">:</span> <span class="token string">'src/page/home/home.js'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    module<span class="token punctuation">:</span> <span class="token punctuation">{</span>      rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span> scss<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>          nunjucks<span class="token punctuation">:</span> <span class="token punctuation">{</span>          options<span class="token punctuation">:</span> <span class="token punctuation">{</span>            searchPaths<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'./widget'</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 配置查找模板路径</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">]</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 拿到基础配置, 可以进行二次加工</span><span class="token keyword">const</span> webpackConfig <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span>baseWebpackConfig<span class="token punctuation">,</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 自定义配置</span><span class="token punctuation">}</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> webpackConfig<span class="token punctuation">;</span></code></pre><h3 id="本地开发"><a href="#本地开发" class="headerlink" title="本地开发"></a>本地开发</h3><ul><li>使用 webpack-dev-server ： <code>webpack-dev-server --hot</code></li><li>使用 easywepback-cli:   <code>easy dev --webpack</code> </li></ul><h4 id="-1"><a href="#-1" class="headerlink" title=""></a></h4><h3 id="打包编译-1"><a href="#打包编译-1" class="headerlink" title="打包编译"></a>打包编译</h3><ul><li>使用 webpack-cli ： <code>webpack --mode production --config webpack.config.js</code></li><li>使用 easywepback-cli:   <code>easy build --webpack</code> </li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://github.com/easy-team/easywebpack-html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;easywebpack-html&lt;/a&gt;  纯静态页面构建解决方案&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;支持纯
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>loaders</title>
    <link href="https://easyjs.cn/easywebpack/loader/"/>
    <id>https://easyjs.cn/easywebpack/loader/</id>
    <published>2020-05-31T09:43:53.000Z</published>
    <updated>2020-05-31T09:43:53.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>v3</code> 代表 easywebpack 3.x.x, <code>v4</code> 代表 easywebpack 4.x.x<br /></p><h2 id="内置配置-loaders"><a href="#内置配置-loaders" class="headerlink" title="内置配置 loaders"></a>内置配置 loaders</h2><ul><li><p>easywebpack 内置了 <code>babel</code>, <code>eslint</code>, <code>css</code>, <code>sass</code>, <code>less</code>, <code>stylus</code>, <code>urlimage</code>, <code>urlfont</code> 等loader,</p></li><li><p>easywebpack-vue 内置了 <code>vue</code>, <code>vuehtml</code> 等loader,</p></li><li><p>easywebpack-react 内置了 <code>react-hot-loader</code> 等loader,</p></li><li><p>easywebpack-weex 内置了 <code>vue</code>, <code>weex</code> 等loader.</p></li><li><p>easywebpack-html 内置了 <code>html</code>, <code>nunjucks</code> 等loader.</p></li></ul><table><thead><tr><th>loader</th><th>别名</th><th>默认是否开启</th><th>webpack.config.js配置举例</th></tr></thead><tbody><tr><td>babel-loader</td><td>babel</td><td>是</td><td><strong>禁用:</strong><br />loaders:{ babel: false}</td></tr><tr><td>eslint-loader</td><td>eslint</td><td>否</td><td><strong>启用:</strong><br />loaders: { eslint: true} <br /> <strong>自动修复:</strong><br /> loaders:{ eslint: {options: {fix: true}}</td></tr><tr><td>tslint-loader</td><td>tslint</td><td>否</td><td><strong>启用:</strong><br />loaders:{ tslint: tue} <br /> <strong>自动修复:</strong><br /> loaders:{ tslint: {options: {fix: true}</td></tr><tr><td>ts-loader</td><td>ts</td><td>否</td><td><strong>禁用:</strong><br />loaders:{ ts: false} <br /><strong>开启:</strong><br />loaders:{ ts: true}**</td></tr><tr><td>css-loader</td><td>css</td><td>是</td><td>N/A</td></tr><tr><td>sass-loader</td><td>sass</td><td>v3 是 v4 否</td><td><strong>开启: **<br /></strong>loaders:{ sass: true}<strong><br /> **路径配置:</strong><br /> <strong>loaders:{sass: {options: {includePaths: [“asset/css”]}}</strong><br /><strong>安装依赖：</strong><br />“<a href="https://github.com/sass/node-sass" target="_blank" rel="noopener">node-sass</a>“: “^4.5.3”,<br />“<a href="https://github.com/webpack-contrib/sass-loader" target="_blank" rel="noopener">sass-loader</a>“: “^6.0.6”,</td></tr><tr><td>sass-loader</td><td>scss</td><td>v3 是 v4 否</td><td><strong>开启:</strong><br />loaders:{ scss: true}<br /><strong>安装依赖：</strong><br /> “<a href="https://github.com/sass/node-sass" target="_blank" rel="noopener">node-sass</a>“: “^4.5.3”,<br />    “<a href="https://github.com/webpack-contrib/sass-loader" target="_blank" rel="noopener">sass-loader</a>“: “^6.0.6”,</td></tr><tr><td>less-loader</td><td>less</td><td>否</td><td><strong>开启:</strong><br />loaders:{ less: true}<br /><strong>安装依赖：</strong><br />“<a href="https://github.com/less/less.js" target="_blank" rel="noopener">less</a>“: “^2.7.2”,<br />“<a href="https://github.com/webpack-contrib/less-loader" target="_blank" rel="noopener">less-loader</a>“: “^4.0.5”,</td></tr><tr><td>stylus-loader</td><td>stylus</td><td>否</td><td><strong>开启:</strong><br />loaders:{ stylus: true }<br />“stylus”: “^0.54.5”,<br />“stylus-loader”: “^3.0.0”,</td></tr><tr><td>url-loader</td><td>urlimage</td><td>是</td><td><strong>禁用:</strong><br />loaders:{ urlimage: false} <br /> <strong>配置limit(默认1024):</strong><br /> loaders:{urlimage: {options: {limit: 2048 }}</td></tr><tr><td>url-loader</td><td>urlfont</td><td>是</td><td><strong>禁用:</strong><br />loaders:{ urlfont: false} <br /> <strong>配置limit(默认1024):</strong><br /> loaders:{urlfont: {options: {limit: 2048 }}</td></tr><tr><td>url-loader</td><td>urlmedia</td><td>是</td><td>禁用:<br />loaders:{ urlmedia: false} <br /> <strong>配置limit(默认1024):</strong><br /> loaders:{urlmedia: {options: {limit: 2048 }}</td></tr><tr><td>nunjucks-html-loader</td><td>nunjucks</td><td>否</td><td><strong>启用:</strong><br />loaders:{ nunjucks: true }</td></tr><tr><td>ejs-loader</td><td>ejs</td><td>否</td><td><strong>启用:</strong><br />loaders:{ ejs: true }</td></tr></tbody></table><h2 id="内置-loader-扩展参数统一通过-options-节点配置"><a href="#内置-loader-扩展参数统一通过-options-节点配置" class="headerlink" title="内置 loader 扩展参数统一通过 options 节点配置"></a>内置 loader 扩展参数统一通过 options 节点配置</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ${app_root}/webpack.config.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  module<span class="token punctuation">:</span><span class="token punctuation">{</span>     rules<span class="token punctuation">:</span><span class="token punctuation">[</span>       <span class="token punctuation">{</span>         $<span class="token punctuation">{</span>loader别名<span class="token punctuation">}</span><span class="token punctuation">:</span><span class="token punctuation">{</span>            options<span class="token punctuation">:</span><span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">// 具体loader参数</span>            <span class="token punctuation">}</span>                <span class="token punctuation">}</span>       <span class="token punctuation">}</span>     <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>或module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  loaders<span class="token punctuation">:</span><span class="token punctuation">{</span>     $<span class="token punctuation">{</span>loader别名<span class="token punctuation">}</span><span class="token punctuation">:</span><span class="token punctuation">{</span>      options<span class="token punctuation">:</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 具体loader参数</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><br /><h2 id="Webpack-与-easywebpack-配置对比"><a href="#Webpack-与-easywebpack-配置对比" class="headerlink" title="Webpack 与 easywebpack 配置对比"></a>Webpack 与 easywebpack 配置对比</h2><h3 id="Webpack-配置"><a href="#Webpack-配置" class="headerlink" title="Webpack 配置"></a>Webpack 配置</h3><pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">:</span> <span class="token punctuation">{</span>  rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span> test<span class="token punctuation">:</span> <span class="token regex">/\.tsx?$/</span><span class="token punctuation">,</span> loader<span class="token punctuation">:</span> <span class="token string">"ts-loader"</span> <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h3 id="easywebpack-内置-loader-配置，-同时支持-Webpack-原生配置"><a href="#easywebpack-内置-loader-配置，-同时支持-Webpack-原生配置" class="headerlink" title="easywebpack 内置 loader 配置， 同时支持 Webpack 原生配置"></a>easywebpack 内置 loader 配置， 同时支持 Webpack 原生配置</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 最新版本建议配置</span>module<span class="token punctuation">:</span> <span class="token punctuation">{</span>  rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span> ts<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h2 id="module-rules-loaders-配置"><a href="#module-rules-loaders-配置" class="headerlink" title="module.rules  | loaders 配置"></a>module.rules  | loaders 配置</h2><p><br /><strong>config.loaders |  config.module.rules</strong> 非必须，支持 Object ｜ Array。 这里的loaders 是对 Webpack <code>module.rules</code> 的简化和增强。建议用 <strong>增强配置</strong> 方式配置.<br /></p><ul><li><p>兼容 Webpack 原生数组配置</p></li><li><p>[增强]支持通过别名对内置 loader 开启和禁用，以及参数配置</p></li><li><p>[增强]支持通过别名的方式添加 loader 插件</p></li></ul><h3 id="内置-loader-扩展参数统一通过-options-节点配置-1"><a href="#内置-loader-扩展参数统一通过-options-节点配置-1" class="headerlink" title="内置 loader 扩展参数统一通过 options 节点配置"></a>内置 loader 扩展参数统一通过 options 节点配置</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ${app_root}/webpack.config.js</span><span class="token comment" spellcheck="true">// 最新版本建议配置</span>module<span class="token punctuation">:</span> <span class="token punctuation">{</span>  rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>       $<span class="token punctuation">{</span>loader别名<span class="token punctuation">}</span><span class="token punctuation">:</span><span class="token punctuation">{</span>          include<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>          options<span class="token punctuation">:</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 具体loader参数</span>          <span class="token punctuation">}</span>       <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h3 id="Webpack-module-rules-原生数组配置举例"><a href="#Webpack-module-rules-原生数组配置举例" class="headerlink" title="Webpack  module.rules 原生数组配置举例"></a>Webpack  module.rules 原生数组配置举例</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ${app_root}/webpack.config.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token operator">...</span><span class="token operator">...</span>  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>   rules<span class="token punctuation">:</span><span class="token punctuation">[</span>    <span class="token punctuation">{</span> ts<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      test<span class="token punctuation">:</span> <span class="token regex">/\.html$/</span><span class="token punctuation">,</span>      use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'html-loader'</span><span class="token punctuation">,</span> <span class="token string">'html-swig-loader'</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>   <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h3 id="Webpack-module-rules-增强配置举例"><a href="#Webpack-module-rules-增强配置举例" class="headerlink" title="Webpack module.rules 增强配置举例"></a>Webpack module.rules 增强配置举例</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ${app_root}/webpack.config.js</span><span class="token comment" spellcheck="true">// 最新版本建议配置</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token operator">...</span><span class="token operator">...</span>  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>   rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span> ts<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> less<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>   <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><br /><h3 id="eslint-配置自动修复功能-默认禁用"><a href="#eslint-配置自动修复功能-默认禁用" class="headerlink" title="eslint 配置自动修复功能, 默认禁用"></a>eslint 配置自动修复功能, 默认禁用</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ${app_root}/webpack.config.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  module<span class="token punctuation">:</span><span class="token punctuation">{</span>    rules<span class="token punctuation">:</span><span class="token punctuation">[</span>      <span class="token punctuation">{</span>        eslint<span class="token punctuation">:</span><span class="token punctuation">{</span>          options<span class="token punctuation">:</span><span class="token punctuation">{</span>            fix<span class="token punctuation">:</span> <span class="token boolean">true</span>          <span class="token punctuation">}</span>            <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="sass-scss-配置-css-文件查找目录"><a href="#sass-scss-配置-css-文件查找目录" class="headerlink" title="sass/scss 配置 css 文件查找目录"></a>sass/scss 配置 css 文件查找目录</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ${app_root}/webpack.config.js</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  module<span class="token punctuation">:</span><span class="token punctuation">{</span>    rules<span class="token punctuation">:</span><span class="token punctuation">[</span>      <span class="token punctuation">{</span>       sass<span class="token punctuation">:</span> <span class="token punctuation">{</span>        options<span class="token punctuation">:</span> <span class="token punctuation">{</span>          includePaths<span class="token punctuation">:</span> <span class="token punctuation">[</span>            path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'app/web/asset/style'</span><span class="token punctuation">)</span>          <span class="token punctuation">]</span>        <span class="token punctuation">}</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>       scss<span class="token punctuation">:</span> <span class="token punctuation">{</span>         options<span class="token punctuation">:</span> <span class="token punctuation">{</span>           includePaths<span class="token punctuation">:</span> <span class="token punctuation">[</span>             path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'app/web/asset/style'</span><span class="token punctuation">)</span>           <span class="token punctuation">]</span>         <span class="token punctuation">}</span>         <span class="token punctuation">}</span>       <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="vue-配置-img-图片自定义属性-webpack-解析"><a href="#vue-配置-img-图片自定义属性-webpack-解析" class="headerlink" title="vue 配置 img 图片自定义属性 webpack 解析"></a>vue 配置 img 图片自定义属性 webpack 解析</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ${app_root}/webpack.config.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  module<span class="token punctuation">:</span><span class="token punctuation">{</span>    rules<span class="token punctuation">:</span><span class="token punctuation">[</span>      <span class="token punctuation">{</span>        vue<span class="token punctuation">:</span> <span class="token punctuation">{</span>              options<span class="token punctuation">:</span> <span class="token punctuation">{</span> transformToRequire<span class="token punctuation">:</span> <span class="token punctuation">{</span> img<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">,</span> <span class="token string">'src'</span><span class="token punctuation">]</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>            <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><br /><h3 id="自定义格式和原生格式"><a href="#自定义格式和原生格式" class="headerlink" title="自定义格式和原生格式."></a>自定义格式和原生格式.</h3><p><br /><strong>module.rules</strong> : {Object} Webpack loader 配置, 支持自定义格式和原生格式<br /><br><br /><code>key:value</code> 形式, 其中 <code>key</code> 为别名, 可以自由定义, easywebpack和对应解决方案内置了一些别名和loader.<br /><br><br />比如我要添加一个全新且 easywebpack 没有内置的 html-swig-loader, 可以这样配置:<br /></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 最新版本建议配置</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token operator">...</span><span class="token operator">...</span>  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>   rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>  <span class="token comment" spellcheck="true">// 内置 loader 和 原生 loader 混合配置</span>    <span class="token punctuation">{</span> ts<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>       test<span class="token punctuation">:</span> <span class="token regex">/\.html$/</span><span class="token punctuation">,</span>      use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'html-loader'</span><span class="token punctuation">,</span> <span class="token string">'html-swig-loader'</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>   <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><br /><code>swig</code> key 别名随意, 我可以叫 swig, 也可以叫 htmlswig 等等<br /></p><h3 id="禁用-easywebpack-内置的-babel-loader-可以这样配置"><a href="#禁用-easywebpack-内置的-babel-loader-可以这样配置" class="headerlink" title="禁用 easywebpack 内置的 babel-loader 可以这样配置"></a>禁用 easywebpack 内置的 <code>babel-loader</code> 可以这样配置</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 最新版本建议配置</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token operator">...</span><span class="token operator">...</span>  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>   rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span> babel<span class="token punctuation">:</span><span class="token boolean">false</span> <span class="token punctuation">}</span>   <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><br /><h3 id="修改-easywebpack-内置-babel-loader-的-test-和-use-可以这样配置"><a href="#修改-easywebpack-内置-babel-loader-的-test-和-use-可以这样配置" class="headerlink" title="修改 easywebpack 内置 babel-loader 的 test 和 use,  可以这样配置"></a>修改 easywebpack 内置 <code>babel-loader</code> 的 test 和 use,  可以这样配置</h3><p><br />因 use 存在顺序问题, use 目前采用的策略是完全覆盖<br /></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 最新版本建议配置</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token operator">...</span><span class="token operator">...</span>  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>   rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span> babel<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 禁用默认</span>    <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 自己配置</span>      test<span class="token punctuation">:</span> <span class="token regex">/\.(jsx|vue)?$/</span><span class="token punctuation">,</span>      exclude<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token regex">/node_modules/</span><span class="token punctuation">,</span> <span class="token string">'page/test'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      use<span class="token punctuation">:</span> <span class="token punctuation">[</span>       <span class="token punctuation">{</span>        loader<span class="token punctuation">:</span> <span class="token string">'babel-loader'</span>       <span class="token punctuation">}</span><span class="token punctuation">,</span>       <span class="token punctuation">{</span>        loader<span class="token punctuation">:</span> <span class="token string">'eslint-loader'</span>       <span class="token punctuation">}</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span>   <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="config-loaders-具体loader配置项属性介绍"><a href="#config-loaders-具体loader配置项属性介绍" class="headerlink" title="config.loaders 具体loader配置项属性介绍"></a>config.loaders 具体loader配置项属性介绍</h3><p><br />config.loader 配置项除了支持的loader原生属性, 还扩展了 <code>env</code>, <code>type</code>, <code>enable</code>, <code>postcss</code>, <code>framework</code> 五个属性, 其中 <code>postcss</code>, <code>framework</code> 用于css相关loader, 例如内置的 <code>sass-loader</code><br /></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 最新版本建议配置</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token operator">...</span><span class="token operator">...</span>  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>   rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span> sass<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 禁用默认</span>    <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 自己配置</span>     test<span class="token punctuation">:</span> <span class="token regex">/\.sass/</span><span class="token punctuation">,</span>     exclude<span class="token punctuation">:</span> <span class="token regex">/node_modules/</span><span class="token punctuation">,</span>      use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'css-loader'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        loader<span class="token punctuation">:</span> <span class="token string">'sass-loader'</span><span class="token punctuation">,</span>      options<span class="token punctuation">:</span> <span class="token punctuation">{</span>        indentedSyntax<span class="token punctuation">:</span> <span class="token boolean">true</span>      <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>   <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li><p><strong>env</strong>: 见 <code>config.env</code> 说明, 可选, 默认全部</p></li><li><p><strong>type</strong>: 见 <code>config.type</code> 说明, 可选, 默认全部</p></li><li><p><strong>enable</strong>: {Boolean/Function} 是否启用, 可选, 默认可用</p></li><li><p><strong>postcss</strong>: {Boolean} 可选, 特殊配置, 是否启用postcss, 只有css样式loader需要配置, 其他loader不需要配置</p></li><li><p><strong>use</strong>: {Array/Function} 必须, 支持扩展的Function配置和原生Use配置, use属性是完全覆盖.</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;v3&lt;/code&gt; 代表 easywebpack 3.x.x, &lt;code&gt;v4&lt;/code&gt; 代表 easywebpack 4.x.x&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;内置配置-loaders&quot;&gt;&lt;a href=&quot;#内置配置-loaders&quot; class=
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>常见问题</title>
    <link href="https://easyjs.cn/easywebpack/problem/"/>
    <id>https://easyjs.cn/easywebpack/problem/</id>
    <published>2020-05-31T09:43:53.000Z</published>
    <updated>2020-05-31T09:43:53.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Babel-快速升级问题"><a href="#Babel-快速升级问题" class="headerlink" title="Babel 快速升级问题"></a>Babel 快速升级问题</h3><p><br />为了更方便升级 Babel7, 同时尽量减少配置且无需安装 @babel 依赖，@easy-team 模式直接内置Babel 7 的相关依赖，只需要把 easywebpack 依赖模式改成 @easy-team/easywebpack 模式，如果代码中直接依赖了也请一并修改。<br /><br><br />@easy-team/easywebpack-cli: ^4.0.0 替换  easywebpack-cli<br />@easy-team/easywebpack-react: ^4.0.0 替换  easywebpack-react<br />@easy-team/easywebpack-vue: ^4.0.0 替换  easywebpack-vue<br /></p><h3 id="移除-console-日志"><a href="#移除-console-日志" class="headerlink" title="移除 console 日志"></a>移除 console 日志</h3><p><br />Webpack 4 压缩是通过 optimization.minimizer 来实现，默认 console 是没有被移除，如果需要移除，可以通过TerserPlugin 配置解决。<br /></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> TerserPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'terser-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token string">'use strict'</span><span class="token comment" spellcheck="true">// webpack.config.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  optimization<span class="token punctuation">:</span> <span class="token punctuation">{</span>      minimizer<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token keyword">new</span> <span class="token class-name">TerserPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>          terserOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>            compress<span class="token punctuation">:</span> <span class="token punctuation">{</span>              drop_console<span class="token punctuation">:</span> <span class="token boolean">true</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">]</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="Server-Side-Render-引入-node-modules-UI-组件库-iview"><a href="#Server-Side-Render-引入-node-modules-UI-组件库-iview" class="headerlink" title="Server Side Render 引入 node_modules UI 组件库 iview"></a>Server Side Render 引入 node_modules UI 组件库 iview</h3><blockquote><p>在通过 webpack 构建 server side render 模块(target: ‘node’)时，默认情况下，node_modules 下的模块不会打进构建后的 JSBundle 文件里，而是直接通过 require 方式引用模块的。如果在业务代码中直接引用 node-modules 下的 .vue 或 .jsx 文件时，会出现不能解析引入的组件模块。这是需要通过 <code>nodeExternals.whitelist</code>  配置该模块需要编译到 JSBundle 文件里面，这样才能被相应 loader 进行编译处理。</p></blockquote><p><img src="/medias/easyjs/easywebpack/easywebpack-problem-image-8524567.png" alt="image.png"><br /></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ${root}/webpack.config.js</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> resolve <span class="token operator">=</span> filepath <span class="token operator">=</span><span class="token operator">></span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> filepath<span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  nodeExternals<span class="token punctuation">:</span> <span class="token punctuation">{</span>    whitelist<span class="token punctuation">:</span> <span class="token punctuation">[</span> moduleName <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>       <span class="token keyword">return</span> <span class="token regex">/iview/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>moduleName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        babel<span class="token punctuation">:</span> <span class="token punctuation">{</span>          include<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'app/web'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'node_modules/iview'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>          exclude<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        vue<span class="token punctuation">:</span> <span class="token punctuation">{</span>          include<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'app/web'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'node_modules/iview'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>          exclude<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><h3 id="自定义扩展或查看打印-Webpack-配置"><a href="#自定义扩展或查看打印-Webpack-配置" class="headerlink" title="自定义扩展或查看打印 Webpack 配置"></a>自定义扩展或查看打印 Webpack 配置</h3><ul><li>通过 <a href="https://github.com/easy-team/easywebpack-cli" target="_blank" rel="noopener">easywebpack-cli  </a>命令行工具的 easy print 命令</li><li>通过 <code>customize</code>  钩子处理 <pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//${root}/webpack.config.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token function">customize</span><span class="token punctuation">(</span>webpackConfig<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 此外 webpackConfig 为原生生成的 webpack config，可以进行自定义处理</span> <span class="token keyword">return</span> webpackConfig<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><br /><h3 id="关闭自动打开浏览器"><a href="#关闭自动打开浏览器" class="headerlink" title="关闭自动打开浏览器"></a>关闭自动打开浏览器</h3><ul><li>使用 egg-webpack 进行开发时，可以通过配置 browser: false 关闭自动打开浏览器</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ${root}/config/config.local.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> app <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> exports <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  exports<span class="token punctuation">.</span>webpack <span class="token operator">=</span> <span class="token punctuation">{</span>    browser<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 这里可以打开指定 url 地址</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> exports<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><ul><li>没有使用 egg-webpack 插件时，可以通过 devServer 的 open 开关设置是否打开指定页面</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ${root}/webpack.config.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>    open<span class="token punctuation">:</span> <span class="token string">'http://127.0.0.1:8888'</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><br /><h3 id="编译装饰器-Unexpected-charactor-错误"><a href="#编译装饰器-Unexpected-charactor-错误" class="headerlink" title="编译装饰器 Unexpected charactor @ 错误"></a>编译装饰器 Unexpected charactor @ 错误</h3><p><br />.babelrc 配置 babel 装饰器编译插件： <a href="https://babeljs.io/docs/en/babel-plugin-proposal-decorators" target="_blank" rel="noopener">https://babeljs.io/docs/en/babel-plugin-proposal-decorators</a></p><h3 id="-2"><a href="#-2" class="headerlink" title=""></a></h3><h3 id="autoprefixer对-import方式引用css文件无效的解决方案"><a href="#autoprefixer对-import方式引用css文件无效的解决方案" class="headerlink" title="autoprefixer对@import方式引用css文件无效的解决方案"></a>autoprefixer对@import方式引用css文件无效的解决方案</h3><ul><li><p>方式一：改为 import 方式</p></li><li><p>增加 css importLoaders 配置</p></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ${root}/webpack.config.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span> loaders<span class="token punctuation">:</span> <span class="token punctuation">{</span>  css<span class="token punctuation">:</span> <span class="token punctuation">{</span>   importLoaders<span class="token punctuation">:</span> <span class="token number">1</span>  <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><br /><h3 id="TypeScript-Vue-项目找不到-vue-文件"><a href="#TypeScript-Vue-项目找不到-vue-文件" class="headerlink" title="TypeScript  + Vue 项目找不到 .vue 文件"></a>TypeScript  + Vue 项目找不到 .vue 文件</h3><p><br />在用 TypeScript 编写 Vue 应用时， Vue 里面的 TypeScript 代码建议不要写在 Vue 文件里面，请以单独 ts 文件存放 TypeScript 代码。目前测试发现与 thread-loader 一起使用是有问题的。easywebpack  4.10.0 开始，默认开启了 thread-loader, 你可以通过如下方式禁用 thread-loader：<br /></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ${root}/webpack.config.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span> compile<span class="token punctuation">:</span> <span class="token punctuation">{</span>   thread<span class="token punctuation">:</span> <span class="token boolean">false</span>  <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><br /><h3 id="禁用-node-sass-安装"><a href="#禁用-node-sass-安装" class="headerlink" title="禁用 node-sass 安装"></a>禁用 node-sass 安装</h3><p><br />目前 easywebpack 3 默认是 开启了 sass 功能，但安装 <code>node-sass</code> 时, 会出现安装不成功(二进制本地编译)的情况，这个时候可以按照如下方式禁用 node-sass .  <strong>easywebpack 4</strong> 已默认禁用。<br /></p><ul><li><p>确保代码引用里面没有用 sass 编写样式</p></li><li><p>删除 <code>package.json</code> 里面的  <code>node-sass</code> 依赖</p></li><li><p>禁用 webpack 引用 <code>node-sass</code> 编译</p></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ${app_root}/webpack.config.js</span>module<span class="token punctuation">.</span>exports<span class="token operator">=</span> <span class="token punctuation">{</span>  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    rules<span class="token punctuation">:</span><span class="token punctuation">[</span>           <span class="token punctuation">{</span> scss<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span>      <span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><br /><h3 id="禁用图片压缩插件-imagemin-webpack-plugin-安装"><a href="#禁用图片压缩插件-imagemin-webpack-plugin-安装" class="headerlink" title="禁用图片压缩插件 imagemin-webpack-plugin 安装"></a>禁用图片压缩插件 imagemin-webpack-plugin 安装</h3><p><br />目前 easywebpack 默认是打正式包时开启了图片压缩功能，但在某些部分机器安装 <code>imagemin-webpack-plugin</code> 时, 会出现安装不成功的情况(二进制本地编译, 系统缺少某些本地库)，这个时候可以按照如下方式禁用 <code>imagemin-webpack-plugin</code><br /></p><ul><li><p>删除 <code>package.json</code> 里面的  <code>imagemin-webpack-plugin</code> 依赖</p></li><li><p>禁用 webpack 引用 <code>imagemin-webpack-plugin</code> 编译</p></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ${app_root}/webpack.config.js</span>module<span class="token punctuation">.</span>exports<span class="token operator">=</span> <span class="token punctuation">{</span>  plugins <span class="token punctuation">:</span><span class="token punctuation">[</span>    <span class="token punctuation">{</span> imagemini<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="-3"><a href="#-3" class="headerlink" title=""></a></h3><h3 id="引入-node-modules-下的-module-没有编译为-es5，导致压缩报错"><a href="#引入-node-modules-下的-module-没有编译为-es5，导致压缩报错" class="headerlink" title="引入 node_modules 下的 module 没有编译为 es5，导致压缩报错"></a>引入 node_modules 下的 module 没有编译为 es5，导致压缩报错</h3><p><br />easy 体现 默认 node_modules  是被 babel 排除的，如果有 es6+ 的模块，需要包含进来才行，否则压缩报错</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ${app_root}/webpack.config.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    rules<span class="token punctuation">:</span><span class="token punctuation">[</span>      <span class="token punctuation">{</span>        babel<span class="token punctuation">:</span> <span class="token punctuation">{</span>          exclude<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="-4"><a href="#-4" class="headerlink" title=""></a></h3><h3 id="引入-node-modules-下-vue-组件报找不到对应的-loader-错误"><a href="#引入-node-modules-下-vue-组件报找不到对应的-loader-错误" class="headerlink" title="引入 node_modules 下 vue 组件报找不到对应的 loader 错误"></a>引入 node_modules 下 vue 组件报找不到对应的 loader 错误</h3><p><br /><code>easywebpack-vue</code> 默认的 <code>vue-loader</code> 配置排除了 <code>node_moudles</code> 目录, 主要目的是避免 <code>node_moudles</code> 被扫描，加快构建速度。如果你需要 引入 <code>node_moudles</code> 下 vue 组件, 请把对应的组件加入 <code>include</code> 配置 或者 用 <code>exclude</code> 覆盖默认配置，建议<code>include</code> 配置.<br /></p><h4 id="include-配置"><a href="#include-配置" class="headerlink" title="include 配置"></a><code>include</code> 配置</h4><p><br />例如： 代码在 app/web 目录，  引入 node_modules 下 vue 组件为<br /></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ${app_root}/webpack.config.js</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> resolve <span class="token operator">=</span> filepath <span class="token operator">=</span><span class="token operator">></span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> filepath<span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports<span class="token operator">=</span> <span class="token punctuation">{</span>    module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    rules<span class="token punctuation">:</span><span class="token punctuation">[</span>      <span class="token punctuation">{</span>        vue<span class="token punctuation">:</span> <span class="token punctuation">{</span>              include<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'app/web'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">/</span>node_module\<span class="token operator">/</span>vue<span class="token operator">-</span>datepicker<span class="token operator">-</span>local<span class="token operator">/</span><span class="token punctuation">]</span>            <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><br />相关issue: <a href="https://github.com/hubcarl/egg-vue-webpack-boilerplate/issues/53" target="_blank" rel="noopener">import 外部模块失败</a><br /></p><h4 id="exclude-配置"><a href="#exclude-配置" class="headerlink" title="exclude 配置"></a><code>exclude</code> 配置</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ${app_root}/webpack.config.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    rules<span class="token punctuation">:</span><span class="token punctuation">[</span>      <span class="token punctuation">{</span>        babel<span class="token punctuation">:</span> <span class="token punctuation">{</span>          exclude<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><br />see: <a href="https://github.com/webpack/webpack/issues/2031" target="_blank" rel="noopener">https://github.com/webpack/webpack/issues/2031</a><br /><br><br /></p><h3 id="Egg-Vue-React-修改静态资源-publicPath-路径"><a href="#Egg-Vue-React-修改静态资源-publicPath-路径" class="headerlink" title="Egg + Vue/React 修改静态资源 publicPath 路径"></a>Egg + Vue/React 修改静态资源 publicPath 路径</h3><p><br />在 Egg + Vue/React 解决方案中, Webpack publicPath 使用的是默认 <code>publicPath: &#39;/public/&#39;</code> 配置。<br /><br><br />如果要修复默认的publicPath，比如要修改 <code>/static/</code>，需要修改三个地方：<br /></p><h4 id="首先版本要求"><a href="#首先版本要求" class="headerlink" title="首先版本要求"></a>首先版本要求</h4><ul><li><p>easywebpack: ^3.5.1</p></li><li><p>egg-webpack: ^3.2.5</p></li></ul><h4 id="配置修改"><a href="#配置修改" class="headerlink" title="配置修改"></a>配置修改</h4><ul><li>Webpack <code>webpack.config.js</code> 配置添加 <code>publicPath</code> 配置覆盖默认配置</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ${app_root}/webpack.config.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> <span class="token string">'static'</span><span class="token punctuation">,</span>    publicPath<span class="token punctuation">:</span> '<span class="token regex">/static/</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><ul><li>Egg 配置 <code>config.default.js</code> 添加静态资源</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ${app_root}/config/config.local.js</span> exports<span class="token punctuation">.</span><span class="token keyword">static</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    prefix<span class="token punctuation">:</span> <span class="token string">'/static/'</span><span class="token punctuation">,</span>    dir<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>baseDir<span class="token punctuation">,</span> <span class="token string">'static'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><ul><li>本地开发 Webpack 静态代理<blockquote><p>see： <a href="https://github.com/easy-team/egg-webpack" target="_blank" rel="noopener">https://github.com/easy-team/egg-webpack</a></p></blockquote></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ${app_root}/config/config.local.js</span> exports<span class="token punctuation">.</span>webpack <span class="token operator">=</span> <span class="token punctuation">{</span>    proxy<span class="token punctuation">:</span> <span class="token punctuation">{</span>      match<span class="token punctuation">:</span> <span class="token regex">/^\/static\//</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><br /><h3 id="npm-install-安装后-npm-start-启动失败"><a href="#npm-install-安装后-npm-start-启动失败" class="headerlink" title="npm install 安装后, npm start 启动失败"></a><code>npm install</code> 安装后, <code>npm start</code> 启动失败</h3><p><br />在使用 <code>easywebpack</code> 体系构建时, 在首次 <code>npm start</code> 时, <code>easywebpack</code> 会检查开启的 loader, plugin 插件是否已经安装, 如果没有安装则自动安装.<br>在这个过程会打印动态安装的 <code>npm</code> 模块, 如果安装失败则会导致启动失败, 这个时候你可以手动安装动态安装的 <code>npm</code> 模块 或者通过 <code>easy install</code> 自动动态安装缺失的依赖, 同时把依赖写入 <code>package.json</code> 的 <code>devDependencies</code>中.<br>然后重新启动.<br /><br><br /><code>easywebpack</code> 解决方案只内置了必须的几个常用 loader 和 plugin, 其他 loader (比如 less, stylus) 和 plugin (imagemini) 都是需要项目自己根据需要安装。如果你自己搭建项目，遇到依赖缺失错误，除了手动 npm install 安装以外, 可以使用 <code>easy install</code> 命令，安装所有缺失的依赖，默认是 <code>npm</code> 方式<br /></p><pre class=" language-bash"><code class="language-bash">easy <span class="token function">install</span></code></pre><p><br />通过 <code>mode</code> 参数指定 <code>cnpm</code> 方式安装依赖(前提是你全局安装了cnpm)<br /></p><pre class=" language-bash"><code class="language-bash">easy <span class="token function">install</span> --mode cnpm</code></pre><p><br /><strong>这里采用动态安装是因为如果把所有插件都内置, 会导致安装很多无用的 <code>npm</code> 模块, 安装缓慢, 更严重的是有些 <code>loader</code>, <code>plugin</code> 如果出现问题, 则导致整个 <code>easywebpack</code> 体系不能用.</strong><br /></p><h3 id="Egg-Vue-React-启动端口修改"><a href="#Egg-Vue-React-启动端口修改" class="headerlink" title="Egg + Vue/React 启动端口修改"></a>Egg + Vue/React 启动端口修改</h3><p><br /><strong>注意： 该问题已在最新版本 <a href="mailto:easywebpack@4.8.0">easywebpack@4.8.0</a>解决方案中已自动检测端口占用问题，无需配置。</strong><br /><br><br />Egg 应用本地开发时, npm run dev 默认启动打开浏览器的端口是 7001, 如果要修改自动打开的端口为6001, 可以在 <code>config/config.local.js</code> 中 添加 端口配置<br /></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ${app_root}/config/config.local.js</span>exports<span class="token punctuation">.</span>webpack <span class="token operator">=</span> <span class="token punctuation">{</span>  appPort<span class="token punctuation">:</span> <span class="token number">6001</span>  webpackConfigList<span class="token punctuation">:</span> EasyWebpack<span class="token punctuation">.</span><span class="token function">getWebpackConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><br /><code>egg-webpack</code> 启动打开浏览器的取端口逻辑: <code>this.config.webpack.appPort || process.env.PORT || 7001</code><br /></p><h3 id="多项目开发时-端口占用问题"><a href="#多项目开发时-端口占用问题" class="headerlink" title="多项目开发时, 端口占用问题"></a>多项目开发时, 端口占用问题</h3><p><br /><strong>注意： 该问题已在最新版本 <a href="mailto:easywebpack@4.8.0">easywebpack@4.8.0</a> 解决方案中已自动检测端口占用问题，无需配置。</strong><br /><br><br />在 Egg + Webpack 项目开发过程中, 会用到 7001, 9000, 9001 三个端口<br /></p><ul><li><p>7001 是 Egg 应用启动的默认端口</p></li><li><p>9000, 9001 是 Webpack 启动 Webpack dev server 的端口, 9000 为 构建前端渲染js, 9001 构建后端渲染逻辑.</p></li></ul><p><br />如果有两个项目同时开发, 第二个项目需要修改这三个端口, 假如 egg 应用: 5000,  Webpack 构建 9100 和 9101<br /></p><ul><li>修改 Egg 应用端口为 5000</li></ul><p><br />Egg 应用默认会读取  <code>process.env.PORT</code> 变量, 这里我们新起一个环境变量或者直接写 5000<br /></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ${app_root}/index.js</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'egg'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startCluster</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  baseDir<span class="token punctuation">:</span> __dirname<span class="token punctuation">,</span>  port<span class="token punctuation">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>EGG_PORT <span class="token operator">||</span> <span class="token number">5000</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>修改 Webpack dev server 端口</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ${app_root}/config/config.local.js</span>exports<span class="token punctuation">.</span>webpack <span class="token operator">=</span> <span class="token punctuation">{</span>  port<span class="token punctuation">:</span> <span class="token number">9100</span><span class="token punctuation">,</span>   proxy<span class="token punctuation">:</span> <span class="token punctuation">{</span>      host<span class="token punctuation">:</span> <span class="token string">'http://127.0.0.1:9100'</span>  <span class="token punctuation">}</span>  webpackConfigList<span class="token punctuation">:</span> EasyWebpack<span class="token punctuation">.</span><span class="token function">getWebpackConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><ul><li>为了让热更新生效,需要修改 <code>webpack.config.js</code> 的 port 配置</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ${app_root}/webpack.config.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  port<span class="token punctuation">:</span> <span class="token number">9100</span><span class="token punctuation">,</span>   <span class="token operator">...</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="骨架项目中前端使用-async-await-特性时-报错：regeneratorRuntime-is-not-defined。"><a href="#骨架项目中前端使用-async-await-特性时-报错：regeneratorRuntime-is-not-defined。" class="headerlink" title="骨架项目中前端使用 async/await 特性时, 报错：regeneratorRuntime is not defined。"></a>骨架项目中前端使用 <code>async/await</code> 特性时, 报错：regeneratorRuntime is not defined。</h3><p><br />目前骨架前端是没有用 <code>async/await</code>，所以没有内置。有需要的自己可以在 .bablerc 文件加 <code>transform-runtime</code>，同时安装对应依赖到 <code>devDependencies</code> 中即可。<br /></p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> babel-plugin-transform-runtime --save-dev</code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ${app_root}/.bablerc</span><span class="token punctuation">{</span>  <span class="token string">'plugins'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'transform-runtime'</span><span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h3 id="本地开发时-相同的图片名称存在覆盖问题"><a href="#本地开发时-相同的图片名称存在覆盖问题" class="headerlink" title="本地开发时, 相同的图片名称存在覆盖问题"></a>本地开发时, 相同的图片名称存在覆盖问题</h3><p><br />因本地开发时,图片没有hash,如果存在相同的图片名称, 就会存在覆盖问题。目前可以通过开启本地开发图片 hash 临时解决。<br /></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ${app_root}/webpack.config.js</span>module<span class="token punctuation">.</span>exports<span class="token operator">=</span> <span class="token punctuation">{</span>  imageHash<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="本地开发时-Chrome-偶尔出现-call-或-require-未定义等-JS-错误"><a href="#本地开发时-Chrome-偶尔出现-call-或-require-未定义等-JS-错误" class="headerlink" title="本地开发时, Chrome 偶尔出现 call 或 require 未定义等 JS 错误"></a>本地开发时, Chrome 偶尔出现 call 或 require 未定义等 JS 错误</h3><ul><li><p>开发期间禁用 Chrome Network控制面板网络缓存, Disable cache 勾选上</p></li><li><p>运行 npx easy clean all 或 easy clean all (cli)</p></li></ul><h3 id="windows-平台-node-sass-编译错误"><a href="#windows-平台-node-sass-编译错误" class="headerlink" title="windows 平台 node-sass 编译错误"></a>windows 平台 node-sass 编译错误</h3><pre class=" language-javascript"><code class="language-javascript">Error<span class="token punctuation">:</span> ENOENT<span class="token punctuation">:</span> no such file or directory<span class="token punctuation">,</span> scandir <span class="token string">'{PATH}\node-sass\vendor'</span>    at Error <span class="token punctuation">(</span>native<span class="token punctuation">)</span>    at Object<span class="token punctuation">.</span>fs<span class="token punctuation">.</span>readdirSync <span class="token punctuation">(</span>fs<span class="token punctuation">.</span>js<span class="token punctuation">:</span><span class="token number">856</span><span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">)</span>    at Object<span class="token punctuation">.</span>getInstalledBinaries <span class="token punctuation">(</span><span class="token punctuation">{</span>PATH<span class="token punctuation">}</span>\node_modules\<span class="token punctuation">.</span>npminstall\node<span class="token operator">-</span>sass\<span class="token number">3.7</span><span class="token punctuation">.</span><span class="token number">0</span>\node<span class="token operator">-</span>sass\lib\extensions<span class="token punctuation">.</span>js<span class="token punctuation">:</span><span class="token number">74</span><span class="token punctuation">:</span><span class="token number">13</span><span class="token punctuation">)</span>    at foundBinariesList <span class="token punctuation">(</span><span class="token punctuation">{</span>PATH<span class="token punctuation">}</span>\node_modules\<span class="token punctuation">.</span>npminstall\node<span class="token operator">-</span>sass\<span class="token number">3.7</span><span class="token punctuation">.</span><span class="token number">0</span>\node<span class="token operator">-</span>sass\lib\errors<span class="token punctuation">.</span>js<span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">:</span><span class="token number">15</span><span class="token punctuation">)</span>    at foundBinaries <span class="token punctuation">(</span><span class="token punctuation">{</span>PATH<span class="token punctuation">}</span>\node_modules\<span class="token punctuation">.</span>npminstall\node<span class="token operator">-</span>sass\<span class="token number">3.7</span><span class="token punctuation">.</span><span class="token number">0</span>\node<span class="token operator">-</span>sass\lib\errors<span class="token punctuation">.</span>js<span class="token punctuation">:</span><span class="token number">15</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">)</span>    at Object<span class="token punctuation">.</span>module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>missingBinary <span class="token punctuation">(</span><span class="token punctuation">{</span>PATH<span class="token punctuation">}</span>\node_modules\<span class="token punctuation">.</span>npminstall\node<span class="token operator">-</span>sass\<span class="token number">3.7</span><span class="token punctuation">.</span><span class="token number">0</span>\node<span class="token operator">-</span>sass\lib\errors<span class="token punctuation">.</span>js<span class="token punctuation">:</span><span class="token number">45</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">)</span>    at Object<span class="token punctuation">.</span><span class="token operator">&lt;</span>anonymous<span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>PATH<span class="token punctuation">}</span>\node_modules\<span class="token punctuation">.</span>npminstall\node<span class="token operator">-</span>sass\<span class="token number">3.7</span><span class="token punctuation">.</span><span class="token number">0</span>\node<span class="token operator">-</span>sass\lib\index<span class="token punctuation">.</span>js<span class="token punctuation">:</span><span class="token number">14</span><span class="token punctuation">:</span><span class="token number">28</span><span class="token punctuation">)</span>    at Module<span class="token punctuation">.</span>_compile <span class="token punctuation">(</span>module<span class="token punctuation">.</span>js<span class="token punctuation">:</span><span class="token number">413</span><span class="token punctuation">:</span><span class="token number">34</span><span class="token punctuation">)</span></code></pre><p><br />这时需要重新编译 node-sass:  <code>npm rebuild node-sass</code>  解决</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Babel-快速升级问题&quot;&gt;&lt;a href=&quot;#Babel-快速升级问题&quot; class=&quot;headerlink&quot; title=&quot;Babel 快速升级问题&quot;&gt;&lt;/a&gt;Babel 快速升级问题&lt;/h3&gt;&lt;p&gt;&lt;br /&gt;为了更方便升级 Babel7, 同时尽量减少配置
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>域名代理</title>
    <link href="https://easyjs.cn/easywebpack/proxy/"/>
    <id>https://easyjs.cn/easywebpack/proxy/</id>
    <published>2020-05-31T09:43:53.000Z</published>
    <updated>2020-05-31T09:43:53.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="本地开发域名代理"><a href="#本地开发域名代理" class="headerlink" title="本地开发域名代理"></a>本地开发域名代理</h2><h3 id="构建支持"><a href="#构建支持" class="headerlink" title="构建支持"></a>构建支持</h3><p><strong>前提：</strong></p><ul><li><p>代理域名能够映射到本机ip地址的功能需要你自己在电脑上面配置。如果是实际的存在的域名，理论上面就不需要自己配置域名映射。</p></li><li><p>该功能只在 Egg 应用构建本地开发使用。</p></li></ul><p>在 Egg SSR 应用开发时，Egg 应用的访问地址， 静态资源构建的地址， HMR 地址都是 ip, 不方便进行环境模拟测试，比如 cookie和登陆场景。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// webpack.config.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  host<span class="token punctuation">:</span> <span class="token string">'http://app.debug.com'</span> <span class="token comment" spellcheck="true">// 只在 env: dev 方式生效, 这里 host 改成你自己的实际有效的域名地址。</span><span class="token punctuation">}</span></code></pre><ul><li><p>应用访问的地址是： <a href="http://app.debug.com" target="_blank" rel="noopener">http://app.debug.com</a></p></li><li><p>HMR访问地址是：<a href="http://app.debug.com:9000/__webpack_hmr" target="_blank" rel="noopener">http://app.debug.com:9000/__webpack_hmr</a></p></li></ul><h2 id="nginx-和-dnsmasq-配合使用"><a href="#nginx-和-dnsmasq-配合使用" class="headerlink" title="nginx 和 dnsmasq 配合使用"></a>nginx 和 dnsmasq 配合使用</h2><p>在日常本地开发时,我们经常会遇到以下情况:</p><ul><li><p>在H5本地开发页面, 经常遇到白名单(APP里面, 外部平台)和cookie问题</p></li><li><p>同样的包线上环境有问题,本地OK, 需要模拟线上环境</p></li></ul><p>在这样的情况下,我们可以通过nginx和dnsmasq搭建本地搭建代理服务器, 把线上的域名请求映射到本机解决以上两个问题.</p><h4 id="nginx域名代理转发"><a href="#nginx域名代理转发" class="headerlink" title="nginx域名代理转发"></a>nginx域名代理转发</h4><pre><code>如果mac系统,默认时安装了nginx, 可以通过 http://127.0.0.1 检查 nginx是否正常, 如果正常会显示 Welcome to nginx 信息&lt;br /&gt;</code></pre><h4 id="通过brew安装nginx"><a href="#通过brew安装nginx" class="headerlink" title="通过brew安装nginx"></a>通过brew安装nginx</h4><ul><li>brew 搜索软件</li></ul><pre class=" language-bash"><code class="language-bash">brew search nginx</code></pre><ul><li>brew 安装软件</li></ul><pre class=" language-bash"><code class="language-bash">brew <span class="token function">install</span> nginx</code></pre><ul><li>brew 卸载软件<br /></li></ul><pre class=" language-bash"><code class="language-bash">brew uninstall nginx</code></pre><ul><li>brew 升级<br /></li></ul><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> brew update</code></pre><ul><li>查看安装信息(经常用到, 比如查看安装目录等)<br /></li></ul><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> brew info nginx</code></pre><ul><li>查看已经安装的软件<br /></li></ul><pre><code>brew list</code></pre><h4 id="nginx常用操作"><a href="#nginx常用操作" class="headerlink" title="nginx常用操作"></a>nginx常用操作</h4><ul><li>启动nginx服务<br /></li></ul><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> brew services start nginx</code></pre><ul><li>查看nginx版本<br /></li></ul><pre class=" language-bash"><code class="language-bash">nginx -v</code></pre><ul><li>关闭nginx服务<br /></li></ul><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> brew services stop nginx</code></pre><ul><li>重新加载nginx</li></ul><pre class=" language-bash"><code class="language-bash">nginx -s reload</code></pre><ul><li>停止nginx<br /></li></ul><pre class=" language-bash"><code class="language-bash">nginx -s stop</code></pre><h4 id="nginx域名代理转发-1"><a href="#nginx域名代理转发-1" class="headerlink" title="nginx域名代理转发"></a>nginx域名代理转发</h4><ul><li><p>进入nginx安装目录 <code>/usr/local/etc/nginx</code> , 我们看到servers目录下面有个 <code>default.conf</code>  配置80端口映射, 访问<a href="http://127.0.0.1时,会自动打开root对应目录的index.html文件" target="_blank" rel="noopener">http://127.0.0.1时,会自动打开root对应目录的index.html文件</a><br /></p></li><li><p>nginx启动时,会自动读取 <code>/usr/local/etc/nginx/server</code>  目录所有的server配置文件,文件名可以自由定义（<strong>在 nginx.conf 里面include servers/*</strong>）</p></li></ul><pre class=" language-makefile"><code class="language-makefile">server <span class="token punctuation">{</span>    listen 80 default_server<span class="token punctuation">;</span>    index index.html<span class="token punctuation">;</span>    root /usr/local/var/www<span class="token punctuation">;</span>    server_name 127.0.0.1<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li><p>自定义配置, <a href="http://xn--proxy-gv5ip85bm9bf5al43d.test.cn" target="_blank" rel="noopener">比如我想把</a> local.sky.com转发到本机的 <code>http://127.0.0.1:5000</code>  地址, 只需要在server目录下面增加文件5000.conf(文件名可自定义),然后增加一下配置:</p></li><li><pre><code>server {  listen 80;  server_name  local.sky.com local.sky.cn;  location / {    proxy_redirect off;    proxy_set_header Host $host;    proxy_set_header X-Real-IP $remote_addr;    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;    proxy_pass http://127.0.0.1:5000; } access_log /Users/caoli/dev/log/proxy.log;}</code></pre></li></ul><ul><li>打开 <strong>/private/etc/hosts</strong> 文件，添加如下内容：</li></ul><pre><code>127.0.0.1       localhost::1             localhost127.0.0.1       local.sky.com127.0.0.1       local.sky.cn</code></pre><p>最后通过 <code>nginx -s reload</code>  命令重启nginx, <a href="http://xn--proxy-ok2h341acho7q34btc6in64dgg3b5pqvioir2hwtwabnb.test.cn/" target="_blank" rel="noopener">然后在浏览器地址栏就可以通过</a> local.sky.com 访问 <a href="http://127.0.0.1:5000了">http://127.0.0.1:5000了</a>. 通过以上配置就可以解决电脑端域名映射和cookie等问题.  如果不配置 nginx，可以通过 <a href="http://proxy.test.cn:5000" target="_blank" rel="noopener">http://proxy.test.cn:5000</a> 访问， 配置 nginx 后，可以直接 local.sky.com  访问。</p><h3 id="nginx-https-配置"><a href="#nginx-https-配置" class="headerlink" title="nginx https 配置"></a>nginx https 配置</h3><ul><li>cd /usr/local/etc/nginx/</li><li>openssl genrsa -des3 -out server.key 1024     （输入密码 123456）</li><li>openssl req -new -key server.key -out server.csr     </li><li>填写证书注册信息<ul><li>Country Name(国家：中国填写CN) </li><li>State or Province Name(区域或是省份：GuangDong) </li><li>Locality Name(地区局部名字：GuangZhou) </li><li>Organization Name(机构名称：sky.com) </li><li>Organizational Unit Name(组织单位名称:部门名称) </li><li>Email Address(邮箱地址) </li><li>A challenge password(密码  123456 ) </li></ul></li><li>生成server.crt文件<ul><li>cp server.key server.key.org</li><li>openssl rsa -in server.key.org -out server.key</li><li>openssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt</li></ul></li><li>点击 /usr/local/etc/nginx/server.crt，注册系统证书目录</li><li>nginx 开启 ssl</li></ul><pre class=" language-bash"><code class="language-bash">server <span class="token punctuation">{</span>   listen 80<span class="token punctuation">;</span>   server_name  local.sky.com  local.sky.cn<span class="token punctuation">;</span>   location / <span class="token punctuation">{</span>      proxy_redirect off<span class="token punctuation">;</span>      proxy_set_header Host <span class="token variable">$host</span><span class="token punctuation">;</span>      proxy_set_header X-Real-IP <span class="token variable">$remote_addr</span><span class="token punctuation">;</span>      proxy_set_header X-Forwarded-For <span class="token variable">$proxy_add_x_forwarded_for</span><span class="token punctuation">;</span>      proxy_pass http://127.0.0.1:7001<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   access_log /usr/local/etc/nginx/logs/local-7001.log<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true"># HTTPS server</span>server <span class="token punctuation">{</span>   listen       443 ssl<span class="token punctuation">;</span>   server_name  local.sky.com  local.sky.cn<span class="token punctuation">;</span>   ssl_certificate      /usr/local/etc/nginx/server.crt<span class="token punctuation">;</span>   ssl_certificate_key  /usr/local/etc/nginx/server.key<span class="token punctuation">;</span>   ssl_session_cache    shared:SSL:1m<span class="token punctuation">;</span>   ssl_session_timeout  5m<span class="token punctuation">;</span>   ssl_ciphers  HIGH:<span class="token operator">!</span>aNULL:<span class="token operator">!</span>MD5<span class="token punctuation">;</span>   ssl_prefer_server_ciphers  on<span class="token punctuation">;</span>   location / <span class="token punctuation">{</span>      proxy_redirect off<span class="token punctuation">;</span>      proxy_set_header Host <span class="token variable">$host</span><span class="token punctuation">;</span>      proxy_set_header X-Real-IP <span class="token variable">$remote_addr</span><span class="token punctuation">;</span>      proxy_set_header X-Forwarded-For <span class="token variable">$proxy_add_x_forwarded_for</span><span class="token punctuation">;</span>      proxy_pass http://127.0.0.1:7001<span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>nginx -s reload</li></ul><h2 id="dnsmasq-搭建-DNS-服务"><a href="#dnsmasq-搭建-DNS-服务" class="headerlink" title="dnsmasq 搭建 DNS 服务"></a>dnsmasq 搭建 DNS 服务</h2><ul><li>安装dnsmasq</li></ul><pre class=" language-bash"><code class="language-bash">brew <span class="token function">install</span> dnsmasq</code></pre><ul><li>重启 dnsmasq</li></ul><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> brew services restart dnsmasq</code></pre><ul><li>dnsmasq的设置</li></ul><p><strong>拷贝并重命名/usr/local/opt/dnsmasq/dnsmasq.conf.example -&gt; /usr/local/etc/dnsmasq.conf。</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token function">cp</span> /usr/local/opt/dnsmasq/dnsmasq.conf.example /usr/local/etc/dnsmasq.conf</code></pre><ul><li>新建resolv.dnsmasq.conf文件用来指定域名解析服务器地址的<br /></li></ul><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> /usr/local/etcvim resolv.dnsmasq.conf</code></pre><ul><li>把常用的DNS服务器的地址保存到resolv.dnsmasq.conf<br /></li></ul><pre class=" language-bash"><code class="language-bash">nameserver 8.8.8.8nameserver 8.8.4.4</code></pre><p>修改 <code>/usr/local/etc/dnsmasq.conf</code> 的 <code>resolv-file</code> , <code>address</code> , <code>listen-address</code> , <code>strict-order</code> , <code>no-hosts</code>  配置项, 如果没有请添加, 如果是#注释,请取消注释</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#no-hosts</span>no-hosts<span class="token comment" spellcheck="true">#strict-order</span>strict-order<span class="token comment" spellcheck="true">#resolv-file</span>resolv-file<span class="token operator">=</span>/usr/local/etc/resolv.dnsmasq.conf<span class="token comment" spellcheck="true"># web-server</span>address<span class="token operator">=</span>/local.sky.com/192.168.1.1address<span class="token operator">=</span>/local.sky.cn/192.168.1.1<span class="token comment" spellcheck="true"># listen-address 192.168.1.1 为本机ip</span>listen-address<span class="token operator">=</span>127.0.0.1,192.168.1.1</code></pre><h4 id="DNS服务的启用"><a href="#DNS服务的启用" class="headerlink" title="DNS服务的启用"></a>DNS服务的启用</h4><h5 id="开机启动dns服务"><a href="#开机启动dns服务" class="headerlink" title="开机启动dns服务"></a>开机启动dns服务</h5><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">cp</span> -fv /usr/local/opt/dnsmasq/*.plist /Library/LaunchDaemons<span class="token function">sudo</span> lauchctl load /Library/LaunchDaemons/homebrew.mxcl.dnsmasq.plist<span class="token function">sudo</span> launchctl stop homebrew.mxcl.dnsmasq<span class="token function">sudo</span> launchctl start homebrew.mxcl.dnsmasq<span class="token function">sudo</span> <span class="token function">killall</span> -HUP mDNSResponder</code></pre><h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> brew services start dnsmasq</code></pre><h5 id="检查域名映射和DNS配置"><a href="#检查域名映射和DNS配置" class="headerlink" title="检查域名映射和DNS配置"></a>检查域名映射和DNS配置</h5><h5 id="启动本机服务127-0-0-1-5000服务后-检查host映射"><a href="#启动本机服务127-0-0-1-5000服务后-检查host映射" class="headerlink" title="启动本机服务127.0.0.1:5000服务后, 检查host映射"></a>启动本机服务127.0.0.1:5000服务后, 检查host映射</h5><pre class=" language-bash"><code class="language-bash">curl 127.0.0.1 -H <span class="token string">"Host:proxy.test.com"</span></code></pre><h5 id="检查域名映射是否解析到本机ip"><a href="#检查域名映射是否解析到本机ip" class="headerlink" title="检查域名映射是否解析到本机ip"></a>检查域名映射是否解析到本机ip</h5><pre class=" language-bash"><code class="language-bash"><span class="token function">dig</span> proxy.test.com @0.0.0.0</code></pre><h4 id="手机代理设置"><a href="#手机代理设置" class="headerlink" title="手机代理设置"></a>手机代理设置</h4><p>Android 手机使用DNS服务, 请安装Fast DNS Change APK, 把自己的本机IP添加到DNS列表中,如果需要用本机DNS,请双击会显示已Connnected到本机DNS, 再次点击Disconnnected<br /><a href="https://apkpure.com/cn/fast-dns-changer-no-root/com.mustafademir.fastdnschanger" target="_blank" rel="noopener">https://apkpure.com/cn/fast-dns-changer-no-root/com.mustafademir.fastdnschanger</a></p><p>iOS 手机使用DNS服务, 把自己本机的ip填写到 DNS列表中, DNS的地址之间要用逗号间隔一下.<br /><a href="http://jingyan.baidu.com/article/dca1fa6f44c664f1a5405244.html" target="_blank" rel="noopener">http://jingyan.baidu.com/article/dca1fa6f44c664f1a5405244.html</a></p><p>如果你愿意付费,可以安装个IOS APP: DNS Override，可以一键开启 dns 设置.</p><p>PC访问<br /><a href="http://jingyan.baidu.com/article/fc07f9891f626712ffe519cf.html" target="_blank" rel="noopener">http://jingyan.baidu.com/article/fc07f9891f626712ffe519cf.html</a></p><p>DNS配置以后, 就可以在手机上面通过域名(<a href="http://proxy.test.com:5000" target="_blank" rel="noopener">http://proxy.test.com:5000</a> 和 <a href="http://proxy.test1.com:5000" target="_blank" rel="noopener">http://proxy.test1.com:5000</a>) 访问, 然后映射到本机服务 <a href="http://127.0.0.1:5000" target="_blank" rel="noopener">http://127.0.0.1:5000</a>.</p><h3 id="接口代理"><a href="#接口代理" class="headerlink" title="接口代理"></a>接口代理</h3><p>easywebpack 4 版本支持了本地接口代理转发的功能, 主要解决本地开发跨域问题. 具体见：<a href="/easywebpack/ed847g">/easywebpack/ed847g</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;本地开发域名代理&quot;&gt;&lt;a href=&quot;#本地开发域名代理&quot; class=&quot;headerlink&quot; title=&quot;本地开发域名代理&quot;&gt;&lt;/a&gt;本地开发域名代理&lt;/h2&gt;&lt;h3 id=&quot;构建支持&quot;&gt;&lt;a href=&quot;#构建支持&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>React 工程方案</title>
    <link href="https://easyjs.cn/easywebpack/react_project/"/>
    <id>https://easyjs.cn/easywebpack/react_project/</id>
    <published>2020-05-31T09:43:53.000Z</published>
    <updated>2020-05-31T09:43:53.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装-easywebpack-cli-工具"><a href="#安装-easywebpack-cli-工具" class="headerlink" title="安装 easywebpack-cli 工具"></a>安装 easywebpack-cli 工具</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> easywebpack-cli -g</code></pre><h3 id="添加-app-root-babelrc-文件"><a href="#添加-app-root-babelrc-文件" class="headerlink" title="添加 ${app_root}/.babelrc 文件"></a>添加 <code>${app_root}/.babelrc</code> 文件</h3><p>具体根据实际情况添加相关 babel 插件配置，以下仅仅是举例. 详细配置见：<a href="/easywebpack/babel">/easywebpack/babel</a></p><ul><li>babel 7 配置</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>  <span class="token string">"presets"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token string">"@babel/preset-react"</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span>      <span class="token string">"@babel/preset-env"</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        <span class="token string">"modules"</span><span class="token punctuation">:</span> <span class="token boolean">false</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token string">"plugins"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token string">"@babel/plugin-syntax-dynamic-import"</span><span class="token punctuation">,</span>    <span class="token string">"@babel/plugin-proposal-object-rest-spread"</span><span class="token punctuation">,</span>   <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><ul><li>babel 6 配置</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>  <span class="token string">"presets"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'react'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"env"</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token string">"modules"</span><span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token string">"plugins"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token string">"transform-object-rest-spread"</span><span class="token punctuation">,</span>    <span class="token string">"syntax-dynamic-import"</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token string">"comments"</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span></code></pre><h3 id="添加-app-root-postcss-config-js-文件"><a href="#添加-app-root-postcss-config-js-文件" class="headerlink" title="添加 ${app_root}/postcss.config.js 文件"></a>添加 <code>${app_root}/postcss.config.js</code> 文件</h3><blockquote><p>具体根据实际情况添加 postcss 配置，以下仅仅是举例：</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token string">'use strict'</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'autoprefixer'</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="HTML-页面-HTMLWebpackPlugin-模板配置"><a href="#HTML-页面-HTMLWebpackPlugin-模板配置" class="headerlink" title="HTML 页面 HTMLWebpackPlugin 模板配置"></a>HTML 页面 HTMLWebpackPlugin 模板配置</h3><p>默认 template 路径文件为 <code>src/view/layout.html</code> 如果需要构建 HTML 文件，直接存在该文件即可，无需 Webpack 配置。</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content-type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html;charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>initial-scale<span class="token punctuation">=</span>1, maximum-scale<span class="token punctuation">=</span>1, user-scalable<span class="token punctuation">=</span>no, minimal-ui<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>shortcut icon<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/favicon.ico<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>image/x-icon<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="配置编写"><a href="#配置编写" class="headerlink" title="配置编写"></a>配置编写</h3><p><a href="https://github.com/easy-team/easywebpack-react" target="_blank" rel="noopener">easywebpack-react </a>项目构建解决方案，支持前端和SSR模式构建。默认 HtmlWebpackPlugin 的 template 路径为 <code>src/view/layout.html</code> 。<br /> </p><h4 id="Webpack-原生配置"><a href="#Webpack-原生配置" class="headerlink" title="Webpack 原生配置"></a>Webpack 原生配置</h4><ul><li>前端渲染模式构建</li></ul><blockquote><p>快速获取 react Webpack 构建配置</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> easywebpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'@easy-team/easywebpack-react'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> webpackConfig <span class="token operator">=</span> easywebpack<span class="token punctuation">.</span><span class="token function">getWebpackConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    target<span class="token punctuation">:</span> <span class="token string">'web'</span><span class="token punctuation">,</span>    entry<span class="token punctuation">:</span><span class="token punctuation">{</span>      app<span class="token punctuation">:</span> <span class="token string">'src/index.js'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>SSR 渲染模式构建</li></ul><blockquote><p>快速获取 React SSR 模式 Webpack 构建配置</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> easywebpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'@easy-team/easywebpack-react'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 返回的是两个 webpack 配置</span><span class="token keyword">const</span> webpackConfigList <span class="token operator">=</span> easywebpack<span class="token punctuation">.</span><span class="token function">getWebpackConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    entry<span class="token punctuation">:</span><span class="token punctuation">{</span>      index<span class="token punctuation">:</span> <span class="token string">'src/index.js'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="基于-easywebpack-react-编写-Webpack-配置"><a href="#基于-easywebpack-react-编写-Webpack-配置" class="headerlink" title="基于 easywebpack-react 编写 Webpack  配置"></a>基于 easywebpack-react 编写 Webpack  配置</h4><h5 id="配置编写-1"><a href="#配置编写-1" class="headerlink" title="配置编写"></a>配置编写</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// webpack.config.js</span><span class="token keyword">const</span> easywebpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'@easy-team/easywebpack-react'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">{</span> webpack<span class="token punctuation">,</span> merge <span class="token punctuation">}</span> <span class="token operator">=</span> easywebpack<span class="token punctuation">.</span>webpack<span class="token punctuation">;</span><span class="token keyword">const</span> env <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>BUILD_ENV<span class="token punctuation">;</span><span class="token keyword">const</span> baseWebpackConfig <span class="token operator">=</span> easywebpack<span class="token punctuation">.</span><span class="token function">getWebpackConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    env<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 根据环境变量生成对应配置，可以在 npm script 里面配置，支持 dev, test, prod 模式</span>    target <span class="token punctuation">:</span> <span class="token string">'web'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// target: web 表示只获取前端构建 Webpack 配置</span>    entry<span class="token punctuation">:</span><span class="token punctuation">{</span>      index<span class="token punctuation">:</span> <span class="token string">'src/index.js'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 拿到基础配置, 可以进行二次加工</span><span class="token keyword">const</span> webpackConfig <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span>baseWebpackConfig<span class="token punctuation">,</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 自定义配置</span><span class="token punctuation">}</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> webpackConfig<span class="token punctuation">;</span></code></pre><h5 id="本地开发"><a href="#本地开发" class="headerlink" title="本地开发"></a>本地开发</h5><ul><li>使用 webpack-dev-server ： <code>webpack-dev-server --hot</code></li><li>使用 easywepback-cli:   <code>easy dev --webpack</code> </li></ul><h4 id=""><a href="#" class="headerlink" title=""></a></h4><h5 id="打包编译"><a href="#打包编译" class="headerlink" title="打包编译"></a>打包编译</h5><ul><li>使用 webpack-cli ： <code>webpack --mode production --config webpack.config.js</code></li><li>使用 easywepback-cli:   <code>easy build --webpack</code> </li></ul><h4 id="基于-easywebpack-cli-构建模式"><a href="#基于-easywebpack-cli-构建模式" class="headerlink" title="基于 easywebpack-cli 构建模式"></a>基于 easywebpack-cli 构建模式</h4><h5 id="全局安装-easywebpack-cli-插件"><a href="#全局安装-easywebpack-cli-插件" class="headerlink" title="全局安装 easywebpack-cli 插件"></a>全局安装 <code>easywebpack-cli</code> 插件</h5><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i easywebpack-cli  -g</code></pre><p>安装成功以后, 就可以在命令行中使用 <code>easy</code> 或 <code>easywebpack</code> 命令, 比如 <code>easy build</code>, <code>easy server</code>, <code>easy print</code> 等</p><h5 id="添加-webpack-config-js-配置"><a href="#添加-webpack-config-js-配置" class="headerlink" title="添加 webpack.config.js 配置"></a>添加 <code>webpack.config.js</code> 配置</h5><p>在项目根目录添加 <code>webpack.config.js</code> 文件, 添加如下配置</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  target<span class="token punctuation">:</span><span class="token string">'web'</span><span class="token punctuation">,</span>   framework<span class="token punctuation">:</span> <span class="token string">'react'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 指定用 easywebpack-react 解决方案, 请在项目中安装该依赖</span>  entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>    index<span class="token punctuation">:</span> <span class="token string">'src/index.js'</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h5 id="编译文件"><a href="#编译文件" class="headerlink" title="编译文件"></a>编译文件</h5><pre class=" language-bash"><code class="language-bash">easy build deveasy build <span class="token function">test</span>easy build prod</code></pre><h5 id="直接运行"><a href="#直接运行" class="headerlink" title="直接运行"></a>直接运行</h5><pre class=" language-bash"><code class="language-bash">easy dev<span class="token comment" spellcheck="true"># 构建文件并启动本地静态 HTTP Server</span>easy build --server</code></pre><p>运行完成自动打开编译结果页面 :  <a href="http://127.0.0.1:8888/debug" target="_blank" rel="noopener">http://127.0.0.1:8888/debug</a></p><h3 id="前端项目初始化"><a href="#前端项目初始化" class="headerlink" title="前端项目初始化"></a>前端项目初始化</h3><ul><li>全局安装 <code>easywebpack-cli</code> 插件</li></ul><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i easywebpack-cli  -g</code></pre><ul><li>请通过 <code>easy init</code> 命令初始化骨架项目, 根据提示选择对应的项目类型即可.</li></ul><h3 id="AntD-按需加载"><a href="#AntD-按需加载" class="headerlink" title="AntD 按需加载"></a>AntD 按需加载</h3><h4 id="依赖配置"><a href="#依赖配置" class="headerlink" title="依赖配置"></a>依赖配置</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ${root}/package.json</span><span class="token punctuation">{</span> <span class="token string">"devDependencies"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>   <span class="token string">"babel-plugin-import"</span><span class="token punctuation">:</span> <span class="token string">"^1.0.0"</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> Button <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'antd'</span><span class="token punctuation">;</span></code></pre><h4 id="babelrc-配置"><a href="#babelrc-配置" class="headerlink" title=".babelrc 配置"></a>.babelrc 配置</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>    <span class="token string">"presets"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token string">"@babel/preset-react"</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span>      <span class="token string">"@babel/preset-env"</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        <span class="token string">"modules"</span><span class="token punctuation">:</span> <span class="token boolean">false</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token string">"plugins"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token string">"@babel/plugin-syntax-dynamic-import"</span><span class="token punctuation">,</span>    <span class="token string">"@babel/plugin-proposal-object-rest-spread"</span><span class="token punctuation">,</span>     <span class="token punctuation">[</span><span class="token string">"import"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        <span class="token string">"libraryName"</span><span class="token punctuation">:</span> <span class="token string">"antd"</span><span class="token punctuation">,</span>        <span class="token string">"libraryDirectory"</span><span class="token punctuation">:</span> <span class="token string">"lib"</span><span class="token punctuation">,</span>        <span class="token string">"style"</span><span class="token punctuation">:</span> <span class="token boolean">true</span>      <span class="token punctuation">}</span><span class="token punctuation">]</span>   <span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token string">"env"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"development"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token string">"plugins"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token string">"react-hot-loader/babel"</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre><ul><li><a href="https://ant.design/docs/react/customize-theme-cn" target="_blank" rel="noopener">https://ant.design/docs/react/customize-theme-cn</a></li><li><a href="https://ant.design/docs/react/getting-started-cn" target="_blank" rel="noopener">https://ant.design/docs/react/getting-started-cn</a></li></ul><h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><h3 id="AntD-主题定制"><a href="#AntD-主题定制" class="headerlink" title="AntD 主题定制"></a>AntD 主题定制</h3><ul><li>AntD 主题定制需要开启 webpack less 编译</li><li>Babel 和 Less 编译需要包含 node_modules 的 antd </li></ul><h4 id="less-构建支持"><a href="#less-构建支持" class="headerlink" title="less 构建支持"></a>less 构建支持</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ${root}/webpack.config.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  module<span class="token punctuation">:</span><span class="token punctuation">{</span>    rules<span class="token punctuation">:</span><span class="token punctuation">[</span>      <span class="token punctuation">{</span> less<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="依赖配置-1"><a href="#依赖配置-1" class="headerlink" title="依赖配置"></a>依赖配置</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ${root}/package.json</span><span class="token punctuation">{</span> <span class="token string">"devDependencies"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>   <span class="token string">"less"</span><span class="token punctuation">:</span> <span class="token string">"^2.7.2"</span><span class="token punctuation">,</span>   <span class="token string">"less-loader"</span><span class="token punctuation">:</span> <span class="token string">"^4.1.0"</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="构建配置"><a href="#构建配置" class="headerlink" title="构建配置"></a>构建配置</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//${root}/webpack.config.js</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> resolve <span class="token operator">=</span> <span class="token punctuation">(</span>filepath<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> filepath<span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  loaders<span class="token punctuation">:</span> <span class="token punctuation">{</span>    babel<span class="token punctuation">:</span> <span class="token punctuation">{</span>      include<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'app/web'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'node_modules'</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    less<span class="token punctuation">:</span> <span class="token punctuation">{</span>      include<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'app/web'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'node_modules'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      options<span class="token punctuation">:</span> <span class="token punctuation">{</span>        javascriptEnabled<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        modifyVars<span class="token punctuation">:</span> <span class="token punctuation">{</span>          <span class="token string">'primary-color'</span><span class="token punctuation">:</span> <span class="token string">'red'</span><span class="token punctuation">,</span>          <span class="token string">'link-color'</span><span class="token punctuation">:</span> <span class="token string">'#1DA57A'</span><span class="token punctuation">,</span>          <span class="token string">'border-radius-base'</span><span class="token punctuation">:</span> <span class="token string">'2px'</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="-2"><a href="#-2" class="headerlink" title=""></a></h3><h3 id="Sass-Less-Stylus-配置"><a href="#Sass-Less-Stylus-配置" class="headerlink" title="Sass/Less/Stylus 配置"></a>Sass/Less/Stylus 配置</h3><p><a href="/easywebpack/css">/easywebpack/css</a></p><h3 id="-3"><a href="#-3" class="headerlink" title=""></a></h3><h3 id="热更新实现"><a href="#热更新实现" class="headerlink" title="热更新实现"></a>热更新实现</h3><p><a href="/easywebpack/hot">/easywebpack/hot</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;安装-easywebpack-cli-工具&quot;&gt;&lt;a href=&quot;#安装-easywebpack-cli-工具&quot; class=&quot;headerlink&quot; title=&quot;安装 easywebpack-cli 工具&quot;&gt;&lt;/a&gt;安装 easywebpack-cli 工具&lt;/
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>发布更新</title>
    <link href="https://easyjs.cn/easywebpack/v4/"/>
    <id>https://easyjs.cn/easywebpack/v4/</id>
    <published>2020-05-31T09:43:53.000Z</published>
    <updated>2020-05-31T09:43:53.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="方案说明"><a href="#方案说明" class="headerlink" title="方案说明"></a>方案说明</h2><ul><li>Webpack4</li></ul><h2 id="插件版本"><a href="#插件版本" class="headerlink" title="插件版本"></a>插件版本</h2><ul><li><p>easywebpack: ^4.x.x           或  @easy-team/easywebpack: ^4.0.0</p></li><li><p>easywebpack-cli: ^4.x.x      或  @easy-team/easywebpack-cli: ^4.0.0</p></li><li><p>easywebpack-vue: ^4.x.x    或   @easy-team/easywebpack-cli: ^4.0.0</p></li><li><p>easywebpack-react: ^4.x.x  或   @easy-team/easywebpack-cli: ^4.0.0</p></li><li><p>easywebpack-html: ^4.x.x</p></li><li><p>easywebpack-js: ^4.x.x</p></li><li><p>egg-webpack: ^4.x.x</p></li><li><p>webpack-tool: ^4.x.x</p></li></ul><h2 id="发布历史"><a href="#发布历史" class="headerlink" title="发布历史"></a>发布历史</h2><p><br /><a href="https://github.com/hubcarl/easywebpack/blob/master/CHANGELOG.md" target="_blank" rel="noopener">https://github.com/hubcarl/easywebpack/blob/master/CHANGELOG.md</a><br /></p><h2 id="版本特性"><a href="#版本特性" class="headerlink" title="版本特性"></a>版本特性</h2><h2 id="2020-05"><a href="#2020-05" class="headerlink" title="2020-05"></a>2020-05</h2><h3 id="Feature"><a href="#Feature" class="headerlink" title="Feature"></a>Feature</h3><h4 id="easywebpack-cli-新增初始化模板"><a href="#easywebpack-cli-新增初始化模板" class="headerlink" title="easywebpack-cli 新增初始化模板"></a>easywebpack-cli 新增初始化模板</h4><ul><li>创建 React Component NPM 骨架</li><li>创建 React 独立公共包构建骨架</li><li>创建 Vue 独立公共包构建骨架</li><li>创建 TypeScript Lib 构建骨架</li></ul><h2 id="2019-11"><a href="#2019-11" class="headerlink" title="2019-11"></a>2019-11</h2><h3 id="Feature-1"><a href="#Feature-1" class="headerlink" title="Feature"></a>Feature</h3><h4 id="easywebpack-4-12-0-easy-team-easywebpack-4-2-0"><a href="#easywebpack-4-12-0-easy-team-easywebpack-4-2-0" class="headerlink" title="easywebpack@4.12.0 / @easy-team/easywebpack@4.2.0"></a><a href="mailto:easywebpack@4.12.0">easywebpack@4.12.0</a> / @easy-team/easywebpack@4.2.0</h4><ul><li>集成 vconsole-webpack-plugin 插件，默认禁用，通过 plugins: [ { vconsole: true }] 开启.</li></ul><h4 id="Document"><a href="#Document" class="headerlink" title="Document"></a>Document</h4><ul><li><a href="https://easyjs.cn/">https://easyjs.cn</a></li><li><a href="/"></a></li></ul><h2 id="2019-10"><a href="#2019-10" class="headerlink" title="2019-10"></a>2019-10</h2><h3 id="Feature-2"><a href="#Feature-2" class="headerlink" title="Feature"></a>Feature</h3><br /><ul><li>支持本地文件服务用于数据 mock 服务。 例如  <code>easy server -d mock</code>    mock 为目录, 默认为 <a href="http://localhost:8888。">http://localhost:8888。</a> 可以配合 devServer 的 proxy 使用的 pathRewrite 功能为项目提供数据服务。</li></ul><p><br /><img src="/medias/easyjs/easywebpack/easywebpack-v4-image-9244852.png" alt="image.png">   </p><pre class=" language-html"><code class="language-html">http://localhost:8888/api/v1/news/list或http://localhost:8888/api/v1/news/listhttp://localhost:8888/api/v1/user/info或http://localhost:8888/api/v1/user/info.json</code></pre><br /><pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>    index<span class="token punctuation">:</span> <span class="token string">'./src/app.js'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>    proxy<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token string">'/api/test'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        target<span class="token punctuation">:</span> <span class="token string">'http://localhost:8888'</span><span class="token punctuation">,</span>        pathRewrite<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">'/api/test'</span> <span class="token punctuation">:</span> <span class="token string">'/api'</span><span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><br /><ul><li>提供 easy-team 插件模式快速升级 Babel 方案（Babel6 -&gt; Babel7)， 后续所有骨架将改成此方案。</li></ul><p><br />为了更方便升级 Babel7,  同时尽量减少配置且无需安装 @babel 依赖，@easy-team 模式直接内置Babel 7 的相关依赖，只需要把 easywebpack 依赖模式改成 @easy-team/easywebpack 模式，如果代码中直接依赖了也请一并修改。更多详细信息见：<a href="https://www.yuque.com/easy-team/easywebpack/babel7" target="_blank" rel="noopener">https://www.yuque.com/easy-team/easywebpack/babel7</a> 。<br /></p><ul><li>@easy-team/easywebpack-cli: ^4.0.0 替换  easywebpack-cli</li><li>@easy-team/easywebpack-react: ^4.0.0 替换  easywebpack-react</li><li>@easy-team/easywebpack-vue: ^4.0.0 替换  easywebpack-vue</li></ul><ul><li>easy-team 模式使用 babel.config.js 替换 .babelrc 配置</li><li>easy-team 模式支持 Babel 7 同构应用根据不同平台编译成不同 ECMAScript 版本规范</li></ul><pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token string">"env"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"node"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token string">"presets"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">[</span>          <span class="token string">"@babel/preset-env"</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            <span class="token string">"modules"</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            <span class="token string">"targets"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>              <span class="token string">"node"</span><span class="token punctuation">:</span> <span class="token string">"current"</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token punctuation">]</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token string">"plugins"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token string">"@babel/plugin-syntax-dynamic-import"</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">"web"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token string">"presets"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">[</span>          <span class="token string">"@babel/preset-env"</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            <span class="token string">"modules"</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            <span class="token string">"targets"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>              <span class="token string">"browsers"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>                <span class="token string">"last 2 versions"</span><span class="token punctuation">,</span>                <span class="token string">"safari >= 8"</span>              <span class="token punctuation">]</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token punctuation">]</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token string">"plugins"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token string">"@babel/plugin-proposal-object-rest-spread"</span><span class="token punctuation">,</span>        <span class="token string">"@babel/plugin-syntax-dynamic-import"</span><span class="token punctuation">,</span>        <span class="token string">"@babel/plugin-transform-object-assign"</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><a name="2019-03"></a></p><h2 id="2019-09"><a href="#2019-09" class="headerlink" title="2019-09"></a>2019-09</h2><h3 id="Feature-3"><a href="#Feature-3" class="headerlink" title="Feature"></a>Feature</h3><ul><li>easywebpack-cli 支持 <code>easy server</code>  命令启动 HTTP Static Server 展示文件目录导航</li></ul><p><br /><img src="/medias/easyjs/easywebpack/easywebpack-v4-image-1049257.png" alt="image.png"><br /></p><h2 id="2019-07"><a href="#2019-07" class="headerlink" title="2019-07"></a>2019-07</h2><h3 id="Feature-4"><a href="#Feature-4" class="headerlink" title="Feature"></a>Feature</h3><ul><li>easywebpack 提供内置 babel 7 升级方案， 具体见 <a href="https://www.yuque.com/easy-team/easywebpack/babel7" target="_blank" rel="noopener">https://www.yuque.com/easy-team/easywebpack/babel7</a></li></ul><h2 id="2019-03"><a href="#2019-03" class="headerlink" title="2019-03"></a>2019-03</h2><h3 id="Feature-5"><a href="#Feature-5" class="headerlink" title="Feature"></a>Feature</h3><ul><li>easywebpack-vue 发布 4.5.0 版本 内置的 <a href="https://github.com/easy-team/easywebpack-vue/commit/43424038e76cb5f4306ed9b14bcaab70d0f095ed" target="_blank" rel="noopener">vue-loader@14 升级为 vue-loader@15</a>  </li></ul><p><a name="2018-11"></a></p><h2 id="2018-11"><a href="#2018-11" class="headerlink" title="2018-11"></a>2018-11</h2><p><a name="Feature-1"></a></p><h3 id="Feature-6"><a href="#Feature-6" class="headerlink" title="Feature"></a>Feature</h3><ul><li><p>easywebpack 4.11.0 <a href="https://github.com/easy-team/easywebpack-vue/pull/6" target="_blank" rel="noopener">修复 vue-loader 和 ts-loader 新版本问题 </a></p></li><li><p>easywebpack 4.11.0  <a href="">loaders.typescript 改成 loaders.ts</a></p></li></ul><p><br /><img src="/medias/easyjs/easywebpack/easywebpack-v4-42927.png" alt=""><br /></p><ul><li>easywebpack 4.11.0 新增 Webpack output.path 和 output.publicPath <a href="https://www.yuque.com/easy-team/easywebpack/base" target="_blank" rel="noopener">原生配置支持 </a></li></ul><p><br /><img src="/medias/easyjs/easywebpack/easywebpack-v4-5646645.png" alt=""><br /></p><ul><li>easywebpack 4.11.0 新增支持 <a href="https://www.yuque.com/easy-team/easywebpack/loader" target="_blank" rel="noopener">module.rules  内置和原生混合配置模式</a></li></ul><p><br /><img src="/medias/easyjs/easywebpack/easywebpack-v4-3446751.png" alt=""><br /></p><ul><li><p>easywebpack 4.10.0 新增 <code>filter: webpack-filter-warnings-plugin</code>  插件</p></li><li><p>easywebpack 4.10.0 支持公共 css 提取，具体见<a href="https://www.yuque.com/easy-team/easywebpack/common" target="_blank" rel="noopener">公共提取</a></p></li><li><p>easywebpack 4.10.0 支持 <a href="https://github.com/easy-team/webpack-tool" target="_blank" rel="noopener">config.devServer 配置，支持 historyApiFallback 和 proxy 配置</a></p></li><li><p>Vue TypeScript Node Isomorphic Framework <a href="https://github.com/easy-team/ves" target="_blank" rel="noopener">ves</a>,  <a href="https://github.com/easy-team/ves-cli" target="_blank" rel="noopener">ves-cli</a>,  <a href="https://github.com/easy-team/ves-admin" target="_blank" rel="noopener">ves-admin</a></p></li><li><p>babel 提供默认配置， 详见 <a href="https://www.yuque.com/easy-team/easywebpack/babel" target="_blank" rel="noopener">https://www.yuque.com/easy-team/easywebpack/babel</a></p></li><li><p>easywepback ^4.9.0 支持 SSR babel 按需配置，提高构建速度，详见 <a href="https://www.yuque.com/easy-team/egg-vue/babel" target="_blank" rel="noopener">Egg + Vue </a>和<a href="https://www.yuque.com/easy-team/egg-react/babel" target="_blank" rel="noopener"> Egg + React</a></p></li><li><p>easywepback ^4.9.0 提供 customize 方法 对生成的 webpack 直接进行加工处理</p></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//${root}/webpack.config.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token operator">...</span>  <span class="token function">customize</span><span class="token punctuation">(</span>webpackConfig<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 此外 webpackConfig 为原生生成的 webpack config</span>   <span class="token keyword">return</span> webpackConfig<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>easywepback ^4.9.0 默认开启 babel 和 ts 的 <code>thread-loader</code>  和 <code>cache-loader</code> , 加快构建速度；如果出现问题，请通过如下方式开启和禁用</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//${root}/webpack.config.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span> compile<span class="token punctuation">:</span> <span class="token punctuation">{</span>   thread<span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>   cache<span class="token punctuation">:</span><span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>easywepback ^4.9.0 开始默认禁用 <code>eslint-loader</code> , 加快构建速度, 可以通过如下方式开启和禁用</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//${root}/webpack.config.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span> loaders<span class="token punctuation">;</span><span class="token punctuation">{</span>   eslint<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>easywebpack-react ^4.4.0 支持 AntD Theme 主题配置</li></ul><p><br /><a href="https://github.com/easy-team/egg-react-webpack-boilerplate/issues/11" target="_blank" rel="noopener">https://github.com/easy-team/egg-react-webpack-boilerplate/issues/11</a><br /><a href="https://github.com/easy-team/egg-react-webpack-boilerplate/tree/antd-theme" target="_blank" rel="noopener">https://github.com/easy-team/egg-react-webpack-boilerplate/tree/antd-theme</a><br /></p><ul><li>easywebpack-cli  ^4.3.0 支持扩展新的 cli (例如：<a href="https://github.com/easy-team/ves-cli" target="_blank" rel="noopener">ves-cli</a>)</li></ul><p><a name="2018-10"></a></p><h2 id="2018-10"><a href="#2018-10" class="headerlink" title="2018-10"></a>2018-10</h2><ul><li><p>*<em>配置增加  支持 <code>plugins:[] 和 {}</code>  混合模式配置 *</em>（easywebpack@4.8.5)</p></li><li><p>*<em>配置增强  集成 <code>copy-webpack-plugin</code>   插件,  通过 <code>plugins.copy</code>  配置 *</em>（easywebpack@4.8.5)</p></li><li><p><strong>配置简化</strong> egg 项目 <code>egg</code>  无需配置，解决方案支持自动检测功能（<a href="mailto:easywebpack@4.8.0">easywebpack@4.8.0</a>)</p></li><li><p><strong>配置简化</strong> egg 项目 <code>framework</code>  无需配置，解决方案支持自动检测功能（<a href="mailto:easywebpack@4.8.0">easywebpack@4.8.0</a>)</p></li><li><p><strong>配置简化</strong> entry 提供默认值配置， 为 <code>{ index: src/app.js }</code>  （<a href="mailto:easywebpack@4.8.0">easywebpack@4.8.0</a>)</p></li><li><p><strong>配置增强</strong> entry 支持 <a href="https://www.yuque.com/easy-team/easywebpack/entry" target="_blank" rel="noopener">node-glob 模式配置</a> （<a href="mailto:easywebpack@4.8.0">easywebpack@4.8.0</a>)</p></li><li><p><strong>配置简化</strong> entry 支持<a href="https://www.yuque.com/easy-team/easywebpack/entry" target="_blank" rel="noopener"> template loader 配置</a> （<a href="mailto:easywebpack@4.8.0">easywebpack@4.8.0</a>)</p></li><li><p><strong>配置简化</strong> <code>webpack.config.js</code>  devtool 配置只在本地 dev 模式有效,  默认为 eval。可以通过 <code>easy build --devtool</code>  强制指定 devtool （<a href="mailto:easywebpack-cli@4.0.0">easywebpack-cli@4.0.0</a>)</p></li><li><p><strong>配置简化</strong> postcss.conf.js 提供默认配置 （<a href="mailto:easywebpack@4.8.0">easywebpack@4.8.0</a>)</p></li><li><p><strong>配置简化</strong> easy build 默认 <code>prod</code>  发布模式（<a href="mailto:easywebpack-cli@4.0.0">easywebpack-cli@4.0.0</a>)</p></li><li><p>*<em>配置简化 *</em>babel 相关的 devDependencies 依赖 解决方案已内置，无需项目显示配置依赖 （<a href="mailto:easywebpack@4.8.0">easywebpack@4.8.0</a>)</p></li><li><p><strong>开发增强 **自动解决本地开发时端口占用问题，支持多项目自动获取新的端口号</strong> **（<a href="mailto:easywebpack-cli@4.0.0">easywebpack-cli@4.0.0</a> 和 <a href="mailto:easywebpack@4.8.0">easywebpack@4.8.0</a>）</p></li></ul><pre class=" language-bash"><code class="language-bash">easy build</code></pre><ul><li><strong>开发增强</strong>：提供本地文件 HTTP Web Server 能力 （<a href="mailto:easywebpack-cli@4.0.0">easywebpack-cli@4.0.0</a>)</li></ul><pre class=" language-bash"><code class="language-bash">easy server</code></pre><br /><ul><li><strong>构建增强</strong>：提供构建本地文件预览能力 （<a href="mailto:easywebpack-cli@4.0.0">easywebpack-cli@4.0.0</a>)</li></ul><pre class=" language-bash"><code class="language-bash">easy build --server</code></pre><br /><ul><li><strong>构建增强</strong>：<a href="https://www.yuque.com/easy-team/easywebpack/ayrtv3" target="_blank" rel="noopener">支持原生 Webpack 构建</a> （<a href="mailto:easywebpack-cli@4.0.0">easywebpack-cli@4.0.0</a>)</li></ul><pre class=" language-bash"><code class="language-bash">easy build --webpack</code></pre><ul><li>构建增强：构建速度定位 （<a href="mailto:easywebpack-cli@4.0.0">easywebpack-cli@4.0.0</a>)</li></ul><pre class=" language-bash"><code class="language-bash">easy build --speed</code></pre><ul><li><strong>配置简化</strong> CSS Module 配置简化 （<a href="mailto:easywebpack@4.0.0">easywebpack@4.0.0</a>)</li></ul><p><br /><a href="https://www.yuque.com/easy-team/easywebpack/cssmodule" target="_blank" rel="noopener">https://www.yuque.com/easy-team/easywebpack/cssmodule</a><br /></p><ul><li>*<em>构建增强 *</em>Egg SSR Babel 构建优化 （<a href="mailto:easywebpack@4.0.0">easywebpack@4.0.0</a>)</li></ul><p><br /><a href="https://www.yuque.com/east-team/ves/babel" target="_blank" rel="noopener">https://www.yuque.com/easy-team/ves/babel</a><br /></p><ul><li><strong>配置简化</strong> easywebpack3 默认开启  <code>sass-loader</code>,  easywebpack4 默认禁用  <code>sass-loader</code>, 如果要开启：</li></ul><pre class=" language-json"><code class="language-json">loaders<span class="token operator">:</span><span class="token punctuation">{</span>  sass<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span></code></pre><ul><li><strong>配置简化</strong> <code>webpack.config.js</code>  easywebpack4  plugins 节点配置简化,  无需 <code>args</code>  节点</li></ul><p><br /><a href="https://www.yuque.com/easy-team/easywebpack/plugin" target="_blank" rel="noopener">https://www.yuque.com/easy-team/easywebpack/plugin</a><br /><img src="/medias/easyjs/easywebpack/easywebpack-v4-4039527.png" alt=""><br /><br><br /></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;方案说明&quot;&gt;&lt;a href=&quot;#方案说明&quot; class=&quot;headerlink&quot; title=&quot;方案说明&quot;&gt;&lt;/a&gt;方案说明&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Webpack4&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;插件版本&quot;&gt;&lt;a href=&quot;#插件版本&quot; class=
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Vue 工程方案</title>
    <link href="https://easyjs.cn/easywebpack/vue_project/"/>
    <id>https://easyjs.cn/easywebpack/vue_project/</id>
    <published>2020-05-31T09:43:53.000Z</published>
    <updated>2020-05-31T09:43:53.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装-easywebpack-cli-工具"><a href="#安装-easywebpack-cli-工具" class="headerlink" title="安装 easywebpack-cli 工具"></a>安装 easywebpack-cli 工具</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> easywebpack-cli -g</code></pre><h3 id="添加-app-root-babelrc-文件"><a href="#添加-app-root-babelrc-文件" class="headerlink" title="添加 ${app_root}/.babelrc 文件"></a>添加 <code>${app_root}/.babelrc</code> 文件</h3><blockquote><p>具体根据实际情况添加相关 babel 插件配置，以下仅仅是举例. 详细配置见：<a href="/easywebpack/babel">/easywebpack/babel</a></p></blockquote><ul><li>babel 7 配置</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>  <span class="token string">"presets"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">[</span>      <span class="token string">"@babel/preset-env"</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        <span class="token string">"modules"</span><span class="token punctuation">:</span> <span class="token boolean">false</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token string">"plugins"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token string">"@babel/plugin-syntax-dynamic-import"</span><span class="token punctuation">,</span>    <span class="token string">"@babel/plugin-proposal-object-rest-spread"</span><span class="token punctuation">,</span>   <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><ul><li>babel 6 配置</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>  <span class="token string">"presets"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"env"</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token string">"modules"</span><span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token string">"plugins"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token string">"transform-object-rest-spread"</span><span class="token punctuation">,</span>    <span class="token string">"syntax-dynamic-import"</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token string">"comments"</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span></code></pre><h3 id="添加-app-root-postcss-config-js-文件"><a href="#添加-app-root-postcss-config-js-文件" class="headerlink" title="添加 ${app_root}/postcss.config.js 文件"></a>添加 <code>${app_root}/postcss.config.js</code> 文件</h3><blockquote><p>具体根据实际情况添加 postcss 配置，以下仅仅是举例：</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token string">'use strict'</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'autoprefixer'</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="HTML-页面-HTMLWebpackPlugin-模板配置"><a href="#HTML-页面-HTMLWebpackPlugin-模板配置" class="headerlink" title="HTML 页面 HTMLWebpackPlugin 模板配置"></a>HTML 页面 HTMLWebpackPlugin 模板配置</h3><p>默认 template 路径文件为 <code>src/view/layout.html</code> 如果需要构建 HTML 文件，直接存在该文件即可，无需 Webpack 配置。</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content-type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html;charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>initial-scale<span class="token punctuation">=</span>1, maximum-scale<span class="token punctuation">=</span>1, user-scalable<span class="token punctuation">=</span>no, minimal-ui<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>shortcut icon<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/favicon.ico<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>image/x-icon<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="配置编写"><a href="#配置编写" class="headerlink" title="配置编写"></a>配置编写</h3><p><a href="https://github.com/easy-team/easywebpack-vue" target="_blank" rel="noopener">easywebpack-vue </a>项目构建解决方案，支持前端和SSR模式构建。默认 HtmlWebpackPlugin 的 template 路径为 <code>src/view/layout.html</code> 。<br /> </p><h4 id="Webpack-原生配置"><a href="#Webpack-原生配置" class="headerlink" title="Webpack 原生配置"></a>Webpack 原生配置</h4><ul><li>前端渲染模式构建<br /></li></ul><blockquote><p>快速获取 Vue Webpack 构建配置</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> easywebpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'easywebpack-vue'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> webpackConfig <span class="token operator">=</span> easywebpack<span class="token punctuation">.</span><span class="token function">getWebpackConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    target<span class="token punctuation">:</span> <span class="token string">'web'</span><span class="token punctuation">,</span>    entry<span class="token punctuation">:</span><span class="token punctuation">{</span>      app<span class="token punctuation">:</span> <span class="token string">'src/index.js'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>SSR 渲染模式构建<br /></li></ul><blockquote><p>快速获取 Vue SSR 模式 Webpack 构建配置</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> easywebpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'easywebpack-vue'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 返回的是两个 webpack 配置</span><span class="token keyword">const</span> webpackConfigList <span class="token operator">=</span> easywebpack<span class="token punctuation">.</span><span class="token function">getWebpackConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    entry<span class="token punctuation">:</span><span class="token punctuation">{</span>      index<span class="token punctuation">:</span> <span class="token string">'src/index.js'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="基于-easywebpack-vue-编写-Webpack-配置"><a href="#基于-easywebpack-vue-编写-Webpack-配置" class="headerlink" title="基于 easywebpack-vue 编写 Webpack  配置"></a>基于 easywebpack-vue 编写 Webpack  配置</h4><h5 id="配置编写-1"><a href="#配置编写-1" class="headerlink" title="配置编写"></a>配置编写</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// webpack.config.js</span><span class="token keyword">const</span> easywebpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'easywebpack-vue'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">{</span> webpack<span class="token punctuation">,</span> merge <span class="token punctuation">}</span> <span class="token operator">=</span> easywebpack<span class="token punctuation">.</span>webpack<span class="token punctuation">;</span><span class="token keyword">const</span> env <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>BUILD_ENV<span class="token punctuation">;</span><span class="token keyword">const</span> baseWebpackConfig <span class="token operator">=</span> easywebpack<span class="token punctuation">.</span><span class="token function">getWebpackConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    env<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 根据环境变量生成对应配置，可以在 npm script 里面配置，支持 dev, test, prod 模式</span>    target <span class="token punctuation">:</span> <span class="token string">'web'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// target: web 表示只获取前端构建 Webpack 配置</span>    entry<span class="token punctuation">:</span><span class="token punctuation">{</span>      index<span class="token punctuation">:</span> <span class="token string">'src/index.js'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 拿到基础配置, 可以进行二次加工</span><span class="token keyword">const</span> webpackConfig <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span>baseWebpackConfig<span class="token punctuation">,</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 自定义配置</span><span class="token punctuation">}</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> webpackConfig<span class="token punctuation">;</span></code></pre><h5 id="本地开发"><a href="#本地开发" class="headerlink" title="本地开发"></a>本地开发</h5><ul><li>使用 webpack-dev-server ： <code>webpack-dev-server --hot</code></li><li>使用 easywepback-cli:   <code>easy dev --webpack</code> </li></ul><h4 id=""><a href="#" class="headerlink" title=""></a></h4><h5 id="打包编译"><a href="#打包编译" class="headerlink" title="打包编译"></a>打包编译</h5><ul><li>使用 webpack-cli ： <code>webpack --mode production --config webpack.config.js</code></li><li>使用 easywepback-cli:   <code>easy build --webpack</code> </li></ul><h4 id="基于-easywebpack-cli-构建模式"><a href="#基于-easywebpack-cli-构建模式" class="headerlink" title="基于 easywebpack-cli 构建模式"></a>基于 easywebpack-cli 构建模式</h4><h5 id="全局安装-easywebpack-cli-插件"><a href="#全局安装-easywebpack-cli-插件" class="headerlink" title="全局安装 easywebpack-cli 插件"></a>全局安装 <code>easywebpack-cli</code> 插件</h5><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i easywebpack-cli  -g</code></pre><p>安装成功以后, 就可以在命令行中使用 <code>easy</code> 或 <code>easywebpack</code> 命令, 比如 <code>easy build</code>, <code>easy server</code>, <code>easy print</code> 等</p><h5 id="添加-webpack-config-js-配置"><a href="#添加-webpack-config-js-配置" class="headerlink" title="添加 webpack.config.js 配置"></a>添加 <code>webpack.config.js</code> 配置</h5><p>在项目根目录添加 <code>webpack.config.js</code> 文件, 添加如下配置</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  target<span class="token punctuation">:</span><span class="token string">'web'</span><span class="token punctuation">,</span>   framework<span class="token punctuation">:</span> <span class="token string">'vue'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 指定用 easywebpack-vue 解决方案, 请在项目中安装该依赖</span>  entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>    index<span class="token punctuation">:</span> <span class="token string">'src/index.js'</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h5 id="编译文件"><a href="#编译文件" class="headerlink" title="编译文件"></a>编译文件</h5><pre class=" language-bash"><code class="language-bash">easy build deveasy build <span class="token function">test</span>easy build prod</code></pre><h5 id="直接运行"><a href="#直接运行" class="headerlink" title="直接运行"></a>直接运行</h5><pre class=" language-bash"><code class="language-bash">easy dev<span class="token comment" spellcheck="true"># 构建文件并启动本地静态 HTTP Server</span>easy build --server</code></pre><p>运行完成自动打开编译结果页面 :  <a href="http://127.0.0.1:8888/debug" target="_blank" rel="noopener">http://127.0.0.1:8888/debug</a></p><h3 id="前端项目初始化"><a href="#前端项目初始化" class="headerlink" title="前端项目初始化"></a>前端项目初始化</h3><ul><li>全局安装 <code>easywebpack-cli</code> 插件<br /></li></ul><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i easywebpack-cli  -g</code></pre><ul><li>请通过 <code>easy init</code> 命令初始化骨架项目, 根据提示选择对应的项目类型即可.<br /></li></ul><h3 id="Sass-Less-Stylus-配置"><a href="#Sass-Less-Stylus-配置" class="headerlink" title="Sass/Less/Stylus 配置"></a>Sass/Less/Stylus 配置</h3><p><a href="/easywebpack/css">/easywebpack/css</a></p><h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><h3 id="热更新实现"><a href="#热更新实现" class="headerlink" title="热更新实现"></a>热更新实现</h3><p><a href="/easywebpack/hot">/easywebpack/hot</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;安装-easywebpack-cli-工具&quot;&gt;&lt;a href=&quot;#安装-easywebpack-cli-工具&quot; class=&quot;headerlink&quot; title=&quot;安装 easywebpack-cli 工具&quot;&gt;&lt;/a&gt;安装 easywebpack-cli 工具&lt;/
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>AntD 配置</title>
    <link href="https://easyjs.cn/egg-react/antd/"/>
    <id>https://easyjs.cn/egg-react/antd/</id>
    <published>2020-05-31T09:43:53.000Z</published>
    <updated>2020-05-31T09:43:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>项目示例： <a href="https://github.com/easy-team/egg-react-webpack-boilerplate/tree/antd-theme" target="_blank" rel="noopener">https://github.com/easy-team/egg-react-webpack-boilerplate/tree/antd-theme</a></p><h2 id="按需加载"><a href="#按需加载" class="headerlink" title="按需加载"></a>按需加载</h2><h4 id="依赖配置"><a href="#依赖配置" class="headerlink" title="依赖配置"></a>依赖配置</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ${root}/package.json</span><span class="token punctuation">{</span> <span class="token string">"devDependencies"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>   <span class="token string">"babel-plugin-import"</span><span class="token punctuation">:</span> <span class="token string">"^1.0.0"</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> Button <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'antd'</span><span class="token punctuation">;</span></code></pre><p>官方文档： <a href="https://ant.design/docs/react/getting-started-cn" target="_blank" rel="noopener">https://ant.design/docs/react/getting-started-cn</a></p><h2 id="主题定制"><a href="#主题定制" class="headerlink" title="主题定制"></a>主题定制</h2><blockquote><p>主题定制需要开启 webpack less 编译 </p></blockquote><h4 id="依赖配置-1"><a href="#依赖配置-1" class="headerlink" title="依赖配置"></a>依赖配置</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ${root}/package.json</span><span class="token punctuation">{</span> <span class="token string">"devDependencies"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>   <span class="token string">"less"</span><span class="token punctuation">:</span> <span class="token string">"^2.7.2"</span><span class="token punctuation">,</span>   <span class="token string">"less-loader"</span><span class="token punctuation">:</span> <span class="token string">"^4.1.0"</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="构建配置"><a href="#构建配置" class="headerlink" title="构建配置"></a>构建配置</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//${root}/webpack.config.js</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> resolve <span class="token operator">=</span> <span class="token punctuation">(</span>filepath<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> filepath<span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  loaders<span class="token punctuation">:</span> <span class="token punctuation">{</span>    babel<span class="token punctuation">:</span> <span class="token punctuation">{</span>      include<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'app/web'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'node_modules'</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    less<span class="token punctuation">:</span> <span class="token punctuation">{</span>      include<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'app/web'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'node_modules'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      options<span class="token punctuation">:</span> <span class="token punctuation">{</span>        javascriptEnabled<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        modifyVars<span class="token punctuation">:</span> <span class="token punctuation">{</span>          <span class="token string">'primary-color'</span><span class="token punctuation">:</span> <span class="token string">'red'</span><span class="token punctuation">,</span>          <span class="token string">'link-color'</span><span class="token punctuation">:</span> <span class="token string">'#1DA57A'</span><span class="token punctuation">,</span>          <span class="token string">'border-radius-base'</span><span class="token punctuation">:</span> <span class="token string">'2px'</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h4 id="babelrc-配置"><a href="#babelrc-配置" class="headerlink" title=".babelrc 配置"></a>.babelrc 配置</h4><blockquote><p>如果是 SSR 模式，需要按如下 env 配置；前端渲染模式可以不用 env 方式。 BABEL_ENV 使用，请参考 <a href="/egg-react/babel">/egg-react/babel</a></p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>  <span class="token string">"env"</span><span class="token punctuation">:</span><span class="token punctuation">{</span>    <span class="token string">"node"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token string">"presets"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token string">"react"</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">"env"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>          <span class="token string">"modules"</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>          <span class="token string">"targets"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token string">"node"</span><span class="token punctuation">:</span> <span class="token string">"current"</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">]</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token string">"plugins"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token string">"syntax-dynamic-import"</span><span class="token punctuation">,</span>        <span class="token string">"transform-object-rest-spread"</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">"web"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token string">"presets"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token string">"react"</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">"env"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>          <span class="token string">"modules"</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>          <span class="token string">"targets"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token string">"browsers"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"last 2 versions"</span><span class="token punctuation">,</span> <span class="token string">"safari >= 7"</span><span class="token punctuation">]</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">]</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token string">"plugins"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token string">"react-hot-loader/babel"</span><span class="token punctuation">,</span>        <span class="token string">"transform-object-assign"</span><span class="token punctuation">,</span>        <span class="token string">"syntax-dynamic-import"</span><span class="token punctuation">,</span>        <span class="token string">"transform-object-rest-spread"</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">"import"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>          <span class="token string">"libraryName"</span><span class="token punctuation">:</span> <span class="token string">"antd"</span><span class="token punctuation">,</span>          <span class="token string">"libraryDirectory"</span><span class="token punctuation">:</span> <span class="token string">"lib"</span><span class="token punctuation">,</span>          <span class="token string">"style"</span><span class="token punctuation">:</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span><span class="token punctuation">]</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token string">"comments"</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span></code></pre><p>官方文档：<a href="https://ant.design/docs/react/customize-theme-cn" target="_blank" rel="noopener">https://ant.design/docs/react/customize-theme-cn</a></p>]]></content>
    
    <summary type="html">
    
      Egg React Server Side Render, Egg React SSR, Egg AntD SSR, Egg React 服务端渲染
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Weex 工程方案</title>
    <link href="https://easyjs.cn/easywebpack/weex_project/"/>
    <id>https://easyjs.cn/easywebpack/weex_project/</id>
    <published>2020-05-31T09:43:53.000Z</published>
    <updated>2020-05-31T09:43:53.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/easy-team/easywebpack-weex" target="_blank" rel="noopener">easywebpack-weex</a> 基于 easywebpack 的 Weex Native 和 Weex Web 打包构建解决方案.</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre class=" language-bash"><code class="language-bash">$ <span class="token function">npm</span> i easywebpack-weex --save-dev</code></pre><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> weex <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'easywebpack-weex'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取 webpack weex 配置</span><span class="token keyword">const</span> webpackConfig <span class="token operator">=</span> weex<span class="token punctuation">.</span><span class="token function">getWeexWebpackConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  env<span class="token punctuation">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>BUILD_ENV<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 支持 dev，test，local 模式</span>  entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>    index<span class="token punctuation">:</span> <span class="token string">'src/app.js'</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取 webpack web 配置</span><span class="token keyword">const</span> webpackConfig <span class="token operator">=</span> weex<span class="token punctuation">.</span><span class="token function">getWebWebpackConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>    index<span class="token punctuation">:</span> <span class="token string">'src/app.js'</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//  获取 webpack weex 和 web 配置</span><span class="token keyword">const</span> webpackConfig <span class="token operator">=</span> weex<span class="token punctuation">.</span><span class="token function">getWebpackConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>    index<span class="token punctuation">:</span> <span class="token string">'src/app.js'</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="开发构建"><a href="#开发构建" class="headerlink" title="开发构建"></a>开发构建</h2><ul><li>使用 webpack-cli 开发构建服务<br /></li></ul><pre class=" language-bash"><code class="language-bash">webpack --config webpack.config.js</code></pre><ul><li>使用 easywebpack 内置开发构建服务<br /></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> weex <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'easywebpack-weex'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">===</span> <span class="token string">'development'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// development mode: webpack building and start webpack hot server</span>  weex<span class="token punctuation">.</span><span class="token function">server</span><span class="token punctuation">(</span>webpackConfig<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// build file to disk</span>  weex<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>webpackConfig<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="工程骨架"><a href="#工程骨架" class="headerlink" title="工程骨架"></a>工程骨架</h2><p><a href="https://github.com/easy-team/easywebpack-weex-boilerplate" target="_blank" rel="noopener">easywebpack-weex-boilerplate</a> 项目骨架</p><p><img src="https://cdn.nlark.com/yuque/0/2018/png/116733/1544507323476-3af27d63-a981-4ba5-bbec-eb5711a7a51e.png#align=left&display=inline&height=490&originHeight=567&originWidth=957&search=&status=done&width=827" alt=""></p><p><img src="https://cdn.nlark.com/yuque/0/2018/png/116733/1544507330217-766950e6-7b84-4d6e-ac46-7282f29886cb.png#align=left&display=inline&height=629&originHeight=713&originWidth=937&search=&status=done&width=827" alt=""></p><h2 id="License"><a href="#License" class="headerlink" title="License"></a>License</h2><p><a href="/frontend/weex/LICENSE">MIT</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://github.com/easy-team/easywebpack-weex&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;easywebpack-weex&lt;/a&gt; 基于 easywebpack 的 Weex Native 
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>常见问题</title>
    <link href="https://easyjs.cn/egg-react/about/"/>
    <id>https://easyjs.cn/egg-react/about/</id>
    <published>2020-05-31T09:43:53.000Z</published>
    <updated>2020-05-31T09:43:53.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常见问题汇总"><a href="#常见问题汇总" class="headerlink" title="常见问题汇总"></a>常见问题汇总</h2><ul><li><a href="/egg-react/antd">AntD 按需加载与主题定制 </a>以及 <a href="https://github.com/easy-team/egg-react-webpack-boilerplate/issues/11" target="_blank" rel="noopener">issue</a></li><li><a href="/blog/wumyiw">如果实现 Egg + React + Webpack  热更新？</a></li><li><a href="https://github.com/easy-team/egg-react-webpack-boilerplate/issues/23" target="_blank" rel="noopener">服务端渲染如何使用 react-loadabel 实现异步加载</a></li></ul><h2 id="React-文件热更新入口配置模板"><a href="#React-文件热更新入口配置模板" class="headerlink" title="React 文件热更新入口配置模板"></a>React 文件热更新入口配置模板</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ReactDom <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> AppContainer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-hot-loader'</span><span class="token punctuation">;</span><span class="token keyword">import</span> Entry <span class="token keyword">from</span> <span class="token string">'${this.resourcePath.replace(/\\/g, '</span>\\\\<span class="token string">')}'</span><span class="token punctuation">;</span><span class="token keyword">const</span> state <span class="token operator">=</span> window<span class="token punctuation">.</span>__INITIAL_STATE__<span class="token punctuation">;</span><span class="token keyword">const</span> render <span class="token operator">=</span> <span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 如果是 SSR 渲染时，请用 hydrate， 否则用 render，主要解决警告问题，不影响实际功能</span> ReactDom<span class="token punctuation">.</span><span class="token function">hydrate</span><span class="token punctuation">(</span>EASY_ENV_IS_DEV <span class="token operator">?</span> <span class="token operator">&lt;</span>AppContainer<span class="token operator">></span><span class="token operator">&lt;</span>App <span class="token punctuation">{</span><span class="token operator">...</span>state<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>AppContainer<span class="token operator">></span>     <span class="token punctuation">:</span> <span class="token operator">&lt;</span>App <span class="token punctuation">{</span><span class="token operator">...</span>state<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'app'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>module<span class="token punctuation">.</span>hot<span class="token punctuation">)</span> <span class="token punctuation">{</span>  module<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token string">'${this.resourcePath.replace(/\\/g, '</span>\\\\<span class="token string">')}'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token function">render</span><span class="token punctuation">(</span>Entry<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">render</span><span class="token punctuation">(</span>Entry<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="热更新-HMR-生效，但页面没有更新"><a href="#热更新-HMR-生效，但页面没有更新" class="headerlink" title="热更新 HMR 生效，但页面没有更新"></a>热更新 HMR 生效，但页面没有更新</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span>module<span class="token punctuation">.</span>hot<span class="token punctuation">)</span> <span class="token punctuation">{</span>  module<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token string">'${this.resourcePath.replace(/\\/g, '</span>\\\\<span class="token string">')}'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token function">render</span><span class="token punctuation">(</span>Entry<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>改成<span class="token keyword">if</span> <span class="token punctuation">(</span>module<span class="token punctuation">.</span>hot<span class="token punctuation">)</span> <span class="token punctuation">{</span>  module<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="更多常见问题"><a href="#更多常见问题" class="headerlink" title="更多常见问题"></a>更多常见问题</h2><p><a href="https://github.com/easy-team/egg-react-webpack-boilerplate/issues" target="_blank" rel="noopener">https://github.com/easy-team/egg-react-webpack-boilerplate/issues</a></p>]]></content>
    
    <summary type="html">
    
      Egg React Server Side Render, Egg React SSR, Egg AntD SSR, Egg React 服务端渲染
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>asset 前端渲染</title>
    <link href="https://easyjs.cn/egg-react/asset/"/>
    <id>https://easyjs.cn/egg-react/asset/</id>
    <published>2020-05-31T09:43:53.000Z</published>
    <updated>2020-05-31T09:43:53.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在 <a href="/egg-react/web">前端渲染模式</a> 章节讲到了基于 React 的一体化的前端渲染模式，好处是不需要借助第三方模板引擎且无效关注静态资源注入问题，但有两个小的功能限制：</p><ul><li><p>layout 模板数据绑定能力较弱</p></li><li><p>资源注入不能自己定义，比如 async， crossorigin 等配置</p></li></ul><p>针对上面问题<a href="https://github.com/easy-team/egg-view-react-ssr" target="_blank" rel="noopener"> egg-view-react-ssr </a>(&gt;=2.4.0)扩展 <a href="https://github.com/easy-team/egg-view-react-ssr/blob/master/app/extend/context.js#L9" target="_blank" rel="noopener">renderAsset</a> 方法支持基于 asset 的<strong>前端渲染模式</strong>，方便对 layout 进行定制和数据绑定。<br /></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ul><li>renderAsset 模式默认使用 egg-view-nunjucks 模板引擎对 layout 进行数据模板编译，你需要在项目 package.json 中同时安装 <a href="https://github.com/easy-team/egg-view-react-ssr" target="_blank" rel="noopener">egg-view-react-ssr</a> 和 <a href="https://github.com/eggjs/egg-view-nunjucks" target="_blank" rel="noopener">egg-view-nunjucks</a> 插件依赖。</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ${root}/package.json</span><span class="token punctuation">{</span>   <span class="token string">"dependencies"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>     <span class="token string">"egg-view-nunjucks"</span><span class="token punctuation">:</span> <span class="token string">"^2.2.0"</span><span class="token punctuation">,</span>     <span class="token string">"egg-view-react-ssr"</span><span class="token punctuation">:</span> <span class="token string">"^2.4.0"</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>开启 <a href="https://github.com/eggjs/egg-view-nunjucks" target="_blank" rel="noopener">egg-view-nunjucks</a> 插件配置</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ${root}/config/plugin.json</span>exports<span class="token punctuation">.</span>reactssr <span class="token operator">=</span> <span class="token punctuation">{</span>  enable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token keyword">package</span><span class="token punctuation">:</span> <span class="token string">'egg-view-react-ssr'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>exports<span class="token punctuation">.</span>nunjucks <span class="token operator">=</span> <span class="token punctuation">{</span>  enable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token keyword">package</span><span class="token punctuation">:</span> <span class="token string">'egg-view-nunjucks'</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><ul><li>配置 layout.html  模板</li></ul><blockquote><p>模板默认路径：${root}/app/view/layout.html， 你可以通过<a href="https://github.com/easy-team/egg-view-react-ssr" target="_blank" rel="noopener"> egg-view-react-ssr</a> 的 layout 属性配置指定模板位置。</p></blockquote><pre><code>**渲染上下文暴露全局 asset 对象，参数如下：**</code></pre><p><strong>asset.js</strong> { Array } 页面依赖的静态 JS 资源 URL 列表， 来自 <code>config/manifest.json</code> 具体见 <a href="/easywebpack/deps">资源依赖</a><br /><strong>asset.css</strong> { Array } 页面依赖的静态 JS 资源 URL 列表，来自<code>config/manifest.json</code>具体见 <a href="/easywebpack/deps">资源依赖</a><br /><strong>asset.state</strong> { Object } 页面渲染原始数据，用于 MV 框架初始化 state</p><p>以下就是基于 nunjucks 的语法的 layout 模板配置, 你可以根据指定渲染引擎编写 layout 文件。</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>en<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>{{title}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>keywords<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>description<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>content-type<span class="token punctuation">'</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>text/html;charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>viewport<span class="token punctuation">'</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>initial-scale<span class="token punctuation">=</span>1, maximum-scale<span class="token punctuation">=</span>1, user-scalable<span class="token punctuation">=</span>no, minimal-ui<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>shortcut icon<span class="token punctuation">'</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>/favicon.ico<span class="token punctuation">'</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>image/x-icon<span class="token punctuation">'</span></span> <span class="token punctuation">/></span></span>  {% for item in asset.css %}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>{{item}}<span class="token punctuation">'</span></span> <span class="token punctuation">/></span></span>  {% endfor %}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>app<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    window<span class="token punctuation">.</span>__INITIAL_STATE__ <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> asset<span class="token punctuation">.</span>state <span class="token operator">|</span> safe <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  {% for item in asset.js %}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{item}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  {% endfor %}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><ul><li>renderAsset  默认调用，使用 nunjucks 模板引擎</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> egg <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'egg'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">AppController</span> <span class="token keyword">extends</span> <span class="token class-name">egg<span class="token punctuation">.</span>Controller</span> <span class="token punctuation">{</span>  <span class="token keyword">async</span> <span class="token function">home</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">await</span> ctx<span class="token punctuation">.</span><span class="token function">renderAsset</span><span class="token punctuation">(</span><span class="token string">'app.js'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> title<span class="token punctuation">:</span> <span class="token string">'egg-react-asset'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>renderAsset 自定义模板引擎（支持两种方式, 注意要安装指定模板引擎)</li></ul><blockquote><ol><li>可以通过 <a href="https://github.com/easy-team/egg-view-react-ssr" target="_blank" rel="noopener">egg-view-react-ssr</a> 的 viewEngine  配置全局渲染引擎</li></ol></blockquote><blockquote><ol start="2"><li>通过 renderAsset 的第三个参数 viewEngine 配置对应渲染引擎，只在当前渲染生效</li></ol></blockquote><blockquote></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> egg <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'egg'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">AdminController</span> <span class="token keyword">extends</span> <span class="token class-name">egg<span class="token punctuation">.</span>Controller</span> <span class="token punctuation">{</span>  <span class="token keyword">async</span> <span class="token function">home</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 使用 ejs 引擎，注意项目请安装 https://github.com/eggjs/egg-view-ejs 依赖</span>    <span class="token keyword">await</span> ctx<span class="token punctuation">.</span><span class="token function">renderAsset</span><span class="token punctuation">(</span><span class="token string">'admin.js'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> title<span class="token punctuation">:</span> <span class="token string">'egg-react-asset'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> viewEngine<span class="token punctuation">:</span> <span class="token string">'ejs'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="骨架项目"><a href="#骨架项目" class="headerlink" title="骨架项目"></a>骨架项目</h2><p><a href="https://github.com/easy-team/egg-react-webpack-boilerplate/tree/feature/green/asset" target="_blank" rel="noopener">https://github.com/easy-team/egg-react-webpack-boilerplate/tree/feature/green/asset</a></p><h2 id="参考实现"><a href="#参考实现" class="headerlink" title="参考实现"></a>参考实现</h2><p><a href="https://github.com/eggjs/egg-view-assets" target="_blank" rel="noopener">https://github.com/eggjs/egg-view-assets</a></p>]]></content>
    
    <summary type="html">
    
      Egg React Server Side Render, Egg React SSR, Egg AntD SSR, Egg React 服务端渲染，Egg React 前端渲染
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Babel 配置</title>
    <link href="https://easyjs.cn/egg-react/babel/"/>
    <id>https://easyjs.cn/egg-react/babel/</id>
    <published>2020-05-31T09:43:53.000Z</published>
    <updated>2020-05-31T09:43:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>在进行 Egg + React 进行 SSR 模式开发时，运行 <code>npm run dev</code>  后你会看到如下界面， 启动了两个 Webpack 构建实例：Node 模式 和 Web 模式。SSR 运行需要 Webapck 单独构建 <code>target: node</code>   和 <code>target: web</code>  主要的差异在于 Webpack需要处理 require 机制以及磨平 Node 和 浏览器运行环境的差异。</p><p><img src="https://cdn.nlark.com/yuque/0/2018/png/116733/1536128449742-0024eb69-d2c7-4e47-8426-ff2cc85396d5.png#width=827" alt=""></p><p>在 <code>easywebpack</code> 4.6.0 以下 SSR 版本构建方案实现时，Node 和 Web 模式采用的是一份 <code>.babelrc</code>  配置，这样导致构建的后代码全部变成 es5。 但 Node 现在LTS 版本已经是 8 了，而且 10 也在开发，不久将会发布。这样导致 Node 端构建的代码没有用到 ES6 的特性，我们期望根据 Node 版本构建指定 ES 模式代码，这样可以带来两个好处：</p><ul><li><p>Node 端运行的 ES6 模块更好的执行效率</p></li><li><p>Node 端编译成 ES6，可以减小构建好的 JSBundle 文件大小和编译转换时间，同时带来更好的文件读取效率和执行效率。</p></li></ul><h2 id="easywebpack-4-6-0-以下-babelrc-配置"><a href="#easywebpack-4-6-0-以下-babelrc-配置" class="headerlink" title="easywebpack 4.6.0 以下.babelrc  配置"></a>easywebpack 4.6.0 以下<code>.babelrc</code>  配置</h2><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"presets"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"react"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"env"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token property">"modules"</span><span class="token operator">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"plugins"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"transform-object-assign"</span><span class="token punctuation">,</span>    <span class="token string">"syntax-dynamic-import"</span><span class="token punctuation">,</span>    <span class="token string">"transform-object-rest-spread"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"import"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token property">"libraryName"</span><span class="token operator">:</span> <span class="token string">"antd"</span><span class="token punctuation">,</span>      <span class="token property">"style"</span><span class="token operator">:</span> <span class="token string">"css"</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"env"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"development"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"plugins"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token string">"react-hot-loader/babel"</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"comments"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span></code></pre><h2 id="easywebpack-react-4-4-0-支持-Node-和-Web-指定-ES-模式构建"><a href="#easywebpack-react-4-4-0-支持-Node-和-Web-指定-ES-模式构建" class="headerlink" title="easywebpack-react 4.4.0+ 支持 Node 和 Web 指定 ES 模式构建"></a>easywebpack-react 4.4.0+ 支持 Node 和 Web 指定 ES 模式构建</h2><blockquote><p>注意： 升级 babel 7 后，不支持如下 env 方式配置 </p></blockquote><p><strong>关键措施：</strong> <a href="https://www.babeljs.cn/docs/usage/babelrc/" target="_blank" rel="noopener">bable 本身支持通过 process.env.BABEL_ENV  加载 .babelrc  配置文件</a>:</p><p><img src="https://cdn.nlark.com/yuque/0/2018/png/116733/1536129170471-43b9b60e-a7da-47c3-8ad7-ef1ff7e56c22.png#width=827" alt=""></p><p><strong>如果.babelrc</strong><code>**   配置了 `env.node`  或者 `env.web`  节点配置，easywebpack 底层将自动设置  **[process.env.BABEL_ENV](https://www.babeljs.cn/docs/usage/babelrc/)** 变量， 启动 BABEL ENV 编译机制。easywebpack 底层支持  **[process.env.BABEL_ENV](https://www.babeljs.cn/docs/usage/babelrc/)** 支持  node 和 web 的 env  .babelrc**</code>**   节点配置。 另外关键的 target 配置：**</p><ul><li><p><code>target.node</code> :  Node 环境编译模式，可以是指定版本，比如配置：8.9.3，也可以配置当前运行的node版本：current。</p></li><li><p><code>target.browsers</code> : Web 浏览器编译模式，可以配置浏览器的版本等</p></li></ul><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"env"</span><span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token property">"node"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"presets"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token string">"react"</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">"env"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>          <span class="token property">"modules"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>          <span class="token property">"targets"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"node"</span><span class="token operator">:</span> <span class="token string">"current"</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">]</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token property">"plugins"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token string">"syntax-dynamic-import"</span><span class="token punctuation">,</span>        <span class="token string">"transform-object-rest-spread"</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"web"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"presets"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token string">"react"</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">"env"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>          <span class="token property">"modules"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>          <span class="token property">"targets"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"browsers"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"last 2 versions"</span><span class="token punctuation">,</span> <span class="token string">"safari >= 7"</span><span class="token punctuation">]</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">]</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token property">"plugins"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token string">"react-hot-loader/babel"</span><span class="token punctuation">,</span>        <span class="token string">"transform-object-assign"</span><span class="token punctuation">,</span>        <span class="token string">"syntax-dynamic-import"</span><span class="token punctuation">,</span>        <span class="token string">"transform-object-rest-spread"</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">"import"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>          <span class="token property">"libraryName"</span><span class="token operator">:</span> <span class="token string">"antd"</span><span class="token punctuation">,</span>          <span class="token property">"libraryDirectory"</span><span class="token operator">:</span> <span class="token string">"lib"</span><span class="token punctuation">,</span>          <span class="token property">"style"</span><span class="token operator">:</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span><span class="token punctuation">]</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"comments"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span></code></pre><h2 id="Babel-7-升级"><a href="#Babel-7-升级" class="headerlink" title="Babel 7 升级"></a>Babel 7 升级</h2><p><a href="/easywebpack/babel7">/easywebpack/babel7</a></p>]]></content>
    
    <summary type="html">
    
      Egg React Server Side Render(Egg React SSR) Webpack Babel 构建优化
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>HTML前端渲染</title>
    <link href="https://easyjs.cn/egg-react/html/"/>
    <id>https://easyjs.cn/egg-react/html/</id>
    <published>2020-05-31T09:43:53.000Z</published>
    <updated>2020-05-31T09:43:53.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在 <a href="/egg-react/web">前端渲染模式</a> 和 <a href="/egg-react/web">asset 渲染模式</a> 章节讲到了基于 React 的前端渲染模式，但都依赖  <a href="https://github.com/easy-team/egg-view-react-ssr" target="_blank" rel="noopener">egg-view-react-ssr</a> 插件，那如何基于已有 egg 模板引擎 (<a href="https://github.com/eggjs/egg-view-nunjucks" target="_blank" rel="noopener">egg-view-nunjucks</a> 或 <a href="https://github.com/eggjs/egg-view-ejs" target="_blank" rel="noopener">egg-view-ejs</a>) + Webpack 完全自定义前端方案呢？</p><h2 id="关键问题"><a href="#关键问题" class="headerlink" title="关键问题"></a>关键问题</h2><ul><li>本地开发 Webpack 与 Egg 集成，可以直接使用 <a href="/blog/wumyiw">egg-webpack</a>， 该插件可以独立使用, 当然你可以实现。</li><li>通过 <a href="https://github.com/eggjs/egg-view-nunjucks" target="_blank" rel="noopener">egg-view-nunjucks</a> 或 <a href="https://github.com/eggjs/egg-view-ejs" target="_blank" rel="noopener">egg-view-ejs</a> 插件进行数据绑定</li><li>通过 <code>html-webpack-plugin</code>  插件生成 HTML 文件，并自动注入 JS/CSS 依赖</li><li>本地开发时，需要通过 <code>write-file-webpack-plugin</code>  插件把 Webpack HTML 文件写到本地。Webpack 默认是在内存里面，无法直接读取。</li></ul><h2 id="如何实现"><a href="#如何实现" class="headerlink" title="如何实现"></a>如何实现</h2><blockquote><p>这里以 <a href="https://github.com/eggjs/egg-view-nunjucks" target="_blank" rel="noopener">egg-view-nunjucks</a> 为例，其它模板引擎类似。</p></blockquote><ul><li>安装 <a href="https://github.com/eggjs/egg-view-nunjucks" target="_blank" rel="noopener">egg-view-nunjucks</a> 插件依赖</li></ul><p><code>npm install egg-view-nunjucks --save</code> <br /><code>npm install egg-webpack --save-dev</code></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ${root}/package.json</span><span class="token punctuation">{</span>   <span class="token string">"dependencies"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>     <span class="token string">"egg-webpack"</span><span class="token punctuation">:</span> <span class="token string">"^4.0.0"</span><span class="token punctuation">,</span>     <span class="token string">"egg-view-nunjucks"</span><span class="token punctuation">:</span> <span class="token string">"^2.2.0"</span><span class="token punctuation">,</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>开启 <a href="https://github.com/eggjs/egg-view-nunjucks" target="_blank" rel="noopener">egg-view-nunjucks</a> 插件配置<br /></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ${root}/config/plugin.local.js</span>exports<span class="token punctuation">.</span>webpack <span class="token operator">=</span> <span class="token punctuation">{</span>  enable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token keyword">package</span><span class="token punctuation">:</span> <span class="token string">'egg-webpack'</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ${root}/config/plugin.js</span>exports<span class="token punctuation">.</span>nunjucks <span class="token operator">=</span> <span class="token punctuation">{</span>  enable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token keyword">package</span><span class="token punctuation">:</span> <span class="token string">'egg-view-nunjucks'</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><ul><li>配置 layout.tpl  模板<br /></li></ul><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>en<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>{{title}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>keywords<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>description<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>content-type<span class="token punctuation">'</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>text/html;charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>viewport<span class="token punctuation">'</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>initial-scale<span class="token punctuation">=</span>1, maximum-scale<span class="token punctuation">=</span>1, user-scalable<span class="token punctuation">=</span>no, minimal-ui<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>shortcut icon<span class="token punctuation">'</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>/favicon.ico<span class="token punctuation">'</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>image/x-icon<span class="token punctuation">'</span></span> <span class="token punctuation">/></span></span>  <span class="token comment" spellcheck="true">&lt;!-- html-webpack-plugin 自动注入 css --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>app<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    window<span class="token punctuation">.</span>__INITIAL_STATE__ <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- html-webpack-plugin 自动注入 js --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><ul><li>配置默认渲染引擎</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ${root}/config/local.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> app <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> exports <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  exports<span class="token punctuation">.</span>webpack <span class="token operator">=</span> <span class="token punctuation">{</span>    webpackConfigList<span class="token punctuation">:</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'@easy-team/easywebpack-react'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getWebpackConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> exports<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// ${root}/config/default.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> app <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> exports <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  exports<span class="token punctuation">.</span>view <span class="token operator">=</span> <span class="token punctuation">{</span>    defaultViewEngine<span class="token punctuation">:</span> <span class="token string">'nunjucks'</span><span class="token punctuation">,</span>    mapping<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token string">'.tpl'</span><span class="token punctuation">:</span> <span class="token string">'nunjucks'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> exports<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>render默认调用，使用 nunjucks 模板引擎<br /></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> egg <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'egg'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">AppController</span> <span class="token keyword">extends</span> <span class="token class-name">egg<span class="token punctuation">.</span>Controller</span> <span class="token punctuation">{</span>  <span class="token keyword">async</span> <span class="token function">home</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">await</span> ctx<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'app.tpl'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> title<span class="token punctuation">:</span> <span class="token string">'HTML渲染'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>webpack.config.js 配置 <blockquote><p>该配置基于 easywebpack 配置，如果要用原生 webpack 请参考：<a href="/blog/wumyiw">/blog/wumyiw</a></p></blockquote></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  egg<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  target<span class="token punctuation">:</span> <span class="token string">'web'</span><span class="token punctuation">,</span>  entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>    app<span class="token punctuation">:</span> <span class="token string">'app/web/page/app/app.js'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>     <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      chunks<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'runtime'</span><span class="token punctuation">,</span><span class="token string">'common'</span><span class="token punctuation">,</span> <span class="token string">'app'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      filename<span class="token punctuation">:</span> <span class="token string">'../view/app.tpl'</span><span class="token punctuation">,</span>      template<span class="token punctuation">:</span> <span class="token string">'./app/web/view/layout.tpl'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      chunks<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'runtime'</span><span class="token punctuation">,</span><span class="token string">'common'</span><span class="token punctuation">,</span> <span class="token string">'test'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      filename<span class="token punctuation">:</span> <span class="token string">'../view/test.tpl'</span><span class="token punctuation">,</span>      template<span class="token punctuation">:</span> <span class="token string">'./app/web/view/layout.tpl'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="依赖插件"><a href="#依赖插件" class="headerlink" title="依赖插件"></a>依赖插件</h2><ul><li><a href="/blog/wumyiw">egg-webpack</a></li><li><a href="https://github.com/eggjs/egg-view-nunjucks" target="_blank" rel="noopener">egg-view-nunjucks</a> </li><li><a href="https://github.com/gajus/write-file-webpack-plugin" target="_blank" rel="noopener">write-file-webpack-plugin</a></li><li><a href="https://github.com/jantimon/html-webpack-plugin" target="_blank" rel="noopener">html-webpack-plugin</a></li></ul><h2 id="骨架项目"><a href="#骨架项目" class="headerlink" title="骨架项目"></a>骨架项目</h2><p><a href="https://github.com/easy-team/egg-react-webpack-boilerplate/tree/feature/green/html" target="_blank" rel="noopener">https://github.com/easy-team/egg-react-webpack-boilerplate/tree/feature/green/html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;在 &lt;a href=&quot;/egg-react/web&quot;&gt;前端渲染模式&lt;/a&gt; 和 &lt;a href=&quot;/egg-react/web&quot;&gt;asset
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>快速开始</title>
    <link href="https://easyjs.cn/egg-react/init/"/>
    <id>https://easyjs.cn/egg-react/init/</id>
    <published>2020-05-31T09:43:53.000Z</published>
    <updated>2020-05-31T09:43:53.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基于-Egg-React-Webpack-服务端渲染开发指南"><a href="#基于-Egg-React-Webpack-服务端渲染开发指南" class="headerlink" title="基于 Egg + React + Webpack 服务端渲染开发指南"></a>基于 Egg + React + Webpack 服务端渲染开发指南</h2><h2 id="1-项目初始化"><a href="#1-项目初始化" class="headerlink" title="1. 项目初始化"></a>1. 项目初始化</h2><h3 id="1-1-通过-easywebpack-cli-脚手架初始化"><a href="#1-1-通过-easywebpack-cli-脚手架初始化" class="headerlink" title="1.1 通过 easywebpack-cli 脚手架初始化"></a>1.1 通过 <a href="https://github.com/easy-team/easywebpack-cli" target="_blank" rel="noopener">easywebpack-cli</a> 脚手架初始化</h3><ol><li><p>安装脚手架 <code>npm install easywebpack-cli -g</code> 命令行，然后就可以使用  <code>easy</code> 命令</p></li><li><p>命令行运行 <code>easy init</code></p></li><li><p>选择 egg + react server side render boilerplate 初始化骨架项目</p></li><li><p>安装依赖 <code>npm install</code></p></li></ol><h3 id="1-2-通过骨架项目初始化"><a href="#1-2-通过骨架项目初始化" class="headerlink" title="1.2 通过骨架项目初始化"></a>1.2 通过骨架项目初始化</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/easy-team/egg-react-webpack-boilerplate.git<span class="token function">npm</span> <span class="token function">install</span></code></pre><p>初始化的项目提供多页面和SPA(react-router/react-redux)服务端渲染实例，可以直接运行。</p><h3 id="1-3-vscode-插件初始化项目"><a href="#1-3-vscode-插件初始化项目" class="headerlink" title="1.3 vscode 插件初始化项目"></a>1.3 vscode 插件初始化项目</h3><p><a href="https://marketplace.visualstudio.com/items?itemName=hubcarl.vscode-easy-plugin#overview" target="_blank" rel="noopener">https://marketplace.visualstudio.com/items?itemName=hubcarl.vscode-easy-plugin#overview</a><br /></p><h2 id="2-项目运行"><a href="#2-项目运行" class="headerlink" title="2. 项目运行"></a>2. 项目运行</h2><h3 id="2-1-本地运行"><a href="#2-1-本地运行" class="headerlink" title="2.1 本地运行"></a>2.1 本地运行</h3><pre><code>npm run dev</code></pre><p>npm run dev 做了如下三件事情</p><ul><li><p>启动 egg 应用</p></li><li><p>启动 Webpack 构建, 文件不落地磁盘，Webpack 构建的文件都在内存里面</p></li><li><p>构建会同时启动两个 Webpack 构建服务, 客户端js构建端口9000, 服务端端口9001</p></li><li><p>构建完成，Egg 应用正式可用，自动打开浏览器</p></li></ul><h3 id="2-2-发布模式"><a href="#2-2-发布模式" class="headerlink" title="2.2 发布模式"></a>2.2 发布模式</h3><ul><li>Webpack 构建文件落地磁盘</li></ul><pre class=" language-javascript"><code class="language-javascript">npm run build 或 easy build</code></pre><ol><li><p>启动 Webpack 构建，文件落地磁盘</p></li><li><p>服务端构建的文件放到 <code>app/view</code> 目录</p></li><li><p>客户端构建的文件放到 <code>public</code> 目录</p></li><li><p>生成的 <code>manifest.json</code> 放到 <code>config</code> 目录</p></li><li><p>构建的文件都是 <code>gitignore</code>的，部署时请注意把这些文件打包进去</p></li></ol><ul><li>运行</li></ul><p>启动应用前， 请设置 <code>EGG_SERVER_ENV</code> 环境变量，测试环境设置 <code>test</code>， 正式环境设置 <code>prod</code></p><pre><code>npm start</code></pre><h2 id="3-项目构建"><a href="#3-项目构建" class="headerlink" title="3. 项目构建"></a>3. 项目构建</h2><ul><li><p>通过项目根目录下的 <code>webpack.config.js</code> 配置文件构造出 Webpack 实际的配置文件</p></li><li><p>通过 <a href="https://github.com/easy-webpack/egg-webpack" target="_blank" rel="noopener">egg-webpack</a> 插件提供本地开发构建和热更新支持。SSR 模式时，egg-webpack 会启动两个 Webpack 构建服务, 客户端jsbundle构建，端口9000, 服务端jsbundle构建端口9001。</p></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// config/config.local.js 本地 npm start 使用</span><span class="token keyword">const</span> easywebpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'easywebpack-react'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>exports<span class="token punctuation">.</span>webpack <span class="token operator">=</span> <span class="token punctuation">{</span>  webpackConfigList<span class="token punctuation">:</span>easywebpack<span class="token punctuation">.</span><span class="token function">getWebpackConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><ul><li>webpack.config.js  配置</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ${root}/webpack.config.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>    home<span class="token punctuation">:</span> <span class="token string">'app/web/page/home/index.jsx'</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="4-项目规范"><a href="#4-项目规范" class="headerlink" title="4. 项目规范"></a>4. 项目规范</h2><ul><li><p><a href="https://eggjs.org/zh-cn/basics/structure.html" target="_blank" rel="noopener">遵循 egg 开发规范</a></p></li><li><p>React 项目代码放到 app/web 目录，页面入口目录为 page，该目录的 所有 .jsx 文件默认会作为 Webpack 的 entry 构建入口。建议每个页面目录的只保留一个.jsx 文件，jsx关联的组件可以放到widget 或者 component 目录。</p></li></ul><h2 id="5-项目开发"><a href="#5-项目开发" class="headerlink" title="5. 项目开发"></a>5. 项目开发</h2><p>支持多页面/单页面服务端渲染, 前端渲染, 静态页面三种方式.</p><h3 id="5-1-多页面服务端渲染实现"><a href="#5-1-多页面服务端渲染实现" class="headerlink" title="5.1 多页面服务端渲染实现"></a>5.1 多页面服务端渲染实现</h3><h4 id="5-1-1-多页面前端页面实现"><a href="#5-1-1-多页面前端页面实现" class="headerlink" title="5.1.1 多页面前端页面实现"></a>5.1.1 多页面前端页面实现</h4><p>在app/web/page 目录下面创建 home 目录 和 home.jsx 文件, Webpack 自动根据 .jsx 文件创建 entry入口, 具体实现请见<a href="/easywebpack/config">webpack.config.js</a></p><ul><li>home.jsx 以组件的方式实现页面逻辑</li></ul><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> Header <span class="token keyword">from</span> <span class="token string">'component/layout/standard/header/header.jsx'</span><span class="token punctuation">;</span><span class="token keyword">import</span> List <span class="token keyword">from</span> <span class="token string">'component/home/list.jsx'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'./home.css'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Home</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'----componentDidMount-----'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Header</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Header</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>main<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>page-container</span> <span class="token attr-name">page-component"</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>List</span> <span class="token attr-name">list</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>list<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>List</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><h4 id="5-1-2-通过-egg-view-react-ssr-插件-render-方法实现-Server-Side-Render"><a href="#5-1-2-通过-egg-view-react-ssr-插件-render-方法实现-Server-Side-Render" class="headerlink" title="5.1.2 通过 egg-view-react-ssr 插件 render 方法实现 Server Side Render"></a>5.1.2 通过 <code>egg-view-react-ssr</code> 插件 <code>render</code> 方法实现 Server Side Render</h4><ul><li>创建 controller 文件 home.js</li></ul><pre class=" language-javascript"><code class="language-javascript">exports<span class="token punctuation">.</span>index <span class="token operator">=</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">yield</span> ctx<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'home/home.js'</span><span class="token punctuation">,</span> Model<span class="token punctuation">.</span><span class="token function">getPage</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><ul><li>添加路由配置</li></ul><pre class=" language-javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/home'</span><span class="token punctuation">,</span> app<span class="token punctuation">.</span>controller<span class="token punctuation">.</span>home<span class="token punctuation">.</span>home<span class="token punctuation">.</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="5-1-3-通过-egg-view-react-ssr-插件-renderClient-方法实现-Client-Side-Render"><a href="#5-1-3-通过-egg-view-react-ssr-插件-renderClient-方法实现-Client-Side-Render" class="headerlink" title="5.1.3  通过 egg-view-react-ssr 插件 renderClient 方法实现 Client Side Render"></a>5.1.3  通过 <code>egg-view-react-ssr</code> 插件 <code>renderClient</code> 方法实现 Client Side Render</h4><ul><li>在 controller 文件home.js 添加 client 方法</li></ul><pre class=" language-javascript"><code class="language-javascript">exports<span class="token punctuation">.</span>client <span class="token operator">=</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">yield</span> ctx<span class="token punctuation">.</span><span class="token function">renderClient</span><span class="token punctuation">(</span><span class="token string">'home/home.js'</span><span class="token punctuation">,</span> Model<span class="token punctuation">.</span><span class="token function">getPage</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><ul><li>添加路由配置</li></ul><pre class=" language-javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/client'</span><span class="token punctuation">,</span> app<span class="token punctuation">.</span>controller<span class="token punctuation">.</span>home<span class="token punctuation">.</span>home<span class="token punctuation">.</span>client<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="6-项目部署"><a href="#6-项目部署" class="headerlink" title="6. 项目部署"></a>6. 项目部署</h2><ul><li><p>正式环境部署，请设置 <code>EGG_SERVER_ENV=prod</code> 环境变量, 更多请见<a href="https://eggjs.org/zh-cn/basics/env.html" target="_blank" rel="noopener">运行环境</a></p></li><li><p>构建的 <code>app/view</code> 目录, <code>public</code> 目录以及 <code>buildConfig.json</code> 和 <code>manifest.json</code>等文件, 都是 <code>gitignore</code> 的，部署时请注意把这些文件打包进去。</p></li></ul><h3 id="一-Webpack构建目录"><a href="#一-Webpack构建目录" class="headerlink" title="一. Webpack构建目录"></a>一. Webpack构建目录</h3><ul><li><p>Webpack构建服务端(Node) JSBundle运行文件, 构建的服务端渲染模板文件位置 <code>${app_root}/app/view</code></p></li><li><p>Webpack构建浏览器JSBundle运行文件, 构建的前端资源(js/css/image)文件位置 <code>${app_root}/public</code></p></li><li><p>Webpack构建的 <code>manifest.json</code> 和 <code>buildConfig.js</code> 文件位置 <code>${app_root}/config</code> 目录</p></li><li><p>easywebpack-cli 构建配置文件 <code>webpack.config.js</code> 放到项目根目录<code>${app_root}/webpack.config.js</code></p></li><li><p>React代码文件<code>${app_root}/app/web</code> 下面, 主要包括 <code>asset</code>, <code>component</code>, <code>framework</code>, <code>page</code>, <code>store</code>, <code>view</code> 等目录</p></li></ul><pre class=" language-html"><code class="language-html">├── asset                    // 资源文件    │   ├── css     │   │   ├── global.css    │   │   ├── normalize.css    │   │   └── style.css    │   ├── images    │   │   ├── favicon.ico    │   │   ├── loading.gif    │   │   └── logo.png    ├── component                // jsx组件    │   ├── home    │   │   └── list.jsx    │   └── layout    │       └── standard    │           └── header    │               ├── header.css    │               └── header.jsx    ├── framework    │   └── entry    │       ├── app.js    │       └── loader.js    ├── page               // 页面目录, jsx结尾的的文件默认作为entry入口    │   ├── hello    │   │   └── hello.jsx  // 页面入口文件, 根据framework/entry/loader.js模板自动构建    │   └── home    │       ├── home.css    │       └── home.jsx    └── view        └── layout.jsx     // layout模板文件, 提供统一html, header, body结构, page下面的jsx文件无需关心</code></pre><h3 id="二-项目结构和基本规范"><a href="#二-项目结构和基本规范" class="headerlink" title="二. 项目结构和基本规范"></a>二. 项目结构和基本规范</h3><pre class=" language-html"><code class="language-html">├── app│   ├── controller│   │   ├── test│   │   │   └── test.js│   ├── extend│   ├── lib│   ├── middleware│   ├── mocks│   ├── proxy│   ├── router.js│   ├── view│   │   ├── home│   │   │     └── home.js                 // 服务器编译的jsbundle文件│   └── web                               // 前端工程目录│       ├── asset                         // 存放公共js,css资源│       ├── framework                     // 前端公共库和第三方库│       │   └── entry                          │       │       ├── loader.js              // 根据jsx文件自动生成entry入口文件loader│       ├── page                           // 前端页面和webpack构建目录, 也就是webpack打包配置entryDir│       │   ├── home                       // 每个页面遵循目录名, js文件名, scss文件名, jsx文件名相同│       │   │   ├── home.scss│       │   │   ├── index.jsx│       └── component                         // 遵循目录名, js文件名, scss文件名, jsx 文件名相同│           ├── loading│           │   ├── loading.scss│           │   └── loading.jsx│           ├── test│           │   ├── test.jsx│           │   └── test.scss│           └── toast│               ├── toast.scss│               └── toast.jsx├── config│   ├── config.default.js│   ├── config.local.js│   ├── config.prod.js│   ├── config.test.js│   └── plugin.js├── doc├── index.js├── webpack.config.js                      // easywebpack-cli 构建配置├── public                                 // webpack编译目录结构, render文件查找目录│   ├── static│   │   ├── css│   │   │   ├── home│   │   │   │   ├── home.07012d33.css│   │   │   └── test│   │   │       ├── test.4bbb32ce.css│   │   ├── img│   │   │   ├── change_top.4735c57.png│   │   │   └── intro.0e66266.png│   ├── test│   │   └── test.js│   └── vendor.js                         // 生成的公共打包库</code></pre><h2 id="8-项目和插件"><a href="#8-项目和插件" class="headerlink" title="8. 项目和插件"></a>8. 项目和插件</h2><ul><li><p><a href="https://github.com/easy-team/egg-react-webpack-boilerplate" target="_blank" rel="noopener">egg-react-webpack-boilerplate</a>基于easywebpack-react和egg-view-react(ssr)插件的工程骨架项目</p></li><li><p><a href="https://github.com/easy-team/easywebpack-react" target="_blank" rel="noopener">easywebpack-react</a> Webpack React 构建工程化方案.</p></li><li><p><a href="https://github.com/easy-team/easywebpack-cli" target="_blank" rel="noopener">easywebpack-cli</a>  Webpack 构建工程化脚手架.</p></li><li><p><a href="https://github.com/easy-team/egg-view-vue-ssr" target="_blank" rel="noopener">egg-view-react-ssr</a> react ssr 解决方案.</p></li><li><p><a href="https://github.com/easy-team/egg-webpack" target="_blank" rel="noopener">egg-webpack</a> 本地开发热更新使用.</p></li><li><p><a href="https://github.com/easy-team/egg-webpack-react" target="_blank" rel="noopener">egg-webpack-react</a> 本地开发渲染内存读取辅助插件</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基于-Egg-React-Webpack-服务端渲染开发指南&quot;&gt;&lt;a href=&quot;#基于-Egg-React-Webpack-服务端渲染开发指南&quot; class=&quot;headerlink&quot; title=&quot;基于 Egg + React + Webpack 服务端渲染开发
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>部署流程</title>
    <link href="https://easyjs.cn/egg-react/online/"/>
    <id>https://easyjs.cn/egg-react/online/</id>
    <published>2020-05-31T09:43:53.000Z</published>
    <updated>2020-05-31T09:43:53.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="开发部署"><a href="#开发部署" class="headerlink" title="开发部署"></a>开发部署</h2><h3 id="新项目开发"><a href="#新项目开发" class="headerlink" title="新项目开发"></a>新项目开发</h3><p>在 <a href="https://github.com/hubcarl/egg-react-webpack-boilerplate" target="_blank" rel="noopener">egg-react-webpack-boilerplate</a> 骨架项目中, 提供了一些demo, 如果要进行新项目开发，可以删除部分文件：</p><ul><li><p>app/web/page 是页面目录。下面的每个目录都是一个单独的页面，其中 spa 目录是一个单页面服务端渲染例子，其他是简单的 React 服务端渲染例子， 这些文件都可以删除，删除后，你需要自己按照类似方式添加页面进行开发。</p></li><li><p>app/controller 是服务端页面处理逻辑入口，下面都是例子，可以删除， 然后自己根据业务添加对应的controller</p></li><li><p>asset 是几个公共的静态资源文件，如果 app/web/component下面没有引用到，可以根据需要删除</p></li><li><p>controller 和 page 删除了部分文件后，需要清理 app/router.js 和 webpack.config.js 下面文件不存在的一下配置</p></li><li><p>app/web/component 下面的 app 是单页面的 router 配置，如果 app/web/page/app  删除了，这个也可以删除</p></li><li><p>app/web/component/layout 提供了单页面 layout 和 多页面 layout, 自己根据需要选用。</p></li></ul><h3 id="纯净版本分支"><a href="#纯净版本分支" class="headerlink" title="纯净版本分支"></a>纯净版本分支</h3><p><a href="https://github.com/hubcarl/egg-react-webpack-boilerplate" target="_blank" rel="noopener">egg-react-webpack-boilerplate</a> 项目单独提供了两个纯净版本分支用于实际项目开发</p><ul><li><p>Egg2 + React 多页面服务端渲染分支 <a href="https://github.com/hubcarl/egg-react-webpack-boilerplate/tree/feature/green/multi" target="_blank" rel="noopener">feature/green/multi</a></p></li><li><p>Egg2 + React + React Router + Redux + React-Redux 单页面服务端渲染分支 <a href="https://github.com/hubcarl/egg-react-webpack-boilerplate/tree/feature/green/spa" target="_blank" rel="noopener">feature/green/spa</a></p></li></ul><h3 id="本地开发"><a href="#本地开发" class="headerlink" title="本地开发"></a>本地开发</h3><p>一般我们推荐把 <code>easy build dev</code>, <code>easy build test</code>, <code>easy build prod</code> 配置到 项目的 <code>package.json</code> 的 script 中去, 然后通过 npm run [command] 的方式使用。</p><ul><li><p>通过 <code>npm run [command]</code> 方式使用 easy 命令时，不需要全局安装 <code>easywepback-cli</code> 命令行工具, 只需要把 <code>easywepback-cli</code> 安装到项目 <code>devDependencies</code> 即可。</p></li><li><p>在命令行直接使用 <code>easy</code> 命令时，需要全局安装 <code>easywepback-cli</code> 命令行工具。如果不安装, 可以通过 npm5 支持的 <code>npx easy</code> 方式运行。</p></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>   <span class="token string">"scripts"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"clean"</span><span class="token punctuation">:</span> <span class="token string">"easy clean"</span><span class="token punctuation">,</span>    <span class="token string">"debug"</span><span class="token punctuation">:</span> <span class="token string">"egg-bin debug"</span><span class="token punctuation">,</span>    <span class="token string">"build"</span><span class="token punctuation">:</span> <span class="token string">"cross-env easy clean &amp;&amp; easy build prod"</span><span class="token punctuation">,</span>    <span class="token string">"dev"</span><span class="token punctuation">:</span> <span class="token string">"egg-bin dev"</span><span class="token punctuation">,</span>    <span class="token string">"start"</span><span class="token punctuation">:</span> <span class="token string">"egg-scripts start"</span><span class="token punctuation">,</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li><p>本项目本地开发过程中, <code>npm run dev</code>  自动启动 Webpack 内存构建，无需手动构建;</p></li><li><p>测试环境和正式环境部署一定要先进行 <code>npm run build</code> 模式构建，然后再打包, 只用用 <code>npm start</code>  启动</p></li><li><p>如果不是用 <code>egg-scripts start</code> 启动应用， 请配置<a href="https://eggjs.org/zh-cn/basics/env.html" target="_blank" rel="noopener">EGG_SERVER_ENV</a> 环境变量。<code>EGG_SERVER_ENV</code>表示 Egg 用那种方式启动, <code>test</code> 表示读取 <code>config.test.js</code> 配置， <code>prod</code> 表示读取 <code>config.prod.js</code> 配置， 线上运行一定要用 <code>prod</code> 模式。例如自己写 <code>index.js</code>  启动脚本, 然后通过 <code>node index.js</code>   启动时，请配置 <a href="https://eggjs.org/zh-cn/basics/env.html" target="_blank" rel="noopener">EGG_SERVER_ENV</a> 环境变量。</p></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ${root}/index.js</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'egg'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startCluster</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  baseDir<span class="token punctuation">:</span> __dirname<span class="token punctuation">,</span>  port<span class="token punctuation">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>PORT<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="本地开发模式"><a href="#本地开发模式" class="headerlink" title="本地开发模式"></a>本地开发模式</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> run dev</code></pre><p>使用 <code>egg-webpack</code> 插件进行前端资源构建, 这个插件只会在本地开发启用。</p><h4 id="本地模拟测试环境"><a href="#本地模拟测试环境" class="headerlink" title="本地模拟测试环境"></a>本地模拟测试环境</h4><pre class=" language-bash"><code class="language-bash">easy build <span class="token function">test</span><span class="token function">npm</span> start</code></pre><h4 id="本地模拟正式环境"><a href="#本地模拟正式环境" class="headerlink" title="本地模拟正式环境"></a>本地模拟正式环境</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> run build<span class="token function">npm</span> start</code></pre><h3 id="打包部署"><a href="#打包部署" class="headerlink" title="打包部署"></a>打包部署</h3><p>项目开发完成以后，我们要部署上线, 一般如下步骤:</p><h4 id="清除缓存"><a href="#清除缓存" class="headerlink" title="清除缓存"></a>清除缓存</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> run clean</code></pre><h4 id="开始构建"><a href="#开始构建" class="headerlink" title="开始构建"></a>开始构建</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> run build</code></pre><h4 id="打包上传"><a href="#打包上传" class="headerlink" title="打包上传"></a>打包上传</h4><blockquote><p>这里需要你自己实现把构建好的文件和项目问题一起打成 zip 或 tar 包，然后上传到部署平台进行部署。参数配置请见：<a href="/easywebpack/build">/easywebpack/build</a></p></blockquote><ul><li><p>需要把构建后的文件(public目录，app/view 目录， config/manifest.json)与项目源代码一起打包部署，当然部分文件(<a href="http://README.md" target="_blank" rel="noopener">README.md</a>, eslint, gitignore等)可以不打进去。</p></li><li><p>如果 <code>node_modules</code> 在打包时也打进去，packjson.json 里面的 devDependencies 依赖是不需要打进去的，这些只在开发期间和 Webpack 构建期间用到，不需要打进去。如果打进去也没有问题，只是包非常大，部署上传是个问题。</p></li><li><p>如果 <code>node_modules</code> 在打包时不打进去，在<strong>启动</strong>之前，你需要先按照依赖 <code>npm install --production</code></p></li></ul><h5 id="cli-zip打包-内置依赖和node-："><a href="#cli-zip打包-内置依赖和node-：" class="headerlink" title="cli zip打包(内置依赖和node)："></a>cli zip打包(内置依赖和node)：</h5><p><strong>这里会把代码，构建文件，node_modules 以及 node 一起压缩程 zip， 这样线上在启动时就不需要按照依赖。</strong></p><pre class=" language-bash"><code class="language-bash">easy clean alleasy build prodeasy <span class="token function">zip</span> --deps --nodejs</code></pre><h5 id="cli-zip打包-线上安装依赖-："><a href="#cli-zip打包-线上安装依赖-：" class="headerlink" title="cli zip打包(线上安装依赖)："></a>cli zip打包(线上安装依赖)：</h5><p><strong>这里仅仅把代码，构建文件一起压缩程 zip， 这样线上在启动时需要运行 npm install –production 按照依赖。</strong></p><pre class=" language-bash"><code class="language-bash">easy clean alleasy build prodeasy <span class="token function">zip</span></code></pre><h4 id="线上项目启动"><a href="#线上项目启动" class="headerlink" title="线上项目启动"></a>线上项目启动</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> start</code></pre><p>如果不是用 <code>egg-scripts start</code> 启动应用， 请配置 <a href="https://eggjs.org/zh-cn/basics/env.html" target="_blank" rel="noopener">EGG_SERVER_ENV</a> 环境变量 <code>EGG_SERVER_ENV=prod NODE_ENV=production</code>  配置环境变量</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;开发部署&quot;&gt;&lt;a href=&quot;#开发部署&quot; class=&quot;headerlink&quot; title=&quot;开发部署&quot;&gt;&lt;/a&gt;开发部署&lt;/h2&gt;&lt;h3 id=&quot;新项目开发&quot;&gt;&lt;a href=&quot;#新项目开发&quot; class=&quot;headerlink&quot; title=&quot;新项目开发&quot;&gt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>从零开始</title>
    <link href="https://easyjs.cn/egg-react/start/"/>
    <id>https://easyjs.cn/egg-react/start/</id>
    <published>2020-05-31T09:43:53.000Z</published>
    <updated>2020-05-31T09:43:53.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="从零开始搭建-Egg-React-Webpack-服务端渲染项目"><a href="#从零开始搭建-Egg-React-Webpack-服务端渲染项目" class="headerlink" title="从零开始搭建 Egg + React + Webpack 服务端渲染项目"></a>从零开始搭建 Egg + React + Webpack 服务端渲染项目</h2><h3 id="1-初始化环境"><a href="#1-初始化环境" class="headerlink" title="1. 初始化环境"></a>1. 初始化环境</h3><p>安装 Node LST (8.x.x) 环境： <a href="https://nodejs.org/zh-cn" target="_blank" rel="noopener">https://nodejs.org/zh-cn</a></p><h3 id="2-初始化-egg-项目"><a href="#2-初始化-egg-项目" class="headerlink" title="2. 初始化 egg 项目"></a>2. 初始化 egg 项目</h3><p><a href="https://github.com/eggjs/egg-init/blob/master/README.zh-CN.md" target="_blank" rel="noopener">https://github.com/eggjs/egg-init/blob/master/README.zh-CN.md</a></p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i egg-init -gegg-init</code></pre><ul><li><p>选择 <code>Simple egg app boilerplate</code> project 初始化 egg 项目</p></li><li><p>新建 <code>${app_root}/app/view</code> 目录(egg view规范目录)，并添加 <code>.gitkeep</code> 文件，保证该空目录被 git 提交到仓库</p></li><li><p>新建 <code>${app_root}/app/view/layout.html</code> 文件，用于服务端渲染失败后，采用客户端渲染</p></li></ul><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Egg + React + Webpack<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>keywords<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>description<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content-type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html;charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>initial-scale<span class="token punctuation">=</span>1, maximum-scale<span class="token punctuation">=</span>1, user-scalable<span class="token punctuation">=</span>no, minimal-ui<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>shortcut icon<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/favicon.ico<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>image/x-icon<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="3-安装依赖"><a href="#3-安装依赖" class="headerlink" title="3. 安装依赖"></a>3. 安装依赖</h3><ul><li>服务端渲染依赖</li></ul><p>react 没有内置在 egg-view-react-ssr 里面， 项目需要显示安装依赖。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i react react-dom axios egg-view-react-ssr egg-scripts --save</code></pre><ul><li>构建开发依赖</li></ul><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i egg-bin cross-env easywebpack-cli easywebpack-react egg-webpack egg-webpack-react --save-dev</code></pre><ul><li>安装全部依赖</li></ul><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span></code></pre><h3 id="4-添加配置"><a href="#4-添加配置" class="headerlink" title="4. 添加配置"></a>4. 添加配置</h3><ul><li>添加 <code>${app_root}/config/plugin.local.js</code> 配置</li></ul><pre class=" language-javascript"><code class="language-javascript">exports<span class="token punctuation">.</span>webpack <span class="token operator">=</span> <span class="token punctuation">{</span>  enable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token keyword">package</span><span class="token punctuation">:</span> <span class="token string">'egg-webpack'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>exports<span class="token punctuation">.</span>webpackreact <span class="token operator">=</span> <span class="token punctuation">{</span>  enable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token keyword">package</span><span class="token punctuation">:</span> <span class="token string">'egg-webpack-react'</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><ul><li>添加 <code>${app_root}/config/plugin.js</code> 配置</li></ul><pre class=" language-javascript"><code class="language-javascript">exports<span class="token punctuation">.</span>reactssr <span class="token operator">=</span> <span class="token punctuation">{</span>  enable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token keyword">package</span><span class="token punctuation">:</span> <span class="token string">'egg-view-react-ssr'</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><ul><li>添加 <code>${app_root}/config/config.default.js</code> 配置</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token string">'use strict'</span><span class="token punctuation">;</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> app <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> config <span class="token operator">=</span> exports <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 保证构建的静态资源文件能够被访问到</span>  config<span class="token punctuation">.</span><span class="token keyword">static</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    prefix<span class="token punctuation">:</span> <span class="token string">'/public/'</span><span class="token punctuation">,</span>    dir<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>baseDir<span class="token punctuation">,</span> <span class="token string">'public'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  config<span class="token punctuation">.</span>reactssr <span class="token operator">=</span> <span class="token punctuation">{</span>    renderOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>      basedir<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>baseDir<span class="token punctuation">,</span> <span class="token string">'app/view'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> config<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>添加 <code>easywebpack-cli</code> 配置文件 <code>${app_root}/webpack.config.js</code></li></ul><blockquote><p>关于 entry 配置，请务必先看这篇文档：<a href="/egg-react/config">/egg-react/config</a></p></blockquote><pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>    app<span class="token punctuation">:</span> <span class="token string">'app/web/page/home/index.jsx'</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><ul><li>添加 <code>${app_root}/.babelrc</code> 文件</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>  <span class="token string">"presets"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token string">"react"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"env"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token string">"modules"</span><span class="token punctuation">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token string">"plugins"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token string">"transform-object-assign"</span><span class="token punctuation">,</span>    <span class="token string">"syntax-dynamic-import"</span><span class="token punctuation">,</span>    <span class="token string">"transform-object-rest-spread"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"import"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token string">"libraryName"</span><span class="token punctuation">:</span> <span class="token string">"antd"</span><span class="token punctuation">,</span>      <span class="token string">"style"</span><span class="token punctuation">:</span> <span class="token string">"css"</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token string">"env"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"development"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token string">"plugins"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token string">"react-hot-loader/babel"</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token string">"comments"</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span></code></pre><p>安装 babel 相关依赖</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i babel-core babel-loader  --save-dev</code></pre><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i babel-preset-env babel-plugin-syntax-dynamic-import babel-plugin-transform-object-assign babel-plugin-transform-object-rest-spread --save-dev</code></pre><ul><li>添加 <code>${app_root}/postcss.config.js</code> 文件<strong>(非必须)</strong></li></ul><pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'autoprefixer'</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>安装 autoprefixer 依赖</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i autoprefixer  --save-dev</code></pre><ul><li>添加 <code>${app_root}/.gitignore</code> 配置</li></ul><pre><code>.DS_Store.happypack/node_modules/npm-debug.log.idea/diststaticpublicprivaterun*.iml*tmp_sitelogs.vscodeconfig/manifest.jsonapp/view/*!app/view/layout.html!app/view/.gitkeeppackage-lock.json</code></pre><h3 id="5-写代码"><a href="#5-写代码" class="headerlink" title="5. 写代码"></a>5. 写代码</h3><h4 id="编写前端-react-代码"><a href="#编写前端-react-代码" class="headerlink" title="编写前端 react 代码"></a>编写前端 react 代码</h4><ul><li>新建 <code>${app_root}/app/web/page/home/index.jsx</code>  页面文件</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> Layout <span class="token keyword">from</span> <span class="token string">'component/layout.jsx'</span><span class="token punctuation">;</span><span class="token keyword">import</span> List <span class="token keyword">from</span> <span class="token string">'./componets/list'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'./index.css'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">HomeIndex</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'----componentDidMount-----'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token operator">&lt;</span>Layout<span class="token operator">></span>      <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"main"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"page-container page-component"</span><span class="token operator">></span>          <span class="token operator">&lt;</span>List list<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>message<span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>List<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>Layout<span class="token operator">></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="编写-Node-端代码"><a href="#编写-Node-端代码" class="headerlink" title="编写 Node 端代码"></a>编写 Node 端代码</h4><p>通过 <code>egg-view-react-ssr</code> 插件 <code>render</code> 方法实现， 请看<a href="/egg-react/ssr">服务端渲染</a>和<a href="/egg-react/client">前端渲染模式</a></p><ul><li>创建 controller 文件 <code>${app_root}/app/controller/home.js</code></li></ul><pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> app <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">class</span> <span class="token class-name">HomeController</span> <span class="token keyword">extends</span> <span class="token class-name">app<span class="token punctuation">.</span>Controller</span> <span class="token punctuation">{</span>    <span class="token keyword">async</span> <span class="token function">server</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> <span class="token punctuation">{</span> ctx <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>      <span class="token keyword">await</span> ctx<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'home/index.js'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> message<span class="token punctuation">:</span> <span class="token string">'egg react server side render'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">async</span> <span class="token function">client</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> <span class="token punctuation">{</span> ctx <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>      <span class="token operator">/</span><span class="token operator">*</span>      <span class="token operator">-</span> renderClient 前端渲染，Node层只做 layout<span class="token punctuation">.</span>html和资源依赖组装，渲染交给前端渲染。      <span class="token operator">-</span> 与服务端渲染的差别你可以通过查看运行后页面源代码即可明白两者之间的差异      <span class="token operator">*</span>／      <span class="token keyword">await</span> ctx<span class="token punctuation">.</span><span class="token function">renderClient</span><span class="token punctuation">(</span><span class="token string">'home/index.js'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> message<span class="token punctuation">:</span> <span class="token string">'egg react client render'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><ul><li>添加路由配置</li></ul><pre class=" language-javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> app<span class="token punctuation">.</span>controller<span class="token punctuation">.</span>home<span class="token punctuation">.</span>server<span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/client'</span><span class="token punctuation">,</span> app<span class="token punctuation">.</span>controller<span class="token punctuation">.</span>home<span class="token punctuation">.</span>client<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="6-本地运行"><a href="#6-本地运行" class="headerlink" title="6. 本地运行"></a>6. 本地运行</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> run dev</code></pre><p>npm run dev 做了如下三件事情</p><ul><li><p>首先启动 egg 应用</p></li><li><p>启动 webpack(egg-webpack) 构建, 文件不落地磁盘，构建的文件都在内存里面(只在本地启动, 发布模式是提前构建好文件到磁盘)</p></li><li><p>构建会同时启动两个 Webpack 构建服务, 客户端js构建端口9000, 服务端端口9001</p></li><li><p>构建完成，Egg 应用正式可用，自动打开浏览器</p></li></ul><h3 id="7-发布模式"><a href="#7-发布模式" class="headerlink" title="7. 发布模式"></a>7. 发布模式</h3><ul><li><code>${app_root}/package.json</code> 添加命令</li></ul><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"dev"</span><span class="token operator">:</span> <span class="token string">"egg-bin dev"</span><span class="token punctuation">,</span>    <span class="token property">"start"</span><span class="token operator">:</span> <span class="token string">"egg-scripts start"</span><span class="token punctuation">,</span>    <span class="token property">"debug"</span><span class="token operator">:</span> <span class="token string">"egg-bin debug"</span><span class="token punctuation">,</span>    <span class="token property">"clean"</span><span class="token operator">:</span> <span class="token string">"easy clean all"</span><span class="token punctuation">,</span>    <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"easy build"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre><ul><li>命令行运行 webpack 编译</li></ul><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> run build 或 easy build prod</code></pre><ol><li><p>启动 Webpack 构建，文件落地磁盘</p></li><li><p>服务端构建的文件放到 <code>app/view</code> 目录</p></li><li><p>客户端构建的文件放到 <code>public</code> 目录</p></li><li><p>生成的 <code>manifest.json</code> 放到 <code>config</code> 目录</p></li><li><p>构建的文件都是gitignore的，部署时请注意把这些文件打包进去</p></li></ol><ul><li>部署</li></ul><p>启动应用前， 如果是非 <code>egg-scripts</code>  方式启动， 请设置 <code>EGG_SERVER_ENV</code> 环境变量，本地local, 测试环境设置 <code>test</code>， 正式环境设置 <code>prod</code></p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> start</code></pre><h2 id="8-项目和插件"><a href="#8-项目和插件" class="headerlink" title="8. 项目和插件"></a>8. 项目和插件</h2><ul><li><p><a href="https://github.com/easy-team/egg-react-webpack-boilerplate" target="_blank" rel="noopener">egg-react-webpack-boilerplate</a> 基于easywebpack-react和 egg-view-react-ssr插件的工程骨架项目</p></li><li><p><a href="https://github.com/easy-team/easywebpack-react" target="_blank" rel="noopener">easywebpack-react</a> Webpack React 构建工程化基础</p></li><li><p><a href="https://github.com/easy-team/easywebpack-cli" target="_blank" rel="noopener">easywebpack-cli</a>  Webpack 构建工程化脚手架.</p></li><li><p><a href="https://github.com/easy-team/egg-view-react-ssr" target="_blank" rel="noopener">egg-view-react-ssr</a> egg react ssr 插件.</p></li><li><p><a href="https://github.com/easy-team/egg-webpack" target="_blank" rel="noopener">egg-webpack</a> 本地开发热更新使用.</p></li><li><p><a href="https://github.com/easy-team/egg-webpack-react" target="_blank" rel="noopener">egg-webpack-react</a> 本地开发渲染内存读取辅助 egg-webpack-react插件</p></li></ul><h2 id="9-建议"><a href="#9-建议" class="headerlink" title="9. 建议"></a>9. 建议</h2><p>以上详细步骤只是告诉大家 Egg + React + easywebpack 搭建项目整个流程，帮助搭建理清流程和细节。实际使用使用时建议使用 easywebpack-cli 初始化项目或者 clone <a href="https://github.com/easy-team/egg-react-webpack-boilerplate" target="_blank" rel="noopener">egg-react-webpack-boilerplate</a> 代码初始化项目。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;从零开始搭建-Egg-React-Webpack-服务端渲染项目&quot;&gt;&lt;a href=&quot;#从零开始搭建-Egg-React-Webpack-服务端渲染项目&quot; class=&quot;headerlink&quot; title=&quot;从零开始搭建 Egg + React + Webpack
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>升级更新</title>
    <link href="https://easyjs.cn/egg-react/update/"/>
    <id>https://easyjs.cn/egg-react/update/</id>
    <published>2020-05-31T09:43:53.000Z</published>
    <updated>2020-05-31T09:43:53.000Z</updated>
    
    <content type="html"><![CDATA[<br /><h2 id="发布历史"><a href="#发布历史" class="headerlink" title="发布历史"></a>发布历史</h2><p><a href="https://github.com/easy-team/egg-react-webpack-boilerplate/blob/master/CHANGELOG.md" target="_blank" rel="noopener">https://github.com/easy-team/egg-react-webpack-boilerplate/blob/master/CHANGELOG.md</a></p><h2 id="版本特性"><a href="#版本特性" class="headerlink" title="版本特性"></a>版本特性</h2><h4 id="easywebpack体系通过-easy-team-模式内置-Babel-7-方案"><a href="#easywebpack体系通过-easy-team-模式内置-Babel-7-方案" class="headerlink" title="easywebpack体系通过 @easy-team 模式内置 Babel 7 方案"></a>easywebpack体系通过 @easy-team 模式内置 Babel 7 方案</h4><blockquote><p>骨架分支： master，版本 4.6.0</p></blockquote><ul><li>@easy-team/easywebpack 提供内置 <a href="/easywebpack/babel7">babel 7 升级方案</a>，主要修改如下：<ul><li>easywebpack-cli  &gt;  @easy-team/easywebpack@^4.0.0</li><li>easywebpack-react  &gt;  @easy-team/easywebpack-react@^4.0.0</li><li>.babelrc 配置升级为 babel 7 配置</li></ul></li></ul><h4 id="提供-Egg-React-Nunjucks-自定义纯前端渲染方案"><a href="#提供-Egg-React-Nunjucks-自定义纯前端渲染方案" class="headerlink" title="提供 Egg + React + Nunjucks 自定义纯前端渲染方案"></a>提供 Egg + React + Nunjucks 自定义纯前端渲染方案</h4><blockquote><p>骨架分支： feature/green/html</p></blockquote><ul><li>提供 egg 模板引擎 (<a href="https://github.com/eggjs/egg-view-nunjucks" target="_blank" rel="noopener">egg-view-nunjucks</a> 或 <a href="https://github.com/eggjs/egg-view-ejs" target="_blank" rel="noopener">egg-view-ejs</a>) + Webpack 完全自定义前端方案 <a href="/egg-react/html">/egg-react/html</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;br /&gt;

&lt;h2 id=&quot;发布历史&quot;&gt;&lt;a href=&quot;#发布历史&quot; class=&quot;headerlink&quot; title=&quot;发布历史&quot;&gt;&lt;/a&gt;发布历史&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/easy-team/egg-react-webpac
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>相关问题</title>
    <link href="https://easyjs.cn/egg-vue/about/"/>
    <id>https://easyjs.cn/egg-vue/about/</id>
    <published>2020-05-31T09:43:53.000Z</published>
    <updated>2020-05-31T09:43:53.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常见问题-issue-汇总"><a href="#常见问题-issue-汇总" class="headerlink" title="常见问题 issue 汇总"></a>常见问题 issue 汇总</h2><ul><li><a href="https://github.com/easy-team/egg-vue-webpack-boilerplate/issues/120" target="_blank" rel="noopener">服务端 SEO 设置问题 </a></li><li><a href="https://github.com/easy-team/egg-vue-webpack-boilerplate/issues/122" target="_blank" rel="noopener">文件打包部署问题</a></li></ul><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="Server-Side-Render-时，-mount节点重新渲染问题"><a href="#Server-Side-Render-时，-mount节点重新渲染问题" class="headerlink" title="Server Side Render 时，$mount节点重新渲染问题"></a>Server Side Render 时，$mount节点重新渲染问题</h2><p>see issue：<a href="https://github.com/easy-team/egg-vue-webpack-boilerplate/issues/125" target="_blank" rel="noopener">https://github.com/easy-team/egg-vue-webpack-boilerplate/issues/125</a></p><pre class=" language-javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token string">'app'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>改为<span class="token keyword">const</span> root <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'app'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> hydrate <span class="token operator">=</span> root<span class="token punctuation">.</span>childNodes<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> hydrate<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="自定义静态资源路径"><a href="#自定义静态资源路径" class="headerlink" title="自定义静态资源路径"></a>自定义静态资源路径</h2><p>在 Egg + Vue/React 解决方案中, Webpack publicPath 使用的是默认 <code>publicPath: &#39;/public/&#39;</code> 配置。</p><p>如果要修复默认的 publicPath，比如要修改 <code>/static/</code>，需要修改两个地方：</p><h4 id="首先版本要求"><a href="#首先版本要求" class="headerlink" title="首先版本要求"></a>首先版本要求</h4><ul><li><p>easywebpack: ^3.5.1</p></li><li><p>egg-webpack: ^3.2.5</p></li></ul><h4 id="配置修改"><a href="#配置修改" class="headerlink" title="配置修改"></a>配置修改</h4><ul><li>Webpack <code>webpack.config.js</code> 配置添加 <code>publicPath</code> 配置覆盖默认配置</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ${app_root}/webpack.config.js</span> module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    publicPath<span class="token punctuation">:</span> <span class="token string">'/static/'</span>   <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><ul><li>Egg 配置 <code>config.default.js</code> 添加静态资源</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ${app_root}/config/config.local.js</span> exports<span class="token punctuation">.</span><span class="token keyword">static</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    prefix<span class="token punctuation">:</span> <span class="token string">'/static/'</span><span class="token punctuation">,</span>    dir<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>baseDir<span class="token punctuation">,</span> <span class="token string">'public'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><ul><li>修改默认静态资源代理问题</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ${app_root}/config/config.local.js</span> exports<span class="token punctuation">.</span>webpack <span class="token operator">=</span> <span class="token punctuation">{</span>    proxy<span class="token punctuation">:</span> <span class="token punctuation">{</span>      match<span class="token punctuation">:</span><span class="token regex">/\/static\//</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>see <a href="https://github.com/easy-team/egg-vue-webpack-boilerplate/issues/80" target="_blank" rel="noopener">https://github.com/easy-team/egg-vue-webpack-boilerplate/issues/80</a></p><h2 id="禁用自动打开浏览器"><a href="#禁用自动打开浏览器" class="headerlink" title="禁用自动打开浏览器"></a>禁用自动打开浏览器</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ${app_root}/config/config.local.js</span>exports<span class="token punctuation">.</span>webpack <span class="token operator">=</span> <span class="token punctuation">{</span>  browser<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>通过 <a href="https://github.com/hubcarl/egg-webpack" target="_blank" rel="noopener">egg-webpack</a> 实现该功能，详细可以看插件具体文档。</p><h2 id="自定义浏览器地址"><a href="#自定义浏览器地址" class="headerlink" title="自定义浏览器地址"></a>自定义浏览器地址</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ${app_root}/config/config.local.js</span>exports<span class="token punctuation">.</span>webpack <span class="token operator">=</span> <span class="token punctuation">{</span>  browser<span class="token punctuation">:</span> <span class="token string">'http://localhost:7001'</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>通过 <a href="https://github.com/hubcarl/egg-webpack" target="_blank" rel="noopener">egg-webpack</a> 实现该功能，详细可以看插件具体文档。</p><h2 id="document-is-not-defined"><a href="#document-is-not-defined" class="headerlink" title="document is not defined"></a>document is not defined</h2><blockquote><p>ReferenceError: document is not defined</p></blockquote><p><a href="https://zhuanlan.zhihu.com/p/36233639" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/36233639</a></p><h2 id="其它问题"><a href="#其它问题" class="headerlink" title="其它问题"></a>其它问题</h2><p><a href="https://yuque.com/easy-team/easywebpack/problem" target="_blank" rel="noopener">https://yuque.com/easy-team/easywebpack/problem</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;常见问题-issue-汇总&quot;&gt;&lt;a href=&quot;#常见问题-issue-汇总&quot; class=&quot;headerlink&quot; title=&quot;常见问题 issue 汇总&quot;&gt;&lt;/a&gt;常见问题 issue 汇总&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://git
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>asset 渲染模式</title>
    <link href="https://easyjs.cn/egg-vue/asset/"/>
    <id>https://easyjs.cn/egg-vue/asset/</id>
    <published>2020-05-31T09:43:53.000Z</published>
    <updated>2020-05-31T09:43:53.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在 <a href="/egg-vue/web">前端渲染模式</a> 章节讲到了基于 Vue 的一体化的前端渲染模式，好处是不需要借助第三方模板引擎且无需关注静态资源注入问题，但有两个小的功能限制：</p><ul><li><p>layout 模板数据绑定能力较弱</p></li><li><p>资源注入不能自己定义，比如 async， crossorigin 等配置</p></li></ul><p>针对上面问题<a href="https://github.com/easy-team/egg-view-vue-ssr" target="_blank" rel="noopener"> egg-view-vue-ssr </a>(&gt;=3.2.0)扩展 <a href="https://github.com/easy-team/egg-view-vue-ssr/blob/master/app/extend/context.js#L8" target="_blank" rel="noopener">renderAsset</a> 方法支持基于 asset 的<strong>前端渲染模式</strong>，方便对 layout 进行定制和数据绑定。<br /></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ul><li>renderAsset 模式默认使用 egg-view-nunjucks 模板引擎对 layout 进行数据模板编译，你需要在项目 package.json 中同时安装 <a href="https://github.com/easy-team/egg-view-vue-ssr" target="_blank" rel="noopener">egg-view-vue-ssr</a> 和 <a href="https://github.com/eggjs/egg-view-nunjucks" target="_blank" rel="noopener">egg-view-nunjucks</a> 插件依赖。</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ${root}/package.json</span><span class="token punctuation">{</span>   <span class="token string">"dependencies"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>     <span class="token string">"egg-view-nunjucks"</span><span class="token punctuation">:</span> <span class="token string">"^2.2.0"</span><span class="token punctuation">,</span>     <span class="token string">"egg-view-vue-ssr"</span><span class="token punctuation">:</span> <span class="token string">"^3.2.0"</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>开启 <a href="https://github.com/eggjs/egg-view-nunjucks" target="_blank" rel="noopener">egg-view-nunjucks</a> 插件配置</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ${root}/config/plugin.js</span>exports<span class="token punctuation">.</span>vuessr <span class="token operator">=</span> <span class="token punctuation">{</span>  enable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token keyword">package</span><span class="token punctuation">:</span> <span class="token string">'egg-view-vue-ssr'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>exports<span class="token punctuation">.</span>nunjucks <span class="token operator">=</span> <span class="token punctuation">{</span>  enable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token keyword">package</span><span class="token punctuation">:</span> <span class="token string">'egg-view-nunjucks'</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><ul><li>配置 layout.html  模板</li></ul><blockquote><p>模板默认路径：${root}/app/view/layout.html， 你可以通过<a href="https://github.com/easy-team/egg-view-vue-ssr" target="_blank" rel="noopener"> egg-view-vue-ssr</a> 的 layout 属性配置指定模板位置。</p></blockquote><p>   <strong>渲染上下文暴露全局 asset 对象，参数如下：</strong></p><p><strong>asset.js</strong> { Array } 页面依赖的静态 JS 资源 URL 列表， 来自 <code>config/manifest.json</code> 具体见 <a href="/easywebpack/deps">资源依赖</a><br /><strong>asset.css</strong> { Array } 页面依赖的静态 JS 资源 URL 列表，来自<code>config/manifest.json</code>具体见 <a href="/easywebpack/deps">资源依赖</a><br /><strong>asset.state</strong> { Object } 页面渲染原始数据，用于 MV 框架初始化 state</p><p>以下就是基于 nunjucks 的语法的 layout 模板配置, 你可以根据指定渲染引擎编写 layout 文件。</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>en<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>{{title}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>keywords<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>description<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>content-type<span class="token punctuation">'</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>text/html;charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>viewport<span class="token punctuation">'</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>initial-scale<span class="token punctuation">=</span>1, maximum-scale<span class="token punctuation">=</span>1, user-scalable<span class="token punctuation">=</span>no, minimal-ui<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>shortcut icon<span class="token punctuation">'</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>/favicon.ico<span class="token punctuation">'</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>image/x-icon<span class="token punctuation">'</span></span> <span class="token punctuation">/></span></span>  {% for item in asset.css %}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>{{item}}<span class="token punctuation">'</span></span> <span class="token punctuation">/></span></span>  {% endfor %}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>app<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    window<span class="token punctuation">.</span>__INITIAL_STATE__ <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> asset<span class="token punctuation">.</span>state <span class="token operator">|</span> safe <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  {% for item in asset.js %}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{item}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  {% endfor %}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><ul><li>renderAsset  默认调用，使用 nunjucks 模板引擎</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> egg <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'egg'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">AdminController</span> <span class="token keyword">extends</span> <span class="token class-name">egg<span class="token punctuation">.</span>Controller</span> <span class="token punctuation">{</span>  <span class="token keyword">async</span> <span class="token function">home</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">await</span> ctx<span class="token punctuation">.</span><span class="token function">renderAsset</span><span class="token punctuation">(</span><span class="token string">'admin.js'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> title<span class="token punctuation">:</span> <span class="token string">'egg-vue-asset'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>renderAsset 自定义模板引擎（支持两种方式, 注意要安装指定模板引擎)</li></ul><blockquote><ol><li>可以通过 <a href="https://github.com/easy-team/egg-view-vue-ssr" target="_blank" rel="noopener">egg-view-vue-ssr</a> 的 viewEngine  配置全局渲染引擎</li></ol></blockquote><blockquote><ol start="2"><li>通过 renderAsset 的第三个参数 viewEngine 配置对应渲染引擎，只在当前渲染生效</li></ol></blockquote><blockquote></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> egg <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'egg'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">AdminController</span> <span class="token keyword">extends</span> <span class="token class-name">egg<span class="token punctuation">.</span>Controller</span> <span class="token punctuation">{</span>  <span class="token keyword">async</span> <span class="token function">home</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 使用 ejs 引擎，注意项目请安装 https://github.com/eggjs/egg-view-ejs 依赖</span>    <span class="token keyword">await</span> ctx<span class="token punctuation">.</span><span class="token function">renderAsset</span><span class="token punctuation">(</span><span class="token string">'admin.js'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> title<span class="token punctuation">:</span> <span class="token string">'egg-vue-asset'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> viewEngine<span class="token punctuation">:</span> <span class="token string">'ejs'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="骨架项目"><a href="#骨架项目" class="headerlink" title="骨架项目"></a>骨架项目</h2><p><a href="https://github.com/easy-team/egg-vue-webpack-boilerplate/tree/feature/green/asset" target="_blank" rel="noopener">https://github.com/easy-team/egg-vue-webpack-boilerplate/tree/feature/green/asset</a></p><h2 id="参考实现"><a href="#参考实现" class="headerlink" title="参考实现"></a>参考实现</h2><p><a href="https://github.com/eggjs/egg-view-assets" target="_blank" rel="noopener">https://github.com/eggjs/egg-view-assets</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;在 &lt;a href=&quot;/egg-vue/web&quot;&gt;前端渲染模式&lt;/a&gt; 章节讲到了基于 Vue 的一体化的前端渲染模式，好处是不需要借助第三
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>异步加载</title>
    <link href="https://easyjs.cn/egg-vue/async/"/>
    <id>https://easyjs.cn/egg-vue/async/</id>
    <published>2020-05-31T09:43:53.000Z</published>
    <updated>2020-05-31T09:43:53.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Component-Async-Load-Render-组件异步加载渲染"><a href="#Component-Async-Load-Render-组件异步加载渲染" class="headerlink" title="Component Async Load Render / 组件异步加载渲染"></a>Component Async Load Render / 组件异步加载渲染</h2><h3 id="1-JavaScript-File-Code-Spliting-代码分离"><a href="#1-JavaScript-File-Code-Spliting-代码分离" class="headerlink" title="1. JavaScript File Code Spliting 代码分离"></a>1. JavaScript File Code Spliting 代码分离</h3><p>Webpack打包是把所有js代码打成一个js文件，我们可以通过 <code>CommonsChunkPlugin</code> 分离出公共组件，但这远远不够。 实际业务开发时，一些主要页面内容往往比较多， 而且会引入第三方组件或者监控脚本。其中有些内容的展示不再首屏或者监控脚本等对用户不是那么重要的脚本我们可以通过 <code>require.ensure</code> 代码分离延迟加载。在webpack在构建时，解析到<code>require.ensure</code> 时，会单独针对引入的js资源单独构建出chunk文件，这样就能从主js文件里面分离出来。 然后页面加载完后， 通过script标签的方式动态插入到文档中。</p><p>require.ensure 使用方式， 第三个参数是指定生产的 chunk 文件名，不设置时是用数字编号代理。相同 require.ensure 只会生产一个chunk文件。</p><pre class=" language-javascript"><code class="language-javascript">require<span class="token punctuation">.</span><span class="token function">ensure</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'swiper'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>   <span class="token keyword">const</span> Swiper <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'swiper'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token operator">...</span><span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">'swiper'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="2-Vue-Component-Code-Spliting-代码分离"><a href="#2-Vue-Component-Code-Spliting-代码分离" class="headerlink" title="2. Vue Component Code Spliting 代码分离"></a>2. Vue Component Code Spliting 代码分离</h3><p>异步加载 Vue 组件(.vue) 已在 Vue 2.5+ 版本支持，包括路由异步加载和非路由异步加载。在具体实现时，我们可以通过 <code>import(filepath)</code> 加载组件。</p><p><code>import()</code> 方案已经列入 <a href="https://github.com/tc39/proposal-dynamic-import" target="_blank" rel="noopener">ECMAScript提案</a>，虽然在提案阶段，但 Webpack 已经支持了该特性。import() 返回的 Promise，通过注释 webpackChunkName 指定生成的 chunk 名称。 Webpack 构建时会独立的 chunkjs 文件，然后在客户端动态插入组件，chunk 机制与 require.ensure 一样。有了动态加载的方案，可以减少服务端渲染 jsbundle 文件的大小，页面 Vue 组件模块也可以按需加载。</p><pre class=" language-javascript"><code class="language-javascript">Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'async-swiper'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 通过注释webpackChunkName 指定生成的chunk名称</span>  <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token comment" spellcheck="true">/* webpackChunkName: "asyncSwiper" */</span> <span class="token string">'./AsyncSwiper.js'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>AsyncSwiper<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token function">resolve</span><span class="token punctuation">(</span>AsyncSwiper<span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>p<span class="token operator">></span>Vue dynamic component load<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token keyword">async</span><span class="token operator">-</span>swiper<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">async</span><span class="token operator">-</span>swiper<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></code></pre><h3 id="3-Egg-Vue-SSR-Vue-Component-Code-Spliting"><a href="#3-Egg-Vue-SSR-Vue-Component-Code-Spliting" class="headerlink" title="3. Egg + Vue SSR Vue Component Code Spliting"></a>3. Egg + Vue SSR Vue Component Code Spliting</h3><h4 id="3-1-easywebpack-vue-版本要求"><a href="#3-1-easywebpack-vue-版本要求" class="headerlink" title="3.1 easywebpack-vue 版本要求"></a>3.1 easywebpack-vue 版本要求</h4><ul><li>easywebpack-vue: ^3.5.1</li></ul><p>构建适配 <code>vue-server-renderer</code> 异步渲染查找 <code>chunk</code> 文件逻辑。这里直接把 <code>chunk</code> 文件构建到 <code>app/view/node_modules</code> 下面, 这样异步渲染才能找到该文件。</p><h4 id="3-2-项目添加-egg-view-vue-ssr-插件参数配置"><a href="#3-2-项目添加-egg-view-vue-ssr-插件参数配置" class="headerlink" title="3.2 项目添加 egg-view-vue-ssr 插件参数配置"></a>3.2 项目添加 egg-view-vue-ssr 插件参数配置</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> app <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> exports <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  exports<span class="token punctuation">.</span>vuessr <span class="token operator">=</span> <span class="token punctuation">{</span>    renderOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 告诉 vue-server-renderer 去 app/view 查找异步 chunk 文件</span>      basedir<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>baseDir<span class="token punctuation">,</span> <span class="token string">'app/view'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> exports<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><a href="https://github.com/hubcarl/egg-vue-webpack-boilerplate/blob/master/config/config.default.js" target="_blank" rel="noopener">config/config.default.js</a></p><h4 id="3-3-动态加载举例"><a href="#3-3-动态加载举例" class="headerlink" title="3.3 动态加载举例"></a>3.3 动态加载举例</h4><p><a href="https://github.com/easy-team/egg-vue-webpack-boilerplate/blob/webpack3/app/web/page/dynamic/dynamic.vue" target="_blank" rel="noopener">app/web/page/dynamic/dynamic.vue</a></p><h4 id="3-4-ReferenceError-document-is-not-defined"><a href="#3-4-ReferenceError-document-is-not-defined" class="headerlink" title="3.4 ReferenceError: document is not defined"></a>3.4 ReferenceError: document is not defined</h4><p><a href="https://zhuanlan.zhihu.com/p/36233639" target="_blank" rel="noopener">ReferenceError: document/window is not defined</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Component-Async-Load-Render-组件异步加载渲染&quot;&gt;&lt;a href=&quot;#Component-Async-Load-Render-组件异步加载渲染&quot; class=&quot;headerlink&quot; title=&quot;Component Async Load
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Babel 构建优化</title>
    <link href="https://easyjs.cn/egg-vue/babel/"/>
    <id>https://easyjs.cn/egg-vue/babel/</id>
    <published>2020-05-31T09:43:53.000Z</published>
    <updated>2020-05-31T09:43:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>在进行 Egg + Vue 进行 SSR 模式开发时，运行 <code>npm run dev</code>  后你会看到如下界面， 启动了两个 Webpack 构建实例：Node 模式 和 Web 模式。SSR 运行需要 Webapck 单独构建 <code>target: node</code>   和 <code>target: web</code>  主要的差异在于 Webpack需要处理 require 机制以及磨平 Node 和 浏览器运行环境的差异。</p><p><img src="https://cdn.nlark.com/yuque/0/2018/png/116733/1536128449742-0024eb69-d2c7-4e47-8426-ff2cc85396d5.png#width=827" alt=""></p><p>在 <code>easywebpack</code> 4.6.0 以下 SSR 版本构建方案实现时，Node 和 Web 模式采用的是一份 <code>.babelrc</code>  配置，这样导致构建的后代码全部变成 es5。 但 Node 现在LTS 版本已经是 8 了，而且 10 也在开发，不久将会发布。这样导致 Node 端构建的代码没有用到 ES6 的特性，我们期望根据 Node 版本构建指定 ES 模式代码，这样可以带来两个好处：</p><h2 id="easywebpack-4-6-0-以下-babelrc-配置"><a href="#easywebpack-4-6-0-以下-babelrc-配置" class="headerlink" title="easywebpack 4.6.0 以下.babelrc  配置"></a>easywebpack 4.6.0 以下<code>.babelrc</code>  配置</h2><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"presets"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"env"</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token property">"modules"</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"plugins"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"transform-object-rest-spread"</span><span class="token punctuation">,</span>    <span class="token string">"syntax-dynamic-import"</span><span class="token punctuation">,</span>    <span class="token string">"transform-object-assign"</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"comments"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span></code></pre><ul><li><p>Node 端运行的 ES6 模块更好的执行效率</p></li><li><p>Node 端编译成 ES6，可以减小构建好的 JSBundle 文件大小和编译转换时间，同时带来更好的文件读取效率和执行效率。</p></li></ul><h2 id="easywebpack-4-7-0-支持-Node-和-Web-指定-ES-模式构建"><a href="#easywebpack-4-7-0-支持-Node-和-Web-指定-ES-模式构建" class="headerlink" title="easywebpack 4.7.0+ 支持 Node 和 Web 指定 ES 模式构建"></a>easywebpack 4.7.0+ 支持 Node 和 Web 指定 ES 模式构建</h2><blockquote><p>注意： 升级 babel 7 后，不支持如下 env 方式配置 </p></blockquote><p><strong>关键措施：</strong> <a href="https://www.babeljs.cn/docs/usage/babelrc/" target="_blank" rel="noopener">bable 本身支持通过 process.env.BABEL_ENV  加载 .babelrc  配置文件</a>:</p><p><img src="https://cdn.nlark.com/yuque/0/2018/png/116733/1536129170471-43b9b60e-a7da-47c3-8ad7-ef1ff7e56c22.png#width=827" alt=""></p><p><strong>如果.babelrc</strong><code>**   配置了 `env.node`  或者 `env.web`  节点配置，easywebpack 底层将自动设置  **[process.env.BABEL_ENV](https://www.babeljs.cn/docs/usage/babelrc/)** 变量， 启动 BABEL ENV 编译机制。easywebpack 底层支持  **[process.env.BABEL_ENV](https://www.babeljs.cn/docs/usage/babelrc/)** 支持  node 和 web 的 env  .babelrc**</code>**   节点配置。 另外关键的 target 配置：**</p><ul><li><p><code>target.node</code> :  Node 环境编译模式，可以是指定版本，比如配置：8.9.3，也可以配置当前运行的node版本：current。</p></li><li><p><code>target.browsers</code> : Web 浏览器编译模式，可以配置浏览器的版本等</p></li></ul><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"env"</span><span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token property">"node"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"presets"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"env"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        <span class="token property">"modules"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        <span class="token property">"targets"</span><span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"node"</span><span class="token operator">:</span> <span class="token string">"current"</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token property">"plugins"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token string">"transform-object-rest-spread"</span><span class="token punctuation">,</span>        <span class="token string">"syntax-dynamic-import"</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"web"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"presets"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"env"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        <span class="token property">"modules"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        <span class="token property">"targets"</span><span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"browsers"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"last 2 versions"</span><span class="token punctuation">,</span> <span class="token string">"safari >= 7"</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token property">"plugins"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token string">"transform-object-rest-spread"</span><span class="token punctuation">,</span>        <span class="token string">"syntax-dynamic-import"</span><span class="token punctuation">,</span>        <span class="token string">"transform-object-assign"</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"comments"</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">}</span></code></pre><h2 id="构建效率和大小"><a href="#构建效率和大小" class="headerlink" title="构建效率和大小"></a>构建效率和大小</h2><p>合理的使用 BABEL 编译模式，能够极大提高构建速度和JS 文件大小。 通过测试，启用 BABEL_ENV 模式和合理的配置 targets.browsers 参数，对于大型的页面，能够显著提升构建速度。下面通过 <code>easy build prod</code>  针对 <a href="https://github.com/hubcarl/egg-vue-webpack-boilerplate" target="_blank" rel="noopener">https://github.com/hubcarl/egg-vue-webpack-boilerplate</a> 测试的效果，页面比较简单，效果不明显。</p><table><thead><tr><th><strong>模式</strong></th><th><strong>构建大小(app/app.js)</strong></th></tr></thead><tbody><tr><td>不启用BABEL按需编译</td><td>15.6 KiB</td></tr><tr><td>启用BABEL按需编译</td><td>15.2 KiB</td></tr><tr><td></td><td></td></tr></tbody></table><h2 id="Babel-7-升级"><a href="#Babel-7-升级" class="headerlink" title="Babel 7 升级"></a>Babel 7 升级</h2><p><a href="/easywebpack/babel7">/easywebpack/babel7</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在进行 Egg + Vue 进行 SSR 模式开发时，运行 &lt;code&gt;npm run dev&lt;/code&gt;  后你会看到如下界面， 启动了两个 Webpack 构建实例：Node 模式 和 Web 模式。SSR 运行需要 Webapck 单独构建 &lt;code&gt;target
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>配置说明</title>
    <link href="https://easyjs.cn/egg-vue/config/"/>
    <id>https://easyjs.cn/egg-vue/config/</id>
    <published>2020-05-31T09:43:53.000Z</published>
    <updated>2020-05-31T09:43:53.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="webpack-config-js"><a href="#webpack-config-js" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h2><p><a href="mailto:easywebpack@4.8.0">easywebpack@4.8.0</a> 开始支持，因为有了默认配置，所以最新的骨架项目中，webpack.config.js 文件为非必须配置。</p><p>使用 <a href="https://github.com/isaacs/node-glob" target="_blank" rel="noopener">node-glob</a> 遍历文件。下面配置会自动遍历 <code>app/web/page</code>  目录的所有 .vue 文件作为 entry 入口，排除 <code>component|components|view|views</code> 目录下的文件。 这个是 <a href="https://github.com/hubcarl/egg-vue-webpack-boilerplate" target="_blank" rel="noopener">egg vue ssr </a> 项目默认配置,  同时使用 <a href="https://github.com/hubcarl/vue-entry-loader" target="_blank" rel="noopener">vue-entry-loader</a>  作为模板入口。 <strong>注意：只有 entry 文件是 .vue 文件(非.js）时，才会自动使用 **<a href="https://github.com/hubcarl/vue-entry-loader" target="_blank" rel="noopener">vue-entry-loader</a></strong> 模板。**</p><ul><li><strong>统一使用 .vue 文件作为 entry 入口(easywebpack 默认配置)</strong></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// webpack.config.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 注意 只有 entry 文件是 .vue 文件(非.js）时，才会自动使用 vue-entry-loader模板</span>  entry<span class="token punctuation">:</span> <span class="token string">'app/web/page/**!(component|components|view|views)/*.vue'</span><span class="token punctuation">}</span></code></pre><ul><li><strong>js  和 .vue 文件 entry 混合配置</strong></li></ul><pre class=" language-bash"><code class="language-bash">module.exports <span class="token operator">=</span> <span class="token punctuation">{</span>  entry: <span class="token punctuation">{</span>    app: <span class="token string">'app/web/page/app/index.js'</span>,   // js 文件需要自己实现 vue mouted 逻辑    list: <span class="token string">'app/web/page/list/index.vue'</span> // 自动使用 vue-entry-loader模板  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><ul><li>自定义 entry 代码模板</li></ul><p><a href="/easywebpack/entry">/easywebpack/entry</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;webpack-config-js&quot;&gt;&lt;a href=&quot;#webpack-config-js&quot; class=&quot;headerlink&quot; title=&quot;webpack.config.js&quot;&gt;&lt;/a&gt;webpack.config.js&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;m
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>i18n 国际化支持</title>
    <link href="https://easyjs.cn/egg-vue/i18n/"/>
    <id>https://easyjs.cn/egg-vue/i18n/</id>
    <published>2020-05-31T09:43:53.000Z</published>
    <updated>2020-05-31T09:43:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>在 Egg + Vue  SSR 方案中，可以使用<a href="https://github.com/kazupon/vue-i18n" target="_blank" rel="noopener"> vue-i18n</a> 实现国际化支持， 使用前请先阅读以下文档：</p><ul><li><p><a href="http://kazupon.github.io/vue-i18n/guide/started.html#html" target="_blank" rel="noopener">http://kazupon.github.io/vue-i18n/guide/started.html#html</a></p></li><li><p><a href="http://kazupon.github.io/vue-i18n/guide/started.html#javascript" target="_blank" rel="noopener">http://kazupon.github.io/vue-i18n/guide/started.html#javascript</a></p></li></ul><h2 id="Egg-Vue-实现国际化"><a href="#Egg-Vue-实现国际化" class="headerlink" title="Egg + Vue 实现国际化"></a>Egg + Vue 实现国际化</h2><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> vue-i18n --save</code></pre><h2 id="编写-cn-和-en-语言文件"><a href="#编写-cn-和-en-语言文件" class="headerlink" title="编写 cn 和 en 语言文件"></a>编写 cn 和 en 语言文件</h2><ul><li>中文配置：egg-vue-webpack-boilerplate/app/web/framework/i18n/cn.js</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  menu<span class="token punctuation">:</span> <span class="token punctuation">{</span>    server<span class="token punctuation">:</span> <span class="token string">'服务端渲染'</span><span class="token punctuation">,</span>    client<span class="token punctuation">:</span> <span class="token string">'前端渲染'</span><span class="token punctuation">,</span>    dynamic<span class="token punctuation">:</span> <span class="token string">'动态渲染'</span><span class="token punctuation">,</span>    element<span class="token punctuation">:</span> <span class="token string">'Element'</span><span class="token punctuation">,</span>    single<span class="token punctuation">:</span> <span class="token string">'单页面'</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  lang<span class="token punctuation">:</span> <span class="token punctuation">{</span>    href<span class="token punctuation">:</span> <span class="token string">'/?locale=en'</span><span class="token punctuation">,</span>    text<span class="token punctuation">:</span> <span class="token string">'切换英文版'</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><ul><li>英文配置：egg-vue-webpack-boilerplate/app/web/framework/i18n/en.js</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  menu<span class="token punctuation">:</span> <span class="token punctuation">{</span>    server<span class="token punctuation">:</span> <span class="token string">'Server'</span><span class="token punctuation">,</span>    client<span class="token punctuation">:</span> <span class="token string">'Client'</span><span class="token punctuation">,</span>    dynamic<span class="token punctuation">:</span> <span class="token string">'Dynamic'</span><span class="token punctuation">,</span>    element<span class="token punctuation">:</span> <span class="token string">'Element'</span><span class="token punctuation">,</span>    single<span class="token punctuation">:</span> <span class="token string">'SPA'</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  lang<span class="token punctuation">:</span> <span class="token punctuation">{</span>    href<span class="token punctuation">:</span> <span class="token string">'/?locale=cn'</span><span class="token punctuation">,</span>    text<span class="token punctuation">:</span> <span class="token string">'Switch Chinese'</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><ul><li>编写 i18n 入口文件：egg-vue-webpack-boilerplate/app/web/framework/i18n/index.js</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> VueI18n <span class="token keyword">from</span> <span class="token string">'vue-i18n'</span><span class="token punctuation">;</span><span class="token keyword">import</span> cn <span class="token keyword">from</span> <span class="token string">'./cn'</span><span class="token punctuation">;</span><span class="token keyword">import</span> en <span class="token keyword">from</span> <span class="token string">'./en'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">createI18n</span><span class="token punctuation">(</span>locale<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">VueI18n</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    locale<span class="token punctuation">,</span>    messages<span class="token punctuation">:</span> <span class="token punctuation">{</span>      en<span class="token punctuation">,</span>      cn    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="页面注册"><a href="#页面注册" class="headerlink" title="页面注册"></a>页面注册</h2><ul><li><a href="https://github.com/easy-team/egg-vue-webpack-boilerplate/blob/4.3.0/app/web/framework/vue/entry/server.js" target="_blank" rel="noopener">服务端渲染注册</a></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> context <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// locale 是从 Node 端传递过来的配置参数，用于加载指定语言文件</span>    <span class="token keyword">const</span> i18n <span class="token operator">=</span> <span class="token function">createI18n</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>state<span class="token punctuation">.</span>locale<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> VueApp <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span> data<span class="token punctuation">:</span> context<span class="token punctuation">.</span>state<span class="token punctuation">,</span> i18n <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>resolve <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token function">resolve</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li><a href="https://github.com/easy-team/egg-vue-webpack-boilerplate/blob/4.3.0/app/web/framework/vue/entry/client.js" target="_blank" rel="noopener">前端渲染注册</a></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span> i18n <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span></code></pre><h2 id="Egg-中间件统一处理"><a href="#Egg-中间件统一处理" class="headerlink" title="Egg 中间件统一处理"></a>Egg 中间件统一处理</h2><ul><li><a href="https://github.com/easy-team/egg-vue-webpack-boilerplate/blob/4.3.0/app/middleware/locals.js" target="_blank" rel="noopener">编写中间件</a>，从 url 获取切换语言标记 locale，然后设置给  <code>ctx.locals</code>  (egg-view-vue-ssr 渲染时，会统一合并 locals)</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//${root}/app/middleware/locals.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">locale</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>    ctx<span class="token punctuation">.</span>locals<span class="token punctuation">.</span>locale <span class="token operator">=</span> ctx<span class="token punctuation">.</span>query<span class="token punctuation">.</span>locale <span class="token operator">||</span> <span class="token string">'cn'</span><span class="token punctuation">;</span>    <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><ul><li>开启locals中间件</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//${root}/config/config.default.js</span>exports<span class="token punctuation">.</span>middleware <span class="token operator">=</span> <span class="token punctuation">[</span>   <span class="token string">'locals'</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><h2 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h2><ul><li><p><a href="https://github.com/easy-team/egg-vue-webpack-boilerplate/issues/83" target="_blank" rel="noopener">https://github.com/easy-team/egg-vue-webpack-boilerplate/issues/83</a></p></li><li><p><a href="http://kazupon.github.io/vue-i18n/guide/started.html#html" target="_blank" rel="noopener">http://kazupon.github.io/vue-i18n/guide/started.html#html</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在 Egg + Vue  SSR 方案中，可以使用&lt;a href=&quot;https://github.com/kazupon/vue-i18n&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt; vue-i18n&lt;/a&gt; 实现国际化支持， 使用前请先阅读以下文档：
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>自定义前端渲染</title>
    <link href="https://easyjs.cn/egg-vue/fls9r6/"/>
    <id>https://easyjs.cn/egg-vue/fls9r6/</id>
    <published>2020-05-31T09:43:53.000Z</published>
    <updated>2020-05-31T09:43:53.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在 <a href="/egg-react/web">前端渲染模式</a> 和 <a href="/egg-react/web">asset 渲染模式</a> 章节讲到了基于 React 的前端渲染模式，但都依赖  <a href="https://github.com/easy-team/egg-view-react-ssr" target="_blank" rel="noopener">egg-view-react-ssr</a> 插件，那如何基于已有 egg 模板引擎 (<a href="https://github.com/eggjs/egg-view-nunjucks" target="_blank" rel="noopener">egg-view-nunjucks</a> 或 <a href="https://github.com/eggjs/egg-view-ejs" target="_blank" rel="noopener">egg-view-ejs</a>) + Webpack 完全自定义前端方案呢？</p><h2 id="关键问题"><a href="#关键问题" class="headerlink" title="关键问题"></a>关键问题</h2><ul><li>本地开发 Webpack 与 Egg 集成，可以直接使用 <a href="/blog/wumyiw">egg-webpack</a>， 该插件可以独立使用, 当然你可以实现。</li><li>通过 <a href="https://github.com/eggjs/egg-view-nunjucks" target="_blank" rel="noopener">egg-view-nunjucks</a> 或 <a href="https://github.com/eggjs/egg-view-ejs" target="_blank" rel="noopener">egg-view-ejs</a> 插件进行数据绑定</li><li>通过 <code>html-webpack-plugin</code>  插件生成 HTML 文件，并自动注入 JS/CSS 依赖</li><li>本地开发时，需要通过 <code>write-file-webpack-plugin</code>  插件把 Webpack HTML 文件写到本地。Webpack 默认是在内存里面，无法直接读取。</li></ul><h2 id="如何实现"><a href="#如何实现" class="headerlink" title="如何实现"></a>如何实现</h2><blockquote><p>这里以 <a href="https://github.com/eggjs/egg-view-nunjucks" target="_blank" rel="noopener">egg-view-nunjucks</a> 为例，其它模板引擎类似。</p></blockquote><ul><li>安装 <a href="https://github.com/eggjs/egg-view-nunjucks" target="_blank" rel="noopener">egg-view-nunjucks</a> 插件依赖</li></ul><p><code>npm install egg-view-nunjucks --save</code> <br /><code>npm install egg-webpack --save-dev</code></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ${root}/package.json</span><span class="token punctuation">{</span>   <span class="token string">"dependencies"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>     <span class="token string">"egg-webpack"</span><span class="token punctuation">:</span> <span class="token string">"^4.0.0"</span><span class="token punctuation">,</span>     <span class="token string">"egg-view-nunjucks"</span><span class="token punctuation">:</span> <span class="token string">"^2.2.0"</span><span class="token punctuation">,</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>开启 <a href="https://github.com/eggjs/egg-view-nunjucks" target="_blank" rel="noopener">egg-view-nunjucks</a> 插件配置<br /></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ${root}/config/plugin.local.js</span>exports<span class="token punctuation">.</span>webpack <span class="token operator">=</span> <span class="token punctuation">{</span>  enable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token keyword">package</span><span class="token punctuation">:</span> <span class="token string">'egg-webpack'</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ${root}/config/plugin.js</span>exports<span class="token punctuation">.</span>nunjucks <span class="token operator">=</span> <span class="token punctuation">{</span>  enable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token keyword">package</span><span class="token punctuation">:</span> <span class="token string">'egg-view-nunjucks'</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><ul><li>配置 layout.tpl  模板<br /></li></ul><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>en<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>{{title}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>keywords<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>description<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>content-type<span class="token punctuation">'</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>text/html;charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>viewport<span class="token punctuation">'</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>initial-scale<span class="token punctuation">=</span>1, maximum-scale<span class="token punctuation">=</span>1, user-scalable<span class="token punctuation">=</span>no, minimal-ui<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>shortcut icon<span class="token punctuation">'</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>/favicon.ico<span class="token punctuation">'</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>image/x-icon<span class="token punctuation">'</span></span> <span class="token punctuation">/></span></span>  <span class="token comment" spellcheck="true">&lt;!-- html-webpack-plugin 自动注入 css --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>app<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    window<span class="token punctuation">.</span>__INITIAL_STATE__ <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- html-webpack-plugin 自动注入 js --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><ul><li>配置默认渲染引擎</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ${root}/config/local.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> app <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> exports <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  exports<span class="token punctuation">.</span>webpack <span class="token operator">=</span> <span class="token punctuation">{</span>    webpackConfigList<span class="token punctuation">:</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'easywebpack-react'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getWebpackConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> exports<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// ${root}/config/default.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> app <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> exports <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  exports<span class="token punctuation">.</span>view <span class="token operator">=</span> <span class="token punctuation">{</span>    defaultViewEngine<span class="token punctuation">:</span> <span class="token string">'nunjucks'</span><span class="token punctuation">,</span>    mapping<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token string">'.tpl'</span><span class="token punctuation">:</span> <span class="token string">'nunjucks'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> exports<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>render默认调用，使用 nunjucks 模板引擎<br /></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> egg <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'egg'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">AppController</span> <span class="token keyword">extends</span> <span class="token class-name">egg<span class="token punctuation">.</span>Controller</span> <span class="token punctuation">{</span>  <span class="token keyword">async</span> <span class="token function">home</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">await</span> ctx<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'layout.tpl'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> title<span class="token punctuation">:</span> <span class="token string">'自定义渲染'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>webpack.config.js 配置 <blockquote><p>该配置基于 easywebpack 配置，如果要用原生 webpack 请参考：<a href="/blog/wumyiw">/blog/wumyiw</a></p></blockquote></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  egg<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  target<span class="token punctuation">:</span> <span class="token string">'web'</span><span class="token punctuation">,</span>  entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>    app<span class="token punctuation">:</span> <span class="token string">'app/web/page/app/app.js'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>     <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      chunks<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'runtime'</span><span class="token punctuation">,</span><span class="token string">'common'</span><span class="token punctuation">,</span> <span class="token string">'app'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      filename<span class="token punctuation">:</span> <span class="token string">'../view/app.tpl'</span><span class="token punctuation">,</span>      template<span class="token punctuation">:</span> <span class="token string">'./app/web/view/layout.tpl'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      chunks<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'runtime'</span><span class="token punctuation">,</span><span class="token string">'common'</span><span class="token punctuation">,</span> <span class="token string">'test'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      filename<span class="token punctuation">:</span> <span class="token string">'../view/test.tpl'</span><span class="token punctuation">,</span>      template<span class="token punctuation">:</span> <span class="token string">'./app/web/view/layout.tpl'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="依赖插件"><a href="#依赖插件" class="headerlink" title="依赖插件"></a>依赖插件</h2><ul><li><a href="/blog/wumyiw">egg-webpack</a></li><li><a href="https://github.com/eggjs/egg-view-nunjucks" target="_blank" rel="noopener">egg-view-nunjucks</a> </li><li><a href="https://github.com/gajus/write-file-webpack-plugin" target="_blank" rel="noopener">write-file-webpack-plugin</a></li><li><a href="https://github.com/jantimon/html-webpack-plugin" target="_blank" rel="noopener">html-webpack-plugin</a></li></ul><h2 id="骨架项目"><a href="#骨架项目" class="headerlink" title="骨架项目"></a>骨架项目</h2><p><a href="https://github.com/easy-team/egg-react-webpack-boilerplate/tree/feature/green/html" target="_blank" rel="noopener">https://github.com/easy-team/egg-react-webpack-boilerplate/tree/feature/green/html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;在 &lt;a href=&quot;/egg-react/web&quot;&gt;前端渲染模式&lt;/a&gt; 和 &lt;a href=&quot;/egg-react/web&quot;&gt;asset
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>HTML前端渲染</title>
    <link href="https://easyjs.cn/egg-vue/html/"/>
    <id>https://easyjs.cn/egg-vue/html/</id>
    <published>2020-05-31T09:43:53.000Z</published>
    <updated>2020-05-31T09:43:53.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在 <a href="/egg-vue/web">前端渲染模式</a> 和 <a href="/egg-vue/web">asset 渲染模式</a> 章节讲到了基于 React 的前端渲染模式，但都依赖  <a href="https://github.com/easy-team/egg-view-vue-ssr" target="_blank" rel="noopener">egg-view-react-ssr</a> 插件，那如何基于已有 egg 模板引擎 (<a href="https://github.com/eggjs/egg-view-nunjucks" target="_blank" rel="noopener">egg-view-nunjucks</a> 或 <a href="https://github.com/eggjs/egg-view-ejs" target="_blank" rel="noopener">egg-view-ejs</a>) + Webpack 完全自定义前端方案呢？</p><h2 id="关键问题"><a href="#关键问题" class="headerlink" title="关键问题"></a>关键问题</h2><ul><li>本地开发 Webpack 与 Egg 集成，可以直接使用 <a href="/blog/wumyiw">egg-webpack</a>， 该插件可以独立使用, 当然你可以实现。</li><li>通过 <a href="https://github.com/eggjs/egg-view-nunjucks" target="_blank" rel="noopener">egg-view-nunjucks</a> 或 <a href="https://github.com/eggjs/egg-view-ejs" target="_blank" rel="noopener">egg-view-ejs</a> 插件进行数据绑定</li><li>通过 <code>html-webpack-plugin</code>  插件生成 HTML 文件，并自动注入 JS/CSS 依赖</li><li>本地开发时，需要通过 <code>write-file-webpack-plugin</code>  插件把 Webpack HTML 文件写到本地。Webpack 默认是在内存里面，无法直接读取。</li></ul><h2 id="如何实现"><a href="#如何实现" class="headerlink" title="如何实现"></a>如何实现</h2><blockquote><p>这里以 <a href="https://github.com/eggjs/egg-view-nunjucks" target="_blank" rel="noopener">egg-view-nunjucks</a> 为例，其它模板引擎类似。</p></blockquote><ul><li>安装 <a href="https://github.com/eggjs/egg-view-nunjucks" target="_blank" rel="noopener">egg-view-nunjucks</a> 插件依赖</li></ul><p><code>npm install egg-view-nunjucks --save</code> <br /><code>npm install egg-webpack --save-dev</code></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ${root}/package.json</span><span class="token punctuation">{</span>   <span class="token string">"dependencies"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>     <span class="token string">"egg-webpack"</span><span class="token punctuation">:</span> <span class="token string">"^4.0.0"</span><span class="token punctuation">,</span>     <span class="token string">"egg-view-nunjucks"</span><span class="token punctuation">:</span> <span class="token string">"^2.2.0"</span><span class="token punctuation">,</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>开启 <a href="https://github.com/eggjs/egg-view-nunjucks" target="_blank" rel="noopener">egg-view-nunjucks</a> 插件配置</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ${root}/config/plugin.local.js</span>exports<span class="token punctuation">.</span>webpack <span class="token operator">=</span> <span class="token punctuation">{</span>  enable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token keyword">package</span><span class="token punctuation">:</span> <span class="token string">'egg-webpack'</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ${root}/config/plugin.js</span>exports<span class="token punctuation">.</span>nunjucks <span class="token operator">=</span> <span class="token punctuation">{</span>  enable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token keyword">package</span><span class="token punctuation">:</span> <span class="token string">'egg-view-nunjucks'</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><ul><li>配置 layout.tpl  模板</li></ul><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>en<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>{{title}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>keywords<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>description<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>content-type<span class="token punctuation">'</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>text/html;charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>viewport<span class="token punctuation">'</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>initial-scale<span class="token punctuation">=</span>1, maximum-scale<span class="token punctuation">=</span>1, user-scalable<span class="token punctuation">=</span>no, minimal-ui<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>shortcut icon<span class="token punctuation">'</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>/favicon.ico<span class="token punctuation">'</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>image/x-icon<span class="token punctuation">'</span></span> <span class="token punctuation">/></span></span>  <span class="token comment" spellcheck="true">&lt;!-- html-webpack-plugin 自动注入 css --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>app<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    window<span class="token punctuation">.</span>__INITIAL_STATE__ <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- html-webpack-plugin 自动注入 js --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><ul><li>配置默认渲染引擎</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ${root}/config/local.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> app <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> exports <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  exports<span class="token punctuation">.</span>webpack <span class="token operator">=</span> <span class="token punctuation">{</span>    webpackConfigList<span class="token punctuation">:</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'@easy-team/easywebpack-vue'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getWebpackConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> exports<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// ${root}/config/default.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> app <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> exports <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  exports<span class="token punctuation">.</span>view <span class="token operator">=</span> <span class="token punctuation">{</span>    defaultViewEngine<span class="token punctuation">:</span> <span class="token string">'nunjucks'</span><span class="token punctuation">,</span>    mapping<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token string">'.tpl'</span><span class="token punctuation">:</span> <span class="token string">'nunjucks'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> exports<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>render默认调用，使用 nunjucks 模板引擎</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> egg <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'egg'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">AppController</span> <span class="token keyword">extends</span> <span class="token class-name">egg<span class="token punctuation">.</span>Controller</span> <span class="token punctuation">{</span>  <span class="token keyword">async</span> <span class="token function">home</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">await</span> ctx<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'app.tpl'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> title<span class="token punctuation">:</span> <span class="token string">'自定义渲染'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>webpack.config.js 配置 <blockquote><p>该配置基于 easywebpack 配置，如果要用原生 webpack 请参考：<a href="/blog/wumyiw">/blog/wumyiw</a></p></blockquote></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  target<span class="token punctuation">:</span> <span class="token string">'web'</span><span class="token punctuation">,</span>  entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>    app<span class="token punctuation">:</span> <span class="token string">'app/web/page/app/app.js'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>     <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      chunks<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'runtime'</span><span class="token punctuation">,</span><span class="token string">'common'</span><span class="token punctuation">,</span> <span class="token string">'app'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      filename<span class="token punctuation">:</span> <span class="token string">'../view/app.tpl'</span><span class="token punctuation">,</span>      template<span class="token punctuation">:</span> <span class="token string">'./app/web/view/layout.tpl'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      chunks<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'runtime'</span><span class="token punctuation">,</span><span class="token string">'common'</span><span class="token punctuation">,</span> <span class="token string">'test'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      filename<span class="token punctuation">:</span> <span class="token string">'../view/test.tpl'</span><span class="token punctuation">,</span>      template<span class="token punctuation">:</span> <span class="token string">'./app/web/view/layout.tpl'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="依赖插件"><a href="#依赖插件" class="headerlink" title="依赖插件"></a>依赖插件</h2><ul><li><a href="/blog/wumyiw">egg-webpack</a></li><li><a href="https://github.com/eggjs/egg-view-nunjucks" target="_blank" rel="noopener">egg-view-nunjucks</a> </li><li><a href="https://github.com/gajus/write-file-webpack-plugin" target="_blank" rel="noopener">write-file-webpack-plugin</a></li><li><a href="https://github.com/jantimon/html-webpack-plugin" target="_blank" rel="noopener">html-webpack-plugin</a></li></ul><h2 id="骨架项目"><a href="#骨架项目" class="headerlink" title="骨架项目"></a>骨架项目</h2><p><a href="https://github.com/easy-team/egg-vue-webpack-boilerplate/tree/feature/green/html" target="_blank" rel="noopener">https://github.com/easy-team/egg-vue-webpack-boilerplate/tree/feature/green/html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;在 &lt;a href=&quot;/egg-vue/web&quot;&gt;前端渲染模式&lt;/a&gt; 和 &lt;a href=&quot;/egg-vue/web&quot;&gt;asset 渲染模
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>快速开始</title>
    <link href="https://easyjs.cn/egg-vue/init/"/>
    <id>https://easyjs.cn/egg-vue/init/</id>
    <published>2020-05-31T09:43:53.000Z</published>
    <updated>2020-05-31T09:43:53.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基于-Egg-Vue-Webpack-服务端渲染开发指南"><a href="#基于-Egg-Vue-Webpack-服务端渲染开发指南" class="headerlink" title="基于 Egg + Vue + Webpack 服务端渲染开发指南"></a>基于 Egg + Vue + Webpack 服务端渲染开发指南</h3><h2 id="1-项目初始化"><a href="#1-项目初始化" class="headerlink" title="1. 项目初始化"></a>1. 项目初始化</h2><h3 id="1-1-easywebpack-cli-脚手架初始化项目"><a href="#1-1-easywebpack-cli-脚手架初始化项目" class="headerlink" title="1.1 easywebpack-cli 脚手架初始化项目"></a>1.1 <a href="https://github.com/easy-team/easywebpack-cli" target="_blank" rel="noopener">easywebpack-cli</a> 脚手架初始化项目</h3><ol><li><p>安装脚手架 <code>npm install easywebpack-cli -g</code> 命令行，然后就可以使用 <code>easywebpack</code> 或 <code>easy</code> 命令</p></li><li><p>命令行运行 <code>easywebpack init</code></p></li><li><p>选择 egg+vue server side render boilerplate 初始化骨架项目</p></li><li><p>安装依赖 <code>npm install</code></p></li></ol><h3 id="1-2-GitHub-仓库代码初始化项目"><a href="#1-2-GitHub-仓库代码初始化项目" class="headerlink" title="1.2 GitHub 仓库代码初始化项目"></a>1.2 GitHub 仓库代码初始化项目</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/hubcarl/egg-vue-webpack-boilerplate.git<span class="token function">npm</span> <span class="token function">install</span></code></pre><p>初始化的项目提供多页面和SPA(vue-router/axios)服务端渲染实例，可以直接运行。</p><h3 id="1-3-vscode-插件初始化项目"><a href="#1-3-vscode-插件初始化项目" class="headerlink" title="1.3 vscode 插件初始化项目"></a>1.3 vscode 插件初始化项目</h3><p><a href="https://marketplace.visualstudio.com/items?itemName=hubcarl.vscode-easy-plugin#overview" target="_blank" rel="noopener">https://marketplace.visualstudio.com/items?itemName=hubcarl.vscode-easy-plugin#overview</a></p><h2 id="2-项目运行"><a href="#2-项目运行" class="headerlink" title="2. 项目运行"></a>2. 项目运行</h2><h3 id="2-1-本地运行"><a href="#2-1-本地运行" class="headerlink" title="2.1 本地运行"></a>2.1 本地运行</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> run dev   // egg-bin dev</code></pre><p>npm run dev 做了如下三件事情</p><ul><li><p>启动 egg 应用</p></li><li><p>启动 Webpack 构建, 文件不落地磁盘，构建的文件都在内存里面(只在本地启动, 发布模式是提前构建好文件到磁盘)</p></li><li><p>构建会同时启动两个 Webpack 构建服务, 客户端js构建端口9000, 服务端端口9001</p></li><li><p>构建完成，Egg应用正式可用，自动打开浏览器</p></li></ul><h3 id="2-2-发布模式"><a href="#2-2-发布模式" class="headerlink" title="2.2 发布模式"></a>2.2 发布模式</h3><ul><li>构建文件落地磁盘</li></ul><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> run build 或 easy build prod</code></pre><ol><li><p>启动 Webpack 构建，文件落地磁盘</p></li><li><p>服务端构建的文件放到 <code>app/view</code> 目录</p></li><li><p>前端构建的文件放到 <code>public</code> 目录</p></li><li><p>生成的 <code>manifest.json</code> 放到 <code>config</code> 目录</p></li><li><p>构建的文件都是 gitignore 的，<strong>部署时请注意把这些文件打包进去</strong></p></li></ol><ul><li>运行</li></ul><blockquote><p>非  <code>egg-scripts start</code>   方式启动时， 启动应用前， 请设置 <code>EGG_SERVER_ENV</code> 环境变量，测试环境设置 <code>test</code>， 正式环境设置 <code>prod</code></p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> start  // egg-scripts start</code></pre><h2 id="3-项目构建"><a href="#3-项目构建" class="headerlink" title="3. 项目构建"></a>3. 项目构建</h2><ul><li><p>通过 <code>easywebpack-cli</code> 统一构建，支持 dev，test，prod 模式构建</p></li><li><p><code>easywebpack-cli</code> 通过项目根目录下的 <code>webpack.config.js</code> 配置文件构造出 Webpack 实际的配置文件，配置项请见 <a href="/easywebpack/config">webpack.config.js</a></p></li><li><p>获取 Webpack 实际的配置文件, <a href="https://github.com/easy-team/egg-webpack" target="_blank" rel="noopener">egg-webpack</a> 会使用到该功能。构建会根据 <code>webpackConfigList.length</code> 启动对应个数的 Webpack 编译实例，这里会同时启动两个 Webpack 构建服务, 客户端jsbundle构建，端口9000, 服务端jsbundle构建端口9001。默认端口为9000, 端口依次递增。</p></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// config/config.local.js 本地 npm start 使用</span><span class="token keyword">const</span> EasyWebpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'easywebpack-vue'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>exports<span class="token punctuation">.</span>webpack <span class="token operator">=</span> <span class="token punctuation">{</span>  webpackConfigList<span class="token punctuation">:</span>EasyWebpack<span class="token punctuation">.</span><span class="token function">getWebpackConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><ul><li>该项目中，<code>app/web/page</code> 目录中所有 .vue 文件当作 Webpack 构建入口是采用 app/web/framework/vue/entry 的 <strong>client-loader.js</strong> 和 *<em>server-loader.js *</em>模板实现的，这个需要结合 <code>webpack.config.js</code> 下的 entry.loader 使用。 骨架最新版本已被下面 <a href="https://github.com/isaacs/node-glob" target="_blank" rel="noopener">node-glob</a> 模式所替换。 这种方式可以自定义 entry 初始化模板。</li></ul><pre class=" language-javascript"><code class="language-javascript">entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>   include<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'app/web/page'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   exclude<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'app/web/page/[a-z]+/component'</span><span class="token punctuation">,</span> <span class="token string">'app/web/page/app'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   loader<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 如果没有配置loader模板，默认使用 .js 文件作为构建入口</span>      client<span class="token punctuation">:</span> <span class="token string">'app/web/framework/vue/entry/client-loader.js'</span><span class="token punctuation">,</span>      server<span class="token punctuation">:</span> <span class="token string">'app/web/framework/vue/entry/server-loader.js'</span><span class="token punctuation">,</span>   <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><ul><li>使用 <a href="https://github.com/isaacs/node-glob" target="_blank" rel="noopener">node-glob</a> 遍历文件。下面配置会自动遍历 <code>app/web/page</code>  目录的所有 vue 文件作为 entry 入口，排除 <code>component|components|view|views</code> 目录下的文件。 这个是 <a href="https://github.com/easy-team/egg-vue-webpack-boilerplate" target="_blank" rel="noopener">egg vue ssr </a> 项目默认配置,  同时使用 <a href="https://github.com/easy-team/vue-entry-loader" target="_blank" rel="noopener">vue-entry-loader</a>  作为模板入口 。<a href="mailto:easywebpack@4.8.0">easywebpack@4.8.0</a> 开始支持，因为有了默认配置，所以最新的骨架项目中，webpack.config.js 文件为非必须配置。</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// webpack.config.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 注意 只有 entry 文件是 .vue 文件(非.js）时，才会自动使用 vue-entry-loader 模板</span>  entry<span class="token punctuation">:</span> <span class="token string">'app/web/page/**!(component|components|view|views)/*.vue'</span><span class="token punctuation">}</span></code></pre><h2 id="4-项目规范"><a href="#4-项目规范" class="headerlink" title="4. 项目规范"></a>4. 项目规范</h2><ul><li><p><a href="https://eggjs.org/zh-cn/basics/structure.html" target="_blank" rel="noopener">遵循 egg 开发规范</a></p></li><li><p>Vue 项目代码放到 app/web 目录，页面入口目录为 page，该目录的 所有 vue 文件默认会作为 Webpack 的 entry 构建入口。建议每个页面目录的只保留一个vue文件，vue关联的组件可以放到widget 或者 compnent目录。如果非要放到当前目录，请配置 <code>webpack.config.js</code> entry.exclude 排除 vue文件。</p></li></ul><p><img src="https://cdn.yuque.com/yuque/0/2018/png/116733/1528521398498-da1702b8-03e0-455b-8efc-b1ebb005abf3.png#width=234" alt=""></p><h2 id="5-项目开发"><a href="#5-项目开发" class="headerlink" title="5. 项目开发"></a>5. 项目开发</h2><p>支持多页面/单页面服务端渲染, 前端渲染, 静态页面三种方式.</p><h3 id="5-1-多页面服务端渲染实现"><a href="#5-1-多页面服务端渲染实现" class="headerlink" title="5.1 多页面服务端渲染实现"></a>5.1 多页面服务端渲染实现</h3><h4 id="5-1-1-多页面前端页面实现"><a href="#5-1-1-多页面前端页面实现" class="headerlink" title="5.1.1 多页面前端页面实现"></a>5.1.1 多页面前端页面实现</h4><p>在app/web/page 目录下面创建home目录, home.vue 文件, Webpack自动根据.vue文件创建entry入口, 具体实现请见<a href="/easywebpack/config">webpack.config.js</a></p><ul><li>home.vue 编写界面逻辑, 根元素为layout(自定义组件, 全局注册, 统一的html, meta, header, body, 你可以自定义 title，description，keywords SEO信息，更多信息请扩展layout).</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>layout</span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>egg vue ssr<span class="token punctuation">"</span></span> <span class="token attr-name">description</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vue server side render<span class="token punctuation">"</span></span>  <span class="token attr-name">keywords</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>egg, vue, webpack, server side render<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   {{message}}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>layout</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">  <span class="token atrule"><span class="token rule">@import</span> <span class="token string">"home.css"</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/babel<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    components<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h4 id="5-1-2-多页面后端渲染实现-通过-egg-view-vue-ssr-插件-render-方法实现"><a href="#5-1-2-多页面后端渲染实现-通过-egg-view-vue-ssr-插件-render-方法实现" class="headerlink" title="5.1.2 多页面后端渲染实现, 通过 egg-view-vue-ssr 插件 render 方法实现"></a>5.1.2 多页面后端渲染实现, 通过 <code>egg-view-vue-ssr</code> 插件 <code>render</code> 方法实现</h4><ul><li>创建controller文件home.js</li></ul><pre class=" language-javascript"><code class="language-javascript">exports<span class="token punctuation">.</span>index <span class="token operator">=</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">yield</span> ctx<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'home/home.js'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> message<span class="token punctuation">:</span> <span class="token string">'vue server side render!'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><ul><li>添加路由配置</li></ul><pre class=" language-javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/home'</span><span class="token punctuation">,</span> app<span class="token punctuation">.</span>controller<span class="token punctuation">.</span>home<span class="token punctuation">.</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="5-1-3-多页面走前端渲染-后端路由-实现-通过-egg-view-vue-ssr-插件-renderClient-方法实现"><a href="#5-1-3-多页面走前端渲染-后端路由-实现-通过-egg-view-vue-ssr-插件-renderClient-方法实现" class="headerlink" title="5.1.3 多页面走前端渲染(后端路由)实现, 通过 egg-view-vue-ssr 插件 renderClient 方法实现"></a>5.1.3 多页面走前端渲染(后端路由)实现, 通过 <code>egg-view-vue-ssr</code> 插件 <code>renderClient</code> 方法实现</h4><ul><li>创建controller文件home.js</li></ul><pre class=" language-javascript"><code class="language-javascript">exports<span class="token punctuation">.</span>client <span class="token operator">=</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">yield</span> ctx<span class="token punctuation">.</span><span class="token function">renderClient</span><span class="token punctuation">(</span><span class="token string">'home/home.js'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> message<span class="token punctuation">:</span> <span class="token string">'vue server side render!'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><ul><li>添加路由配置</li></ul><pre class=" language-javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/client'</span><span class="token punctuation">,</span> app<span class="token punctuation">.</span>controller<span class="token punctuation">.</span>home<span class="token punctuation">.</span>home<span class="token punctuation">.</span>client<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="5-2-HTML静态页面前端渲染"><a href="#5-2-HTML静态页面前端渲染" class="headerlink" title="5.2 HTML静态页面前端渲染"></a>5.2 HTML静态页面前端渲染</h3><ul><li><p>直接有easywebpack构建出静态HTML文件, 请见 <code>webpack.config.js</code> 配置和 <code>app/web/page/html</code>代码实现</p></li><li><p>通过 <code>egg-static</code> 静态文件访问HTML文件</p></li></ul><h3 id="5-3-单页面服务器渲染同构实现"><a href="#5-3-单页面服务器渲染同构实现" class="headerlink" title="5.3 单页面服务器渲染同构实现"></a>5.3 单页面服务器渲染同构实现</h3><h4 id="5-3-1-单页面前端实现"><a href="#5-3-1-单页面前端实现" class="headerlink" title="5.3.1 单页面前端实现"></a>5.3.1 单页面前端实现</h4><p>在app/web/page 目录下面创建app目录, app.vue, app.js 文件.</p><ul><li>app.vue 编写界面逻辑, 根元素为layout(自定义组件, 全局注册, 统一的html, meta, header, body)</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>app-layout</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fade<span class="token punctuation">"</span></span> <span class="token attr-name">mode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>out-in<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>app-layout</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sass<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/babel<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><ul><li>app.js 页面调用入口</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> sync <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vuex-router-sync'</span><span class="token punctuation">;</span><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">'store/app'</span><span class="token punctuation">;</span><span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">'component/app/router'</span><span class="token punctuation">;</span><span class="token keyword">import</span> app <span class="token keyword">from</span> <span class="token string">'./app.vue'</span><span class="token punctuation">;</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'app'</span><span class="token punctuation">;</span><span class="token keyword">import</span> Layout <span class="token keyword">from</span> <span class="token string">'component/layout/app'</span><span class="token punctuation">;</span>App<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span>Layout<span class="token punctuation">.</span>name<span class="token punctuation">,</span> Layout<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sync</span><span class="token punctuation">(</span>store<span class="token punctuation">,</span> router<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  base<span class="token punctuation">:</span> <span class="token string">'/app'</span><span class="token punctuation">,</span>  <span class="token operator">...</span>app<span class="token punctuation">,</span>  router<span class="token punctuation">,</span>  store<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="5-3-2-单页面后端实现"><a href="#5-3-2-单页面后端实现" class="headerlink" title="5.3.2 单页面后端实现"></a>5.3.2 单页面后端实现</h4><ul><li>创建controller文件app.js</li></ul><pre class=" language-javascript"><code class="language-javascript">exports<span class="token punctuation">.</span>index <span class="token operator">=</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">yield</span> ctx<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'app/app.js'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> url<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>url<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\/app/</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><ul><li>添加路由配置</li></ul><pre class=" language-javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/app(/.+)?'</span><span class="token punctuation">,</span> app<span class="token punctuation">.</span>controller<span class="token punctuation">.</span>app<span class="token punctuation">.</span>app<span class="token punctuation">.</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="6-项目部署"><a href="#6-项目部署" class="headerlink" title="6. 项目部署"></a>6. 项目部署</h2><ul><li><p>正式环境部署，请设置 <code>EGG_SERVER_ENV=prod</code> 环境变量, 更多请见<a href="https://eggjs.org/zh-cn/basics/env.html" target="_blank" rel="noopener">运行环境</a></p></li><li><p>构建的 <code>app/view</code> 目录, <code>public</code> 目录以及 <code>buildConfig.json</code> 和 <code>manifest.json</code>等文件, 都是 <code>gitignore</code> 的，部署时请注意把这些文件打包进去。</p></li></ul><h2 id="7-构建目录"><a href="#7-构建目录" class="headerlink" title="7. 构建目录"></a>7. 构建目录</h2><ul><li><p>Webpack构建服务端(Node) JSBundle运行文件, 构建的服务端渲染模板文件位置 <code>${app_root}/app/view</code></p></li><li><p>Webpack构建浏览器JSBundle运行文件, 构建的前端资源(js/css/image)文件位置 <code>${app_root}/public</code></p></li><li><p>Webpack构建的 <code>manifest.json</code> 文件位置 <code>${app_root}/config</code> 目录</p></li><li><p>easywebpack-cli 构建配置文件 <code>webpack.config.js</code> 放到项目根目录<code>${app_root}/webpack.config.js</code></p></li><li><p>Vue代码文件<code>${app_root}/app/web</code> 下面, 主要包括 <code>asset</code>, <code>component</code>, <code>framework</code>, <code>page</code>, <code>store</code>, <code>view</code> 等目录</p></li></ul><pre><code>├── asset│   ├── css│   │   ├── normalize.css│   │   └── style.css│   ├── images│   │   ├── favicon.ico│   │   ├── loading.gif│   │   └── logo.png├── component│   ├── app│   │   ├── detail.vue│   │   ├── list.vue│   │   └── router.js│   ├── layout│   │   ├── app│   │   │   ├── content│   │   │   │   ├── content.css│   │   │   │   └── content.vue│   │   │   ├── footer│   │   │   │   ├── footer.css│   │   │   │   └── footer.vue│   │   │   ├── header│   │   │   │   ├── header.css│   │   │   │   └── header.vue│   │   │   ├── index.js│   │   │   └── main.vue├── framework│   ├── inject│   │   ├── global.css│   │   ├── inline.js│   │   └── pack-inline.js│   └── vue│       ├── app.js│       ├── component│       │   └── index.js│       ├── directive│       │   └── index.js│       └── filter│           └── index.js├── page│   ├── app│   │   ├── app.js│   │   └── app.vue│   ├── index│   │   ├── index.css│   │   ├── index.js│   │   └── index.vue├── store│   └── app│       ├── actions.js│       ├── getters.js│       ├── index.js│       ├── mutation-type.js│       └── mutations.js└── view    └── layout.html</code></pre><h3 id="二-项目结构和基本规范"><a href="#二-项目结构和基本规范" class="headerlink" title="二. 项目结构和基本规范"></a>二. 项目结构和基本规范</h3><pre><code>├── app│   ├── controller│   │   ├── test│   │   │   └── test.js│   ├── extend│   ├── lib│   ├── middleware│   ├── mocks│   ├── proxy│   ├── router.js│   ├── view│   │   ├── about                         // 服务器编译的jsbundle文件│   │   │   └── about.js│   │   ├── home│   │   │     └── home.js                 // 服务器编译的jsbundle文件│   │   └── layout.js                     // 编译的layout文件│   └── web                               // 前端工程目录│       ├── asset                         // 存放公共js,css资源│       ├── framework                     // 前端公共库和第三方库│       │   └── entry                          │       │       ├── loader.js              // 根据jsx文件自动生成entry入口文件loader│       ├── page                           // 前端页面和webpack构建目录, 也就是webpack打包配置entryDir│       │   ├── home                       // 每个页面遵循目录名, js文件名, scss文件名, jsx文件名相同│       │   │   ├── home.scss│       │   │   ├── home.jsx│       │   └── hello                      // 每个页面遵循目录名, js文件名, scss文件名, jsx文件名相同│       │       ├── test.css               // 服务器render渲染时, 传入 render(&#39;test/test.js&#39;, data)│       │       └── test.jsx│       ├── store                             │       │   ├── app│       │   │   ├── actions.js│       │   │   ├── getters.js│       │   │   ├── index.js│       │   │   ├── mutation-type.js│       │   │   └── mutations.js│       │   └── store.js│       └── component                         // 公共业务组件, 比如loading, toast等, 遵循目录名, js文件名, scss文件名, jsx文件名相同│           ├── loading│           │   ├── loading.scss│           │   └── loading.jsx│           ├── test│           │   ├── test.jsx│           │   └── test.scss│           └── toast│               ├── toast.scss│               └── toast.jsx├── config│   ├── config.default.js│   ├── config.local.js│   ├── config.prod.js│   ├── config.test.js│   └── plugin.js├── doc├── index.js├── webpack.config.js                      // easywebpack-cli 构建配置├── public                                 // webpack编译目录结构, render文件查找目录│   ├── static│   │   ├── css│   │   │   ├── home│   │   │   │   ├── home.07012d33.css│   │   │   └── test│   │   │       ├── test.4bbb32ce.css│   │   ├── img│   │   │   ├── change_top.4735c57.png│   │   │   └── intro.0e66266.png│   ├── test│   │   └── test.js│   └── vendor.js                         // 生成的公共打包库</code></pre><h2 id="8-项目和插件"><a href="#8-项目和插件" class="headerlink" title="8. 项目和插件"></a>8. 项目和插件</h2><ul><li><p><a href="https://github.com/easy-team/egg-vue-webpack-boilerplate" target="_blank" rel="noopener">egg-vue-webpack-boilerplate</a> 基于easywebpack-vue和egg-view-vue(ssr)插件的工程骨架项目</p></li><li><p><a href="https://github.com/easy-team/easywebpack-vue" target="_blank" rel="noopener">easywebpack-vue</a> Webpack Vue 构建工程化方案.</p></li><li><p><a href="https://github.com/easy-team/easywebpack-cli" target="_blank" rel="noopener">easywebpack-cli</a>  Webpack 构建工程化脚手架.</p></li><li><p><a href="https://github.com/easy-team/egg-view-vue-ssr" target="_blank" rel="noopener">egg-view-vue-ssr</a> egg vue ssr 解决方案.</p></li><li><p><a href="https://github.com/easy-team/egg-webpack" target="_blank" rel="noopener">egg-webpack</a> 本地开发热更新使用.</p></li><li><p><a href="https://github.com/easy-team/egg-webpack-vue" target="_blank" rel="noopener">egg-webpack-vue</a> 本地开发渲染内存读取辅助插件</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;基于-Egg-Vue-Webpack-服务端渲染开发指南&quot;&gt;&lt;a href=&quot;#基于-Egg-Vue-Webpack-服务端渲染开发指南&quot; class=&quot;headerlink&quot; title=&quot;基于 Egg + Vue + Webpack 服务端渲染开发指南&quot;&gt;&lt;/
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>部署流程</title>
    <link href="https://easyjs.cn/egg-vue/online/"/>
    <id>https://easyjs.cn/egg-vue/online/</id>
    <published>2020-05-31T09:43:53.000Z</published>
    <updated>2020-05-31T09:43:53.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="项目开发"><a href="#项目开发" class="headerlink" title="项目开发"></a>项目开发</h2><p>在 <a href="https://github.com/easy-team/egg-vue-webpack-boilerplate" target="_blank" rel="noopener">egg-vue-webpack-boilerplate</a> 骨架项目中, 提供了一些demo, 如果要进行新项目开发，可以删除部分文件：</p><ul><li><p>app/web/page 是页面目录。下面的每个目录都是一个单独的页面，其中 app 目录是一个单页面服务端渲染例子，其他是简单的 Vue 服务端渲染例子， 这些文件都可以删除，删除后，你需要自己按照类似方式添加页面进行开发。</p></li><li><p>app/controller 是服务端页面处理逻辑入口，下面都是例子，可以删除， 然后自己根据业务添加对应的controller</p></li><li><p>asset 是几个公共的静态资源文件，如果 app/web/component下面没有引用到，可以根据需要删除</p></li><li><p>controller 和 page 删除了部分文件后，需要清理 app/router.js 和 webpack.config.js 下面文件不存在的一下配置</p></li><li><p>app/web/component 下面的 app 是单页面的 router 配置，如果 app/web/page/app  删除了，这个也可以删除</p></li><li><p>app/web/component/layout 提供了单页面 layout 和 多页面 layout, 自己根据需要选用。</p></li></ul><h2 id="骨架模板"><a href="#骨架模板" class="headerlink" title="骨架模板"></a>骨架模板</h2><p><a href="https://github.com/easy-team/egg-vue-webpack-boilerplate" target="_blank" rel="noopener">egg-vue-webpack-boilerplate</a> 项目单独提供了两个纯净版本分支用于实际项目开发</p><ul><li><p>Egg + Vue + axios 多页面服务端渲染分支 <a href="https://github.com/hubcarl/egg-vue-webpack-boilerplate/tree/feature/green/multi" target="_blank" rel="noopener">feature/green/multi</a></p></li><li><p>Egg + Vue + Vue-Router + Vuex + Axios 单页面服务端渲染分支 <a href="https://github.com/hubcarl/egg-vue-webpack-boilerplate/tree/feature/green/spa" target="_blank" rel="noopener">feature/green/spa</a></p></li></ul><h3 id="命令配置"><a href="#命令配置" class="headerlink" title="命令配置"></a>命令配置</h3><p>一般我们推荐把 <code>easy build dev</code>, <code>easy build test</code>, <code>easy build prod</code> 配置到 项目的 <code>package.json</code> 的 script 中去, 然后通过 npm run [command] 的方式使用。</p><ul><li><p>通过 <code>npm run [command]</code> 方式使用 easy 命令时，不需要全局安装 <code>easywepback-cli</code> 命令行工具, 只需要把 <code>easywepback-cli</code> 安装到项目 <code>devDependencies</code> 即可。</p></li><li><p>在命令行直接使用 <code>easy</code> 命令时，需要全局安装 <code>easywepback-cli</code> 命令行工具。如果不安装, 可以通过 npm5 支持的 <code>npx easy</code> 方式运行。</p></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>   <span class="token string">"scripts"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"clean"</span><span class="token punctuation">:</span> <span class="token string">"easy clean"</span><span class="token punctuation">,</span>    <span class="token string">"debug"</span><span class="token punctuation">:</span> <span class="token string">"egg-bin debug"</span><span class="token punctuation">,</span>    <span class="token string">"build"</span><span class="token punctuation">:</span> <span class="token string">"cross-env easy clean &amp;&amp; easy build prod"</span><span class="token punctuation">,</span>    <span class="token string">"dev"</span><span class="token punctuation">:</span> <span class="token string">"egg-bin dev"</span><span class="token punctuation">,</span>    <span class="token string">"start"</span><span class="token punctuation">:</span> <span class="token string">"egg-scripts start"</span><span class="token punctuation">,</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li><p>本项目本地开发过程中, <code>npm run dev</code>  自动启动 Webpack 内存构建，无需手动构建;</p></li><li><p><strong>测试环境和正式环境发布部署一定要先进行 npm run build 模式构建，然后再打包, 只用 npm start  启动即可</strong></p></li><li><p>如果不是用 <code>egg-scripts start</code> 启动应用， 请配置 <a href="https://eggjs.org/zh-cn/basics/env.html" target="_blank" rel="noopener">EGG_SERVER_ENV</a> 环境变量。<code>EGG_SERVER_ENV</code>表示 Egg 用那种方式启动, <code>test</code> 表示读取 <code>config.test.js</code> 配置， <code>prod</code> 表示读取 <code>config.prod.js</code> 配置， 正式线上运行一定要用 <code>prod</code> 模式。例如自己写 <code>index.js</code>  启动脚本, 然后通过 <code>node index.js</code>   启动时，请配置 <a href="https://eggjs.org/zh-cn/basics/env.html" target="_blank" rel="noopener">EGG_SERVER_ENV</a> 环境变量。</p></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ${root}/index.js</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'egg'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startCluster</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  baseDir<span class="token punctuation">:</span> __dirname<span class="token punctuation">,</span>  port<span class="token punctuation">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>PORT<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="本地开发模式"><a href="#本地开发模式" class="headerlink" title="本地开发模式"></a>本地开发模式</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> run dev</code></pre><p>使用 <code>egg-webpack</code> 插件进行前端资源构建, 这个插件只会在本地开发启用。</p><h4 id="本地模拟测试环境"><a href="#本地模拟测试环境" class="headerlink" title="本地模拟测试环境"></a>本地模拟测试环境</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> run build:test<span class="token function">npm</span> run start:test</code></pre><h4 id="本地模拟正式环境"><a href="#本地模拟正式环境" class="headerlink" title="本地模拟正式环境"></a>本地模拟正式环境</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> run build<span class="token function">npm</span> start</code></pre><h3 id="打包部署"><a href="#打包部署" class="headerlink" title="打包部署"></a>打包部署</h3><p>项目开发完成以后，我们要部署上线, 一般如下步骤:</p><h4 id="清除缓存"><a href="#清除缓存" class="headerlink" title="清除缓存"></a>清除缓存</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> run clean</code></pre><h4 id="开始构建"><a href="#开始构建" class="headerlink" title="开始构建"></a>开始构建</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> run build</code></pre><h4 id="打包上传"><a href="#打包上传" class="headerlink" title="打包上传"></a>打包上传</h4><blockquote><p>这里需要你自己实现把构建好的文件和项目文件一起打成 zip 或 tar 包，然后上传到部署平台进行部署。参数配置请见：<a href="/easywebpack/build">/easywebpack/build</a></p></blockquote><ul><li><p>Node 端项目源代码需要打包上传，包括 config,  app 目录 以及app/web/view（app/web 目录除外）</p></li><li><p>需要把构建后的文件(public目录，app/view 目录， config/manifest.json)与 Node 端项目源代码一起打包部署，当然部分文件(README.md, eslint, gitignore等)可以不打进去。</p></li><li><p>如果 <code>node_modules</code> 在打包时也打进去，packjson.json 里面的 devDependencies 依赖是不需要打进去的，这些只在开发期间和 Webpack 构建期间用到，不需要打进去。如果打进去也没有问题，只是包非常大，部署上传是个问题。</p></li><li><p>如果 <code>node_modules</code> 在打包时不打进去，在<strong>启动</strong>之前，你需要先按照依赖 <code>npm install --production</code></p></li></ul><h4 id="内置依赖和node依赖打包模式："><a href="#内置依赖和node依赖打包模式：" class="headerlink" title="内置依赖和node依赖打包模式："></a>内置依赖和node依赖打包模式：</h4><blockquote><p><strong>这里会把代码，构建文件，node_modules 以及 node 一起压缩程 zip， 这样线上在启动时就不需要安装依赖。</strong></p></blockquote><pre class=" language-bash"><code class="language-bash">easy clean alleasy build prodeasy <span class="token function">zip</span> --deps --nodejs</code></pre><h5 id=""><a href="#" class="headerlink" title=""></a></h5><h4 id="线上安装依赖打包模式："><a href="#线上安装依赖打包模式：" class="headerlink" title="线上安装依赖打包模式："></a>线上安装依赖打包模式：</h4><blockquote><p><strong>这里仅仅把代码构建文件一起压缩成 zip， 这样线上在启动时需要运行 npm install –production 安装依赖。</strong></p></blockquote><pre class=" language-bash"><code class="language-bash">easy clean alleasy build prodeasy <span class="token function">zip</span></code></pre><h4 id="线上项目启动"><a href="#线上项目启动" class="headerlink" title="线上项目启动"></a>线上项目启动</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> start</code></pre><p>如果不是用 <code>egg-scripts start</code> 启动应用， 请配置 <a href="https://eggjs.org/zh-cn/basics/env.html" target="_blank" rel="noopener">EGG_SERVER_ENV</a> 环境变量 <code>EGG_SERVER_ENV=prod NODE_ENV=production</code>  配置环境变量.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;项目开发&quot;&gt;&lt;a href=&quot;#项目开发&quot; class=&quot;headerlink&quot; title=&quot;项目开发&quot;&gt;&lt;/a&gt;项目开发&lt;/h2&gt;&lt;p&gt;在 &lt;a href=&quot;https://github.com/easy-team/egg-vue-webpack-boiler
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>服务端渲染模式</title>
    <link href="https://easyjs.cn/egg-vue/node/"/>
    <id>https://easyjs.cn/egg-vue/node/</id>
    <published>2020-05-31T09:43:53.000Z</published>
    <updated>2020-05-31T09:43:53.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Egg-Vue-服务端-Node-渲染模式"><a href="#Egg-Vue-服务端-Node-渲染模式" class="headerlink" title="Egg + Vue 服务端 Node 渲染模式"></a>Egg + Vue 服务端 Node 渲染模式</h3><p>目前 <a href="https://github.com/easy-team/egg-view-vue-ssr" target="_blank" rel="noopener">egg-view-vue-ssr</a> 支持 <strong>服务端渲染模式</strong> 和 <strong>前端渲染模式</strong> 两种渲染模式</p><p>这里服务端渲染指的是编写的 Vue 组件在 Node 服务端直接编译成完整的HTML, 然后直接输出给浏览器。MVVM 服务端渲染相比前端渲染，支持SEO，更快的首屏渲染，相比传统的模板引擎，更好的组件化，前后端模板共用。 同时 MVVM 数据驱动方式有着更快的开发效率。总体来说，MVVM 框架的服务端渲染技术比较适合有一定交互性，且对SEO，首屏速度有要求的业务应用。当然, 如果想用于不属于该类型的项目(比如各种后台管理系统)也是可以的, 就当纯粹的玩一玩 Vue SSR 开发。</p><h4 id="调用-egg-view-vue-ssr-的-render-或-renderToHtml-方法实现服务端渲染"><a href="#调用-egg-view-vue-ssr-的-render-或-renderToHtml-方法实现服务端渲染" class="headerlink" title="调用 egg-view-vue-ssr 的 render 或 renderToHtml  方法实现服务端渲染"></a>调用 <code>egg-view-vue-ssr</code> 的 <code>render</code> 或 <code>renderToHtml</code>  方法实现服务端渲染</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// controller/home.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> app <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">class</span> <span class="token class-name">HomeController</span> <span class="token keyword">extends</span> <span class="token class-name">app<span class="token punctuation">.</span>Controller</span> <span class="token punctuation">{</span>    <span class="token keyword">async</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> <span class="token punctuation">{</span> ctx <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>      <span class="token keyword">await</span> ctx<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'home/home.js'</span><span class="token punctuation">,</span> Model<span class="token punctuation">.</span><span class="token function">getPage</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">async</span> <span class="token function">index2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> <span class="token punctuation">{</span> ctx <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>      <span class="token keyword">const</span> html <span class="token operator">=</span> <span class="token keyword">await</span> ctx<span class="token punctuation">.</span><span class="token function">renderToHtml</span><span class="token punctuation">(</span><span class="token string">'home/home.js'</span><span class="token punctuation">,</span> Model<span class="token punctuation">.</span><span class="token function">getPage</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 这里可以处理对渲染后的 HTML 进行处理</span>      ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> html<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><ul><li><p><code>home/home.js</code> 是由 Webpack(<code>target:node</code>) 把 Vue 变成 Node 服务端运行的运行文件, 默认在 <code>${app_root}/app/view</code> 目录下。</p></li><li><p><code>Model.getPage(1, 10)</code> 表示在 Node 服务端获取到的业务数据，传给 Vue 组件在 Node 端进行模板编译为 HTML</p></li><li><p>Node 编译 HTML之后会根据 <code>config/manifest.json</code> 文件把 css, js 资源依赖注入到 HTML</p></li><li><p>当服务队渲染失败时, <code>egg-view-vue-ssr</code> 默认开启进行客户端渲染模式。当线上流量过大时, 可以根据一定策略一部分用户服务端渲染, 一部分用户前端渲染, 减少服务端压力。</p></li><li><p>本地开发默认禁用缓存, 线上运行模式默认开启缓存。</p></li><li><p>如果是 SPA SSR 应用, 一般是在 Vue 里面提供组件的 fetch 方法由 Node 进行 fetch 数据调用, 然后把数据放入 store, 而不是在 Node 端进行获取, 具体见<a href="https://github.com/easy-team/egg-vue-webpack-boilerplate/blob/master/app/web/page/app/app.js" target="_blank" rel="noopener">egg-vue-webpack-boilerplate</a> 功能实现。 <strong>如果是单页面服务端渲染，一定注意 store 的创建时机，否则 store 全局共享，内存泄漏，请见下面 38 行代码。</strong></p></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> sync <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vuex-router-sync'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>config <span class="token operator">=</span> config<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">bootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>EASY_ENV_IS_NODE<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">server</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">client</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">create</span><span class="token punctuation">(</span>initState<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> index<span class="token punctuation">,</span> options<span class="token punctuation">,</span> createStore<span class="token punctuation">,</span> createRouter <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>config<span class="token punctuation">;</span>    <span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>initState<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sync</span><span class="token punctuation">(</span>store<span class="token punctuation">,</span> router<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      <span class="token operator">...</span>index<span class="token punctuation">,</span>      <span class="token operator">...</span>options<span class="token punctuation">,</span>      router<span class="token punctuation">,</span>      store    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">client</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'axios'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>__INITIAL_STATE__<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> root <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'app'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> hydrate <span class="token operator">=</span> root<span class="token punctuation">.</span>childNodes<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span>    app<span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> hydrate<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> app<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">server</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> context <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// store 和 router 一定要在这里面创建，否则 store 全局共享，内存泄漏</span>      <span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">const</span> <span class="token punctuation">{</span> store<span class="token punctuation">,</span> router <span class="token punctuation">}</span> <span class="token operator">=</span> options<span class="token punctuation">;</span>      router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>state<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        router<span class="token punctuation">.</span><span class="token function">onReady</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token keyword">const</span> matchedComponents <span class="token operator">=</span> router<span class="token punctuation">.</span><span class="token function">getMatchedComponents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>matchedComponents<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token punctuation">{</span> code<span class="token punctuation">:</span> <span class="token string">'404'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>            matchedComponents<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>component <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>component<span class="token punctuation">.</span>preFetch<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> component<span class="token punctuation">.</span><span class="token function">preFetch</span><span class="token punctuation">(</span>store<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>              <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>          <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            context<span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>              <span class="token operator">...</span>store<span class="token punctuation">.</span>state<span class="token punctuation">,</span>              <span class="token operator">...</span>context<span class="token punctuation">.</span>state            <span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="Egg-Vue-客户端浏览器渲染模式"><a href="#Egg-Vue-客户端浏览器渲染模式" class="headerlink" title="Egg + Vue 客户端浏览器渲染模式"></a>Egg + Vue 客户端浏览器渲染模式</h3><p><a href="/egg-vue/wekmet">/egg-vue/wekmet</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Egg-Vue-服务端-Node-渲染模式&quot;&gt;&lt;a href=&quot;#Egg-Vue-服务端-Node-渲染模式&quot; class=&quot;headerlink&quot; title=&quot;Egg + Vue 服务端 Node 渲染模式&quot;&gt;&lt;/a&gt;Egg + Vue 服务端 Node 渲染
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>社区作品</title>
    <link href="https://easyjs.cn/egg-vue/open/"/>
    <id>https://easyjs.cn/egg-vue/open/</id>
    <published>2020-05-31T09:43:53.000Z</published>
    <updated>2020-05-31T09:43:53.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="游戏中心"><a href="#游戏中心" class="headerlink" title="游戏中心"></a><a href="http://g.aligames.com/" target="_blank" rel="noopener">游戏中心</a></h3><h3 id=""><a href="#" class="headerlink" title=""></a><img src="https://cdn.nlark.com/yuque/0/2019/png/116733/1564206427689-3b583f49-3e54-4e2f-830a-5da473b02125.png#align=left&display=inline&height=559&name=image.png&originHeight=1230&originWidth=2838&size=1211491&status=done&width=1289.9999720400035" alt="image.png"></h3><h3 id="小米游戏中心"><a href="#小米游戏中心" class="headerlink" title="小米游戏中心"></a><a href="http://game.xiaomi.com/" target="_blank" rel="noopener">小米游戏中心</a></h3><p><img src="https://cdn.nlark.com/yuque/0/2019/png/116733/1564206365719-202e631c-6e9d-4b58-95cd-8efc490da74a.png#align=left&display=inline&height=415&name=image.png&originHeight=914&originWidth=2028&size=840583&status=done&width=921.8181618383112" alt="image.png"></p><h2 id="-1"><a href="#-1" class="headerlink" title=""></a></h2><h2 id="easy-team"><a href="#easy-team" class="headerlink" title="easy-team "></a><a href="https://github.com/easy-team/egg-vue-webpack-boilerplate" target="_blank" rel="noopener">easy-team </a></h2><p><img src="https://cdn.nlark.com/yuque/0/2018/png/116733/1541580981262-3da75698-3e67-4b65-8198-fe9d8e7bec2c.png#align=left&display=inline&height=804&originHeight=804&originWidth=1545&status=done&width=827" alt=""></p><p><img src="https://cdn.nlark.com/yuque/0/2018/png/116733/1541580991134-709e24f0-15e8-46c3-8756-f60273158d5d.png#align=left&display=inline&height=834&originHeight=834&originWidth=1547&status=done&width=827" alt=""></p><h2 id="https-github-com-zhqlol-edgarserver"><a href="#https-github-com-zhqlol-edgarserver" class="headerlink" title="https://github.com/zhqlol/edgarserver"></a><a href="https://github.com/zhqlol/edgarserver" target="_blank" rel="noopener">https://github.com/zhqlol/edgarserver</a></h2><blockquote><p><a href="https://www.jianshu.com/p/71fe6197d358" target="_blank" rel="noopener">https://www.jianshu.com/p/71fe6197d358</a></p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2018/png/116733/1541580799213-051786ce-97dd-48e9-9489-10a57895f9b1.png#align=left&display=inline&height=498&originHeight=498&originWidth=1000&status=done&width=827" alt=""><br /><img src="https://cdn.nlark.com/yuque/0/2018/png/116733/1541580785882-5b1c9b5b-b741-43e9-a4ce-1ddbc2bb723b.png#align=left&display=inline&height=493&originHeight=493&originWidth=1000&status=done&width=827" alt=""></p><h2 id="https-github-com-MaleWeb-FullStack-Cli"><a href="#https-github-com-MaleWeb-FullStack-Cli" class="headerlink" title="https://github.com/MaleWeb/FullStack_Cli"></a><a href="https://github.com/MaleWeb/FullStack_Cli" target="_blank" rel="noopener">https://github.com/MaleWeb/FullStack_Cli</a></h2><p><img src="https://cdn.nlark.com/yuque/0/2018/png/116733/1541581417467-e666e121-750a-4671-9aee-a899a8a08df1.png#align=left&display=inline&height=743&originHeight=743&originWidth=1106&status=done&width=827" alt=""></p><p><img src="https://cdn.nlark.com/yuque/0/2018/png/116733/1541581440286-b950ac8e-d981-4aaf-a545-9eba681e7254.png#align=left&display=inline&height=857&originHeight=857&originWidth=1757&status=done&width=827" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;游戏中心&quot;&gt;&lt;a href=&quot;#游戏中心&quot; class=&quot;headerlink&quot; title=&quot;游戏中心&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://g.aligames.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;游戏中心&lt;/a&gt;&lt;/
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Service Worker</title>
    <link href="https://easyjs.cn/egg-vue/pwa/"/>
    <id>https://easyjs.cn/egg-vue/pwa/</id>
    <published>2020-05-31T09:43:53.000Z</published>
    <updated>2020-05-31T09:43:53.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Egg-Vue-React-SSR-使用-service-worker"><a href="#Egg-Vue-React-SSR-使用-service-worker" class="headerlink" title="Egg + Vue/React SSR 使用 service worker"></a>Egg + Vue/React SSR 使用 service worker</h2><p><code>easywebpack</code> 默认生成的 <code>service-worker.js</code> 是在 <code>${app_root}/public/service-worker.js</code>这里. 这样 <code>service-worker.js</code> 访问路径是 <a href="http://127.0.0.1:7001/public/service-worker.js%E3%80%82" target="_blank" rel="noopener">http://127.0.0.1:7001/public/service-worker.js。</a></p><p>将 service worker 文件注册为 <code>/public/service-worker.js</code>，那么，service worker 只能收到 /public/ 路径下的 <code>fetch</code> 事件（例如： /public/page1/, /public/page2/), 但我们的页面访问是没有 /public/ 这一层路径的。正常情况下, <code>service-worker.js</code> 文件被放在这个域的根目录下，和网站同源。这个 service worker 将会收到这个域下的所有 fetch 事件。</p><p>这个问题可以通过 <a href="https://github.com/hubcarl/egg-serviceworker" target="_blank" rel="noopener">egg-serviceworker</a> 解决。通过 <code>egg-serviceworker</code> 插件, 我们可以这样访问 <a href="http://127.0.0.1:7001/service-worker.js" target="_blank" rel="noopener">http://127.0.0.1:7001/service-worker.js</a></p><ul><li>启用 <code>egg-serviceworker</code></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ${app_root}/config/plugin.js</span>exports<span class="token punctuation">.</span>serviceworker <span class="token operator">=</span> <span class="token punctuation">{</span>  enable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token keyword">package</span><span class="token punctuation">:</span> <span class="token string">'egg-serviceworker'</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><ul><li>注册 <code>service worker</code></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> serviceWorkerRegister <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'service-worker-register'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// The service-worker.js name will get really url address by sw-mapping.json file</span>serviceWorkerRegister<span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">'service-worker.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>自动打开 localhost 域名地址</li></ul><p>配置本地开发启动自动打开 localhost 域名地址</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ${app_root}/config/config.local.js</span>exports<span class="token punctuation">.</span>webpack <span class="token operator">=</span> <span class="token punctuation">{</span>  browser<span class="token punctuation">:</span> <span class="token string">'http://localhost:7001'</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><ul><li>本地测试</li></ul><blockquote><p>注意：因开发环境构建的文件在内存中，sw-precache 获取不到文件列表，目前开发环境是不会注册的。可以通过 发布模式 在本地查看 <code>service worker</code> 注册情况。</p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> run build:test<span class="token function">npm</span> run start:test</code></pre><p>或</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> run build<span class="token function">npm</span> run start</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Egg-Vue-React-SSR-使用-service-worker&quot;&gt;&lt;a href=&quot;#Egg-Vue-React-SSR-使用-service-worker&quot; class=&quot;headerlink&quot; title=&quot;Egg + Vue/React SSR 使用
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>入口实现</title>
    <link href="https://easyjs.cn/egg-vue/qpeiow/"/>
    <id>https://easyjs.cn/egg-vue/qpeiow/</id>
    <published>2020-05-31T09:43:53.000Z</published>
    <updated>2020-05-31T09:43:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>服务端渲染模式需要对同一份 vue 文件构建出两份 JSBundle 文件出来，一份给 Node 渲染使用，一份给浏览器渲染使用，但 Node 和浏览器文件初始化代码是不一样的，这就需要我们针对入口代码进行分别实现。这里提供三种实现方案，请根据项目需要选择合适的方案。</p><h2 id="方案一：-完全自定义入口代码逻辑"><a href="#方案一：-完全自定义入口代码逻辑" class="headerlink" title="方案一： 完全自定义入口代码逻辑"></a>方案一： 完全自定义入口代码逻辑</h2><blockquote><p>这里仅提供代码基本实现，请根据项目实际情况进行修改。</p></blockquote><ul><li>编写 vue 服务端公共入口 <code>${app_root}/app/web/framework/app.js</code></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> sync <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vuex-router-sync'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'./vue/filter'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'./vue/directive'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>config <span class="token operator">=</span> config<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">bootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>EASY_ENV_IS_NODE<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">server</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">client</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">create</span><span class="token punctuation">(</span>initState<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> index<span class="token punctuation">,</span> options<span class="token punctuation">,</span> createStore<span class="token punctuation">,</span> createRouter <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>config<span class="token punctuation">;</span>    <span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>initState<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sync</span><span class="token punctuation">(</span>store<span class="token punctuation">,</span> router<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      <span class="token operator">...</span>index<span class="token punctuation">,</span>      <span class="token operator">...</span>options<span class="token punctuation">,</span>      router<span class="token punctuation">,</span>      store    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">client</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'axios'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>__INITIAL_STATE__<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>    app<span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> app<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">server</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> context <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">const</span> <span class="token punctuation">{</span> store<span class="token punctuation">,</span> router <span class="token punctuation">}</span> <span class="token operator">=</span> options<span class="token punctuation">;</span>      router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>state<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        router<span class="token punctuation">.</span><span class="token function">onReady</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token keyword">const</span> matchedComponents <span class="token operator">=</span> router<span class="token punctuation">.</span><span class="token function">getMatchedComponents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>matchedComponents<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token punctuation">{</span> code<span class="token punctuation">:</span> <span class="token string">'404'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>            matchedComponents<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>component <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>component<span class="token punctuation">.</span>methods <span class="token operator">&amp;&amp;</span> component<span class="token punctuation">.</span>methods<span class="token punctuation">.</span>fetchApi<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token keyword">return</span> component<span class="token punctuation">.</span>methods<span class="token punctuation">.</span><span class="token function">fetchApi</span><span class="token punctuation">(</span>store<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>              <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>          <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            context<span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>              <span class="token operator">...</span>store<span class="token punctuation">.</span>state<span class="token punctuation">,</span>              <span class="token operator">...</span>context<span class="token punctuation">.</span>state            <span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><ul><li>新建 <code>${app_root}/app/web/page/home/home.js</code>  webpack entry 入口文件</li></ul><blockquote><p>这种方式适合需要自定义实现入口代码的比较少页面入口项目，如果项目有多个单独页面，就需要编写下面类似的重复代码，但通过公共代码抽离，问题也不是太大，能满足所有自定义要求，这个完全交给项目自己去实现。</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token string">'use strict'</span><span class="token punctuation">;</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'framework/app.js'</span><span class="token punctuation">;</span><span class="token keyword">import</span> index <span class="token keyword">from</span> <span class="token string">'./index.vue'</span><span class="token punctuation">;</span><span class="token keyword">import</span> createStore <span class="token keyword">from</span> <span class="token string">'./store'</span><span class="token punctuation">;</span><span class="token keyword">import</span> createRouter <span class="token keyword">from</span> <span class="token string">'./router'</span><span class="token punctuation">;</span><span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">{</span> base<span class="token punctuation">:</span> <span class="token string">'/'</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">App</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  index<span class="token punctuation">,</span>  options<span class="token punctuation">,</span>  createStore<span class="token punctuation">,</span>  createRouter<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>详细实现请见：<a href="https://github.com/easy-team/egg-vue-webpack-boilerplate/tree/feature/green/spa" target="_blank" rel="noopener">https://github.com/easy-team/egg-vue-webpack-boilerplate/tree/feature/green/spa</a></p><h2 id="方案二：-自定义入口代码模板化"><a href="#方案二：-自定义入口代码模板化" class="headerlink" title="方案二： 自定义入口代码模板化"></a>方案二： 自定义入口代码模板化</h2><blockquote><p>easywebpack 提供了通过 配置 <a href="/easywebpack/entry">entry.loader 实现入口代码模板化</a>，并且代码模板完全有项目自己实现. 项目只需要实现对应的 loader 即可。这里仅提供代码基本实现，请根据实际项目情况进行修改。</p></blockquote><ul><li>编写 webpack 服务端模式构建 loader 代码 <code>${app_root}/app/web/framework/vue/entry/server-loader.js</code></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token string">'use strict'</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">cacheable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`    import Vue from 'vue';    import vm from '</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>resourcePath<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\\/g</span><span class="token punctuation">,</span> <span class="token string">'\\\\'</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">';    export default function(context) {      const store = typeof vm.store === 'function' ? vm.store(context.state) : vm.store;      const router = typeof vm.router === 'function' ? vm.router() : vm.router;      if (store &amp;&amp; router) {        const sync = require('vuex-router-sync').sync;        sync(store, router);        router.push(context.state.url);        return new Promise((resolve, reject) => {          router.onReady(() => {            const matchedComponents = router.getMatchedComponents();            if (!matchedComponents) {              return reject({ code: '404' });            }            return Promise.all(              matchedComponents.map(component => {                if (component.methods &amp;&amp; component.methods.fetchApi) {                  return component.methods.fetchApi(store);                }                return null;              })            ).then(() => {              context.state = { ...store.state, ...context.state };              const instanceOptions = {                ...vm,                store,                router,              };              return resolve(new Vue(instanceOptions));            });          });        });      }      const VueApp = Vue.extend(vm);      const instanceOptions = {        ...vm,        data: context.state      };      return new VueApp(instanceOptions);    };  `</span></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><ul><li>编写 webpack 浏览器模式构建 loader 代码  <code>${app_root}/app/web/framework/vue/entry/client-loader.js</code></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token string">'use strict'</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`    import Vue from 'vue';    import vm from '</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>resourcePath<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\\/g</span><span class="token punctuation">,</span> <span class="token string">'\\\\'</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">';    const initState = window.__INITIAL_STATE__ || {};    const context = { state: initState };    const store = typeof vm.store === 'function' ? vm.store(initState) : vm.store;    const router = typeof vm.router === 'function' ? vm.router() : vm.router;    const data = typeof vm.data === 'function' ? vm.data() :  {};    const options = store &amp;&amp; router ? {      ...vm,       store,      router    } : {       ...vm,      ...{        data() {          return { ...initState, ...data};        }      }     };    const app = new Vue(options);    app.$mount('#app');  `</span></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><ul><li>Webpack entry loader 配置， 这样就不用写单独的 js 入口文件， vue  文件作为 entry 就可以直接构建出完整的 JSBundle 文件。easywebpack 直接根据 include 目录下的 vue 文件 和  entry loader 构建出完整的 JSBundle 文件。</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token string">'use strict'</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  egg<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  framework<span class="token punctuation">:</span> <span class="token string">'vue'</span><span class="token punctuation">,</span>  entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>    include<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'app/web/page'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    exclude<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'app/web/page/[a-z]+/component'</span><span class="token punctuation">,</span> <span class="token string">'app/web/page/test'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    loader<span class="token punctuation">:</span> <span class="token punctuation">{</span>      client<span class="token punctuation">:</span> <span class="token string">'app/web/framework/vue/entry/client-loader.js'</span><span class="token punctuation">,</span>      server<span class="token punctuation">:</span> <span class="token string">'app/web/framework/vue/entry/server-loader.js'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><p>具体例子可以参考：<a href="https://github.com/easy-team/egg-vue-webpack-boilerplate/tree/feature/green/multi" target="_blank" rel="noopener">https://github.com/easy-team/egg-vue-webpack-boilerplate/tree/feature/green/multi</a></p><h2 id="方案三：-使用框架内置初始化模板loader"><a href="#方案三：-使用框架内置初始化模板loader" class="headerlink" title="方案三： 使用框架内置初始化模板loader"></a>方案三： 使用框架内置初始化模板loader</h2><blockquote><p><a href="mailto:easywebpack@4.8.0">easywebpack@4.8.0</a> 开始支持默认 entry  node-glob 配置模式。node-glob 模式会自动遍历 <code>app/web/page</code>  目录的所有 .vue 文件作为 entry 入口，排除 <code>component|components|view|views</code> 目录下的文件。 如果 entry 是已 .vue 文件，则使用 <a href="https://github.com/hubcarl/vue-entry-loader" target="_blank" rel="noopener">vue-entry-loader </a> 作为模板入口。 </p><p><strong>注意：只有 entry 文件是 .vue 文件(非.js）时，才会自动使用 **vue-entry-loader</strong> 模板。**</p></blockquote><ul><li><strong>统一使用 .vue 文件作为 entry 入口</strong></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// webpack.config.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 注意 只有 entry 文件是 .vue 文件(非.js）时，才会自动使用 vue-entry-loader模板</span>  entry<span class="token punctuation">:</span> <span class="token string">'app/web/page/**!(component|components|view|views)/*.vue'</span><span class="token punctuation">}</span></code></pre><ul><li><strong>js  和 .vue 文件 entry 混合配置</strong><br /></li></ul><pre class=" language-bash"><code class="language-bash">module.exports <span class="token operator">=</span> <span class="token punctuation">{</span>  entry: <span class="token punctuation">{</span>    app: <span class="token string">'app/web/page/app/index.js'</span>, // js 文件需要自己实现初始化逻辑，这个时候可以结合方案一    list: <span class="token string">'app/web/page/list/index.vue'</span> // 自动使用 vue-entry-loader模板  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="entry-更多配置"><a href="#entry-更多配置" class="headerlink" title="entry 更多配置"></a>entry 更多配置</h3><p><a href="/easywebpack/entry">/easywebpack/entry</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;服务端渲染模式需要对同一份 vue 文件构建出两份 JSBundle 文件出来，一份给 Node 渲染使用，一份给浏览器渲染使用，但 Node 和浏览器文件初始化代码是不一样的，这就需要我们针对入口代码进行分别实现。这里提供三种实现方案，请根据项目需要选择合适的方案。&lt;/p
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
